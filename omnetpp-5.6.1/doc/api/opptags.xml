<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="struct">
    <name>omnetpp::cPathFigure::ArcRel</name>
    <filename>structomnetpp_1_1cPathFigure_1_1ArcRel.html</filename>
    <base>omnetpp::cPathFigure::PathItem</base>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cPathFigure::ArcTo</name>
    <filename>structomnetpp_1_1cPathFigure_1_1ArcTo.html</filename>
    <base>omnetpp::cPathFigure::PathItem</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::AverageFilter</name>
    <filename>classomnetpp_1_1AverageFilter.html</filename>
    <base>omnetpp::cNumericResultFilter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1AverageFilter.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::AverageRecorder</name>
    <filename>classomnetpp_1_1AverageRecorder.html</filename>
    <base>omnetpp::cNumericResultRecorder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1AverageRecorder.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cAbstractHistogram::Bin</name>
    <filename>structomnetpp_1_1cAbstractHistogram_1_1Bin.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::cAbstractHistogram</name>
    <filename>classomnetpp_1_1cAbstractHistogram.html</filename>
    <base>omnetpp::cStdDev</base>
    <class kind="struct">omnetpp::cAbstractHistogram::Bin</class>
    <member kind="function">
      <type></type>
      <name>cAbstractHistogram</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>aaf8a336086bb04852fc36ae5317d52cd</anchor>
      <arglist>(const cAbstractHistogram &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cAbstractHistogram</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a240aa123487ee9fe050389e4bc2e0e54</anchor>
      <arglist>(const char *name=nullptr, bool weighted=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cAbstractHistogram</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>af5f32eb086295329fa02d2503a663a0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cAbstractHistogram &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>ade6d5c3c5bd6c99daf8382f2c66e0bc9</anchor>
      <arglist>(const cAbstractHistogram &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cAbstractHistogram *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a8024388f707162c76d6eec4275a0a7f6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>binsAlreadySetUp</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a7e9d755db6f7c401f7518307a68edc88</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setUpBins</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>af3ca6ebaae445281842053686d47f41c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumBins</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a6bcd896c3e971175cb849f734566e538</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getBinEdge</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>ac68554c30479b7888a934512217efdf0</anchor>
      <arglist>(int k) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getBinValue</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>aa7c0dea80ef06fed2aa4fa3488f7a000</anchor>
      <arglist>(int k) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBinPDF</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a22cc31ed52bf59082a63021661f25ce5</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64_t</type>
      <name>getNumUnderflows</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a383b2bea4cdb0ab132e7e68f696cbce8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64_t</type>
      <name>getNumOverflows</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>ab691cabe977f8a7b57a14739c45702e7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getUnderflowSumWeights</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>adc5809eee65440a9bf95a475ef3fd863</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getOverflowSumWeights</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>addbbd4640dffc92f09cc8bf4ae4eca3a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64_t</type>
      <name>getNumNegInfs</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>aedcb1eb775711ce4942780a24890432d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64_t</type>
      <name>getNumPosInfs</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a8b429acc0893d7f202ce8333cb9bc371</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getNegInfSumWeights</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a16cf06d742ecfa29d5c4d30f651dfec9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getPosInfSumWeights</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>ace1df8499091e3d71c99c92e8b4c92ee</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Bin</type>
      <name>getBinInfo</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a9b654d1f1fa4b29288aa89a7d6d06329</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPDF</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a85e64bdf4bf2ce969190130af9664da5</anchor>
      <arglist>(double x) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCDF</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a98144cd86427da47de1520ccb37e2c6d</anchor>
      <arglist>(double x) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED bool</type>
      <name>isTransformed</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a8e96dfad09ab5efbd0859933fc3cae93</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED void</type>
      <name>transform</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>abd9978cadc1cd1323ca46b94ed994dcf</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED int</type>
      <name>getNumCells</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a2d196706419322c59729f95f21b6eaea</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED double</type>
      <name>getBasepoint</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>ac7cde4dd4792c99468f9cdb838d1b581</anchor>
      <arglist>(int k) const final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED double</type>
      <name>getCellValue</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a69c878516476542e40d3ae0ba3795b94</anchor>
      <arglist>(int k) const final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED double</type>
      <name>getCellPDF</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a48d4a234744c8a55ec39e04f8be26dda</anchor>
      <arglist>(int k) const final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED int64_t</type>
      <name>getUnderflowCell</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>abb3a1223dc56464cda7bffeac473aa99</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED int64_t</type>
      <name>getOverflowCell</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a855c0d3f4798bd702bdb3a32793bfbc7</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED Bin</type>
      <name>getCellInfo</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>ac15bd1d6c8ba25703e96dbd537af7bc0</anchor>
      <arglist>(int k) const final</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cAbstractHistogram</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>aaf8a336086bb04852fc36ae5317d52cd</anchor>
      <arglist>(const cAbstractHistogram &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cAbstractHistogram</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a240aa123487ee9fe050389e4bc2e0e54</anchor>
      <arglist>(const char *name=nullptr, bool weighted=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cAbstractHistogram</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>af5f32eb086295329fa02d2503a663a0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cAbstractHistogram &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>ade6d5c3c5bd6c99daf8382f2c66e0bc9</anchor>
      <arglist>(const cAbstractHistogram &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cAbstractHistogram *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a8024388f707162c76d6eec4275a0a7f6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>binsAlreadySetUp</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a7e9d755db6f7c401f7518307a68edc88</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setUpBins</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>af3ca6ebaae445281842053686d47f41c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumBins</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a6bcd896c3e971175cb849f734566e538</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getBinEdge</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>ac68554c30479b7888a934512217efdf0</anchor>
      <arglist>(int k) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getBinValue</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>aa7c0dea80ef06fed2aa4fa3488f7a000</anchor>
      <arglist>(int k) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBinPDF</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a22cc31ed52bf59082a63021661f25ce5</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64_t</type>
      <name>getNumUnderflows</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a383b2bea4cdb0ab132e7e68f696cbce8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64_t</type>
      <name>getNumOverflows</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>ab691cabe977f8a7b57a14739c45702e7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getUnderflowSumWeights</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>adc5809eee65440a9bf95a475ef3fd863</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getOverflowSumWeights</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>addbbd4640dffc92f09cc8bf4ae4eca3a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64_t</type>
      <name>getNumNegInfs</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>aedcb1eb775711ce4942780a24890432d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64_t</type>
      <name>getNumPosInfs</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a8b429acc0893d7f202ce8333cb9bc371</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getNegInfSumWeights</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a16cf06d742ecfa29d5c4d30f651dfec9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getPosInfSumWeights</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>ace1df8499091e3d71c99c92e8b4c92ee</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Bin</type>
      <name>getBinInfo</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a9b654d1f1fa4b29288aa89a7d6d06329</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPDF</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a85e64bdf4bf2ce969190130af9664da5</anchor>
      <arglist>(double x) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCDF</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a98144cd86427da47de1520ccb37e2c6d</anchor>
      <arglist>(double x) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED bool</type>
      <name>isTransformed</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a8e96dfad09ab5efbd0859933fc3cae93</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED void</type>
      <name>transform</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>abd9978cadc1cd1323ca46b94ed994dcf</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED int</type>
      <name>getNumCells</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a2d196706419322c59729f95f21b6eaea</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED double</type>
      <name>getBasepoint</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>ac7cde4dd4792c99468f9cdb838d1b581</anchor>
      <arglist>(int k) const final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED double</type>
      <name>getCellValue</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a69c878516476542e40d3ae0ba3795b94</anchor>
      <arglist>(int k) const final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED double</type>
      <name>getCellPDF</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a48d4a234744c8a55ec39e04f8be26dda</anchor>
      <arglist>(int k) const final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED int64_t</type>
      <name>getUnderflowCell</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>abb3a1223dc56464cda7bffeac473aa99</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED int64_t</type>
      <name>getOverflowCell</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>a855c0d3f4798bd702bdb3a32793bfbc7</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED Bin</type>
      <name>getCellInfo</name>
      <anchorfile>classomnetpp_1_1cAbstractHistogram.html</anchorfile>
      <anchor>ac15bd1d6c8ba25703e96dbd537af7bc0</anchor>
      <arglist>(int k) const final</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cAbstractImageFigure</name>
    <filename>classomnetpp_1_1cAbstractImageFigure.html</filename>
    <base>omnetpp::cFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cAbstractImageFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>ad917e74b5c31e56f6829fb13e9576a1c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Point &amp;</type>
      <name>getPosition</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>ae3d79e85ea8aba1658fee9c1e72c0b46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>a1bc2398e4beaeb90cb7958ac10130d2c</anchor>
      <arglist>(const Point &amp;position)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Anchor</type>
      <name>getAnchor</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>a55a1ff475c7502a2ba72c1efbdbb5d56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAnchor</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>ab8514326899111d810fd28faf760d6f6</anchor>
      <arglist>(Anchor anchor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getWidth</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>ae0366623b2f389ed8388959b5a4caf42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWidth</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>a055ad1afed9743773d75ef1ca5ff8f78</anchor>
      <arglist>(double width)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getHeight</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>ada5b7cdd2893413f283311b0df31de42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHeight</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>a38a5dff518e23a7b14f6212b7111f4b9</anchor>
      <arglist>(double height)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSize</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>a58c0550148909053a6a75af6b9a40ad0</anchor>
      <arglist>(double width, double height)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Rectangle</type>
      <name>getBounds</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>a7aa51c22a1b7acc2a09cfaaa114eb5b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Interpolation</type>
      <name>getInterpolation</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>ae046d9ba63942efe7a730355d77a8234</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInterpolation</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>a3bdebf2d630594d5c06d2ba5e82aeef9</anchor>
      <arglist>(Interpolation interpolation)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getOpacity</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>ad16fa8eb6aaced8e3b20ef044be55e89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOpacity</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>a69863baf54cdbe58ab93993c61a344b9</anchor>
      <arglist>(double opacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Color &amp;</type>
      <name>getTintColor</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>ad58cd4ff2ee326be37fddd3313cafd76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTintColor</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>af565902855c8e891590a11749ef91705</anchor>
      <arglist>(const Color &amp;tintColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getTintAmount</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>a024793ead1875aa69d2c0ea6867e9c0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTintAmount</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>a0cd7e7d3446ea96a27898d6d59a93c45</anchor>
      <arglist>(double tintAmount)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const char **</type>
      <name>getAllowedPropertyKeys</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>a3cc500add699158ae5b2b138fdf6c2bd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cAbstractImageFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>ad917e74b5c31e56f6829fb13e9576a1c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Point &amp;</type>
      <name>getPosition</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>ae3d79e85ea8aba1658fee9c1e72c0b46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>a1bc2398e4beaeb90cb7958ac10130d2c</anchor>
      <arglist>(const Point &amp;position)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Anchor</type>
      <name>getAnchor</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>a55a1ff475c7502a2ba72c1efbdbb5d56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAnchor</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>ab8514326899111d810fd28faf760d6f6</anchor>
      <arglist>(Anchor anchor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getWidth</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>ae0366623b2f389ed8388959b5a4caf42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setWidth</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>a055ad1afed9743773d75ef1ca5ff8f78</anchor>
      <arglist>(double width)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getHeight</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>ada5b7cdd2893413f283311b0df31de42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHeight</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>a38a5dff518e23a7b14f6212b7111f4b9</anchor>
      <arglist>(double height)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSize</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>a58c0550148909053a6a75af6b9a40ad0</anchor>
      <arglist>(double width, double height)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Rectangle</type>
      <name>getBounds</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>a7aa51c22a1b7acc2a09cfaaa114eb5b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Interpolation</type>
      <name>getInterpolation</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>ae046d9ba63942efe7a730355d77a8234</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInterpolation</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>a3bdebf2d630594d5c06d2ba5e82aeef9</anchor>
      <arglist>(Interpolation interpolation)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getOpacity</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>ad16fa8eb6aaced8e3b20ef044be55e89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOpacity</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>a69863baf54cdbe58ab93993c61a344b9</anchor>
      <arglist>(double opacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Color &amp;</type>
      <name>getTintColor</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>ad58cd4ff2ee326be37fddd3313cafd76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTintColor</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>af565902855c8e891590a11749ef91705</anchor>
      <arglist>(const Color &amp;tintColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getTintAmount</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>a024793ead1875aa69d2c0ea6867e9c0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTintAmount</name>
      <anchorfile>classomnetpp_1_1cAbstractImageFigure.html</anchorfile>
      <anchor>a0cd7e7d3446ea96a27898d6d59a93c45</anchor>
      <arglist>(double tintAmount)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cAbstractLineFigure</name>
    <filename>classomnetpp_1_1cAbstractLineFigure.html</filename>
    <base>omnetpp::cFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cAbstractLineFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a40a5bc0db9a546360afd33ffece6272c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Color &amp;</type>
      <name>getLineColor</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>ad80fe8af3930f7ff51da5b83e22c7aca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLineColor</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a780372afd5b721b49437ce97a99709a2</anchor>
      <arglist>(const Color &amp;lineColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getLineWidth</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>ab2cddf2e91cc25e725699d72141ba62b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLineWidth</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a4cc1b5eb8c467ef57996207945745695</anchor>
      <arglist>(double lineWidth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getLineOpacity</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a7d2a382532b8151c70b2b1cf765ff8a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLineOpacity</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a3aea7c2d101546ad115689c9b55a75f6</anchor>
      <arglist>(double lineOpacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LineStyle</type>
      <name>getLineStyle</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a0a8af455548d1e089c913b51343e94cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLineStyle</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a14a78cdbf07ffc2c1e52726f8b61167a</anchor>
      <arglist>(LineStyle lineStyle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CapStyle</type>
      <name>getCapStyle</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a48747d900ce422bac611bb496e78302b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCapStyle</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a2b734c61191d8df36e18ea4ffaa659ba</anchor>
      <arglist>(CapStyle capStyle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Arrowhead</type>
      <name>getStartArrowhead</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a9773dee820c780923370f07b53a766bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStartArrowhead</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a260b4bd1fd22ba3e052b92de1c656dbf</anchor>
      <arglist>(Arrowhead startArrowhead)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Arrowhead</type>
      <name>getEndArrowhead</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a7ff8fb5a284c9716df5f336746a9d2d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEndArrowhead</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a1b06608a63e8774f410faeeca2118120</anchor>
      <arglist>(Arrowhead endArrowhead)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getZoomLineWidth</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a1d310f47f3ca080503d886a8ffdab0f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setZoomLineWidth</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a9703a3c2b00acefc3141ed52a5ff4261</anchor>
      <arglist>(bool zoomLineWidth)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const char **</type>
      <name>getAllowedPropertyKeys</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a3cc500add699158ae5b2b138fdf6c2bd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cAbstractLineFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a40a5bc0db9a546360afd33ffece6272c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Color &amp;</type>
      <name>getLineColor</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>ad80fe8af3930f7ff51da5b83e22c7aca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLineColor</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a780372afd5b721b49437ce97a99709a2</anchor>
      <arglist>(const Color &amp;lineColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getLineWidth</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>ab2cddf2e91cc25e725699d72141ba62b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLineWidth</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a4cc1b5eb8c467ef57996207945745695</anchor>
      <arglist>(double lineWidth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getLineOpacity</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a7d2a382532b8151c70b2b1cf765ff8a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLineOpacity</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a3aea7c2d101546ad115689c9b55a75f6</anchor>
      <arglist>(double lineOpacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LineStyle</type>
      <name>getLineStyle</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a0a8af455548d1e089c913b51343e94cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLineStyle</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a14a78cdbf07ffc2c1e52726f8b61167a</anchor>
      <arglist>(LineStyle lineStyle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CapStyle</type>
      <name>getCapStyle</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a48747d900ce422bac611bb496e78302b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCapStyle</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a2b734c61191d8df36e18ea4ffaa659ba</anchor>
      <arglist>(CapStyle capStyle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Arrowhead</type>
      <name>getStartArrowhead</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a9773dee820c780923370f07b53a766bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStartArrowhead</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a260b4bd1fd22ba3e052b92de1c656dbf</anchor>
      <arglist>(Arrowhead startArrowhead)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Arrowhead</type>
      <name>getEndArrowhead</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a7ff8fb5a284c9716df5f336746a9d2d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEndArrowhead</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a1b06608a63e8774f410faeeca2118120</anchor>
      <arglist>(Arrowhead endArrowhead)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getZoomLineWidth</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a1d310f47f3ca080503d886a8ffdab0f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setZoomLineWidth</name>
      <anchorfile>classomnetpp_1_1cAbstractLineFigure.html</anchorfile>
      <anchor>a9703a3c2b00acefc3141ed52a5ff4261</anchor>
      <arglist>(bool zoomLineWidth)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cAbstractShapeFigure</name>
    <filename>classomnetpp_1_1cAbstractShapeFigure.html</filename>
    <base>omnetpp::cFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cAbstractShapeFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a49d32fec3f66b0a4b9f58e96a6b344e6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFilled</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a1fef67ecb5d2d515450544f216029762</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFilled</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>ada6fcde61305e48749395b2e0aac44ff</anchor>
      <arglist>(bool filled)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOutlined</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a02afccd40e7e1e51cb8850c940593684</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOutlined</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a622d94a9145ac1e2ba73587679058f7f</anchor>
      <arglist>(bool outlined)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Color &amp;</type>
      <name>getLineColor</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>ad80fe8af3930f7ff51da5b83e22c7aca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLineColor</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a780372afd5b721b49437ce97a99709a2</anchor>
      <arglist>(const Color &amp;lineColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Color &amp;</type>
      <name>getFillColor</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a11e87c12c3373f062e8d91b6bb5bce28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFillColor</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>ad5e4846e699b66e4abf943044b4e74e0</anchor>
      <arglist>(const Color &amp;fillColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LineStyle</type>
      <name>getLineStyle</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a0a8af455548d1e089c913b51343e94cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLineStyle</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a14a78cdbf07ffc2c1e52726f8b61167a</anchor>
      <arglist>(LineStyle lineStyle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getLineWidth</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>ab2cddf2e91cc25e725699d72141ba62b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLineWidth</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a4cc1b5eb8c467ef57996207945745695</anchor>
      <arglist>(double lineWidth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getLineOpacity</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a7d2a382532b8151c70b2b1cf765ff8a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLineOpacity</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a3aea7c2d101546ad115689c9b55a75f6</anchor>
      <arglist>(double lineOpacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getFillOpacity</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a8fcb1e6d716363360eb2765643fbffa3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFillOpacity</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a49a2c557b8d1757be628fc6a450fdd29</anchor>
      <arglist>(double fillOpacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getZoomLineWidth</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a1d310f47f3ca080503d886a8ffdab0f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setZoomLineWidth</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a9703a3c2b00acefc3141ed52a5ff4261</anchor>
      <arglist>(bool zoomLineWidth)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const char **</type>
      <name>getAllowedPropertyKeys</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a3cc500add699158ae5b2b138fdf6c2bd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cAbstractShapeFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a49d32fec3f66b0a4b9f58e96a6b344e6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isFilled</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a1fef67ecb5d2d515450544f216029762</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFilled</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>ada6fcde61305e48749395b2e0aac44ff</anchor>
      <arglist>(bool filled)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOutlined</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a02afccd40e7e1e51cb8850c940593684</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOutlined</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a622d94a9145ac1e2ba73587679058f7f</anchor>
      <arglist>(bool outlined)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Color &amp;</type>
      <name>getLineColor</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>ad80fe8af3930f7ff51da5b83e22c7aca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLineColor</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a780372afd5b721b49437ce97a99709a2</anchor>
      <arglist>(const Color &amp;lineColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Color &amp;</type>
      <name>getFillColor</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a11e87c12c3373f062e8d91b6bb5bce28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFillColor</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>ad5e4846e699b66e4abf943044b4e74e0</anchor>
      <arglist>(const Color &amp;fillColor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LineStyle</type>
      <name>getLineStyle</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a0a8af455548d1e089c913b51343e94cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLineStyle</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a14a78cdbf07ffc2c1e52726f8b61167a</anchor>
      <arglist>(LineStyle lineStyle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getLineWidth</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>ab2cddf2e91cc25e725699d72141ba62b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLineWidth</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a4cc1b5eb8c467ef57996207945745695</anchor>
      <arglist>(double lineWidth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getLineOpacity</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a7d2a382532b8151c70b2b1cf765ff8a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setLineOpacity</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a3aea7c2d101546ad115689c9b55a75f6</anchor>
      <arglist>(double lineOpacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getFillOpacity</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a8fcb1e6d716363360eb2765643fbffa3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFillOpacity</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a49a2c557b8d1757be628fc6a450fdd29</anchor>
      <arglist>(double fillOpacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getZoomLineWidth</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a1d310f47f3ca080503d886a8ffdab0f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setZoomLineWidth</name>
      <anchorfile>classomnetpp_1_1cAbstractShapeFigure.html</anchorfile>
      <anchor>a9703a3c2b00acefc3141ed52a5ff4261</anchor>
      <arglist>(bool zoomLineWidth)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cAbstractTextFigure</name>
    <filename>classomnetpp_1_1cAbstractTextFigure.html</filename>
    <base>omnetpp::cFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cAbstractTextFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>aac91a6b08ddeac47d3034281fc817029</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Point &amp;</type>
      <name>getPosition</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>ae3d79e85ea8aba1658fee9c1e72c0b46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>a1bc2398e4beaeb90cb7958ac10130d2c</anchor>
      <arglist>(const Point &amp;position)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Anchor</type>
      <name>getAnchor</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>a55a1ff475c7502a2ba72c1efbdbb5d56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAnchor</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>ab8514326899111d810fd28faf760d6f6</anchor>
      <arglist>(Anchor anchor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Rectangle</type>
      <name>getBounds</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>a7aa51c22a1b7acc2a09cfaaa114eb5b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Color &amp;</type>
      <name>getColor</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>a3b47d4fe8c21dd073a89c0a792e4c9ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setColor</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>a061ef4e2012c8f1db4a15a5c5ca998f1</anchor>
      <arglist>(const Color &amp;color)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getOpacity</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>ad16fa8eb6aaced8e3b20ef044be55e89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOpacity</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>a69863baf54cdbe58ab93993c61a344b9</anchor>
      <arglist>(double opacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getHalo</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>a8e3b00ce8d43dea97c7c0e024828b414</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHalo</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>ae80cc4c80ede433ce531de30f213c4c9</anchor>
      <arglist>(bool enabled)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Font &amp;</type>
      <name>getFont</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>a015d9f42a86cd412281027acd11333d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFont</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>aaab5b77d767f1a9ad661d6123eec654a</anchor>
      <arglist>(Font font)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getText</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>ad71413a5b7c72e56835860443d001020</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setText</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>a7fa28241e5b69e64ab1c4ade254d327a</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const char **</type>
      <name>getAllowedPropertyKeys</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>a3cc500add699158ae5b2b138fdf6c2bd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cAbstractTextFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>aac91a6b08ddeac47d3034281fc817029</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Point &amp;</type>
      <name>getPosition</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>ae3d79e85ea8aba1658fee9c1e72c0b46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>a1bc2398e4beaeb90cb7958ac10130d2c</anchor>
      <arglist>(const Point &amp;position)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Anchor</type>
      <name>getAnchor</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>a55a1ff475c7502a2ba72c1efbdbb5d56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAnchor</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>ab8514326899111d810fd28faf760d6f6</anchor>
      <arglist>(Anchor anchor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Rectangle</type>
      <name>getBounds</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>a7aa51c22a1b7acc2a09cfaaa114eb5b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Color &amp;</type>
      <name>getColor</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>a3b47d4fe8c21dd073a89c0a792e4c9ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setColor</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>a061ef4e2012c8f1db4a15a5c5ca998f1</anchor>
      <arglist>(const Color &amp;color)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getOpacity</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>ad16fa8eb6aaced8e3b20ef044be55e89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOpacity</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>a69863baf54cdbe58ab93993c61a344b9</anchor>
      <arglist>(double opacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getHalo</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>a8e3b00ce8d43dea97c7c0e024828b414</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setHalo</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>ae80cc4c80ede433ce531de30f213c4c9</anchor>
      <arglist>(bool enabled)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Font &amp;</type>
      <name>getFont</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>a015d9f42a86cd412281027acd11333d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFont</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>aaab5b77d767f1a9ad661d6123eec654a</anchor>
      <arglist>(Font font)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getText</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>ad71413a5b7c72e56835860443d001020</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setText</name>
      <anchorfile>classomnetpp_1_1cAbstractTextFigure.html</anchorfile>
      <anchor>a7fa28241e5b69e64ab1c4ade254d327a</anchor>
      <arglist>(const char *text)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cArcFigure</name>
    <filename>classomnetpp_1_1cArcFigure.html</filename>
    <base>omnetpp::cAbstractLineFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cArcFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>ae689ada076524b58be8907f66bf449e6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Rectangle &amp;</type>
      <name>getBounds</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>ac3b28beef518ea8914eb46646a4e1339</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBounds</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>a92035a3eb0e082c618fa30344c3e3487</anchor>
      <arglist>(const Rectangle &amp;bounds)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>a9062e4b83b894af848722c332b5d4698</anchor>
      <arglist>(const Point &amp;position, Anchor anchor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getStartAngle</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>abe6d97f29c3f66f751a7a4bd803ff959</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStartAngle</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>abc1ac1289da82a97e36f53ffcc724f7b</anchor>
      <arglist>(double startAngle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getEndAngle</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>acdf7efd3326b28a6f9cc8f5dd497fae3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEndAngle</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>aeb14ddb76d4dfa0e7ae20b529b856081</anchor>
      <arglist>(double endAngle)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const char **</type>
      <name>getAllowedPropertyKeys</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>a3cc500add699158ae5b2b138fdf6c2bd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cArcFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>ae689ada076524b58be8907f66bf449e6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Rectangle &amp;</type>
      <name>getBounds</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>ac3b28beef518ea8914eb46646a4e1339</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBounds</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>a92035a3eb0e082c618fa30344c3e3487</anchor>
      <arglist>(const Rectangle &amp;bounds)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>a9062e4b83b894af848722c332b5d4698</anchor>
      <arglist>(const Point &amp;position, Anchor anchor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getStartAngle</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>abe6d97f29c3f66f751a7a4bd803ff959</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStartAngle</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>abc1ac1289da82a97e36f53ffcc724f7b</anchor>
      <arglist>(double startAngle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getEndAngle</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>acdf7efd3326b28a6f9cc8f5dd497fae3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEndAngle</name>
      <anchorfile>classomnetpp_1_1cArcFigure.html</anchorfile>
      <anchor>aeb14ddb76d4dfa0e7ae20b529b856081</anchor>
      <arglist>(double endAngle)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cArray</name>
    <filename>classomnetpp_1_1cArray.html</filename>
    <base>omnetpp::cOwnedObject</base>
    <class kind="class">omnetpp::cArray::Iterator</class>
    <member kind="function">
      <type></type>
      <name>cArray</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a236e5914bc4079a01c8a9415f0983b3c</anchor>
      <arglist>(const cArray &amp;list)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cArray</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a24001a7647ffae2c589daaccee865b82</anchor>
      <arglist>(const char *name=nullptr, int capacity=0, int delta=10)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cArray</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>adb9230b582f9be7de81cf572aa37fcba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cArray &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>ab62ab98949d075088cd3a937e4b41dd1</anchor>
      <arglist>(const cArray &amp;list)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cArray *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>af35c439bc3a0e7e967b712e15a336447</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a32329eeeba44c332199f698bc70d3f89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>aae048282c7011eedc2e0492f6421ea73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCapacity</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a0dff4eb7ed92b48aafd53608207f770b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCapacity</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a8ccde020d0bbbf1080377bb89ed6f3a3</anchor>
      <arglist>(int capacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>add</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a222de2510839e215919de858cef2212a</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>addAt</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>acca5c8d1b12818cc8568f3cb381fcc88</anchor>
      <arglist>(int m, cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>ab944019177e80d63a5380f213e4768e1</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>ab8974a46207d788b1ca6decf2474c5d5</anchor>
      <arglist>(cObject *obj) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a10835fd027496db58fcb6520deb2f720</anchor>
      <arglist>(const char *objname) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>aae8850ea6ce67bbde97f49643c3d0191</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a7fabe2812bdb719158d254db6b89301c</anchor>
      <arglist>(const char *objname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cObject *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a9ed379f5b7828248496ea5ac838ae992</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cObject *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a44a4c312489444a5c4a5222a77d868d1</anchor>
      <arglist>(const char *objname) const</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>operator[]</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>ab2b06fe8271624c8c0b1b16331d86736</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>operator[]</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a8b055a6fc3f542e571d9e956f7e8d678</anchor>
      <arglist>(const char *objname)</arglist>
    </member>
    <member kind="function">
      <type>const cObject *</type>
      <name>operator[]</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a96c4cac7215f5006d05822fdf212e5fa</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function">
      <type>const cObject *</type>
      <name>operator[]</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a4b5c21362355a18976c3c9e5ab43c6e9</anchor>
      <arglist>(const char *objname) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>exist</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a44b63e571ddbc825efe007339ee70440</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>exist</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a66ada922a6b3ee1128d4b9feb0f56313</anchor>
      <arglist>(const char *objname) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a5f49b2100ace1436af745570b56b619f</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a559ff3b7b7314027be55aeee45ee8992</anchor>
      <arglist>(const char *objname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>af6f61957ce8e2e64ceffdc71bafe41cf</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTakeOwnership</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a205b5531f3aa081aef4f053e8ef2a768</anchor>
      <arglist>(bool tk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTakeOwnership</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>ac43e9a5a4f94023dbcaaa81d0ff0fd3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cArray</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a236e5914bc4079a01c8a9415f0983b3c</anchor>
      <arglist>(const cArray &amp;list)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cArray</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a24001a7647ffae2c589daaccee865b82</anchor>
      <arglist>(const char *name=nullptr, int capacity=0, int delta=10)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cArray</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>adb9230b582f9be7de81cf572aa37fcba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cArray &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>ab62ab98949d075088cd3a937e4b41dd1</anchor>
      <arglist>(const cArray &amp;list)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cArray *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>af35c439bc3a0e7e967b712e15a336447</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a32329eeeba44c332199f698bc70d3f89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>aae048282c7011eedc2e0492f6421ea73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getCapacity</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a0dff4eb7ed92b48aafd53608207f770b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCapacity</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a8ccde020d0bbbf1080377bb89ed6f3a3</anchor>
      <arglist>(int capacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>add</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a222de2510839e215919de858cef2212a</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>addAt</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>acca5c8d1b12818cc8568f3cb381fcc88</anchor>
      <arglist>(int m, cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>ab944019177e80d63a5380f213e4768e1</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>ab8974a46207d788b1ca6decf2474c5d5</anchor>
      <arglist>(cObject *obj) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a10835fd027496db58fcb6520deb2f720</anchor>
      <arglist>(const char *objname) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>aae8850ea6ce67bbde97f49643c3d0191</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a7fabe2812bdb719158d254db6b89301c</anchor>
      <arglist>(const char *objname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cObject *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a9ed379f5b7828248496ea5ac838ae992</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cObject *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a44a4c312489444a5c4a5222a77d868d1</anchor>
      <arglist>(const char *objname) const</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>operator[]</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>ab2b06fe8271624c8c0b1b16331d86736</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>operator[]</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a8b055a6fc3f542e571d9e956f7e8d678</anchor>
      <arglist>(const char *objname)</arglist>
    </member>
    <member kind="function">
      <type>const cObject *</type>
      <name>operator[]</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a96c4cac7215f5006d05822fdf212e5fa</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function">
      <type>const cObject *</type>
      <name>operator[]</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a4b5c21362355a18976c3c9e5ab43c6e9</anchor>
      <arglist>(const char *objname) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>exist</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a44b63e571ddbc825efe007339ee70440</anchor>
      <arglist>(int m) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>exist</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a66ada922a6b3ee1128d4b9feb0f56313</anchor>
      <arglist>(const char *objname) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a5f49b2100ace1436af745570b56b619f</anchor>
      <arglist>(int m)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a559ff3b7b7314027be55aeee45ee8992</anchor>
      <arglist>(const char *objname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>af6f61957ce8e2e64ceffdc71bafe41cf</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTakeOwnership</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>a205b5531f3aa081aef4f053e8ef2a768</anchor>
      <arglist>(bool tk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTakeOwnership</name>
      <anchorfile>classomnetpp_1_1cArray.html</anchorfile>
      <anchor>ac43e9a5a4f94023dbcaaa81d0ff0fd3f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cAutoRangeHistogramStrategy</name>
    <filename>classomnetpp_1_1cAutoRangeHistogramStrategy.html</filename>
    <base>omnetpp::cPrecollectionBasedHistogramStrategy</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cAutoRangeHistogramStrategy *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cAutoRangeHistogramStrategy.html</anchorfile>
      <anchor>a2e07b1e209beaddc9c39a5fa4ba535fe</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRangeHint</name>
      <anchorfile>classomnetpp_1_1cAutoRangeHistogramStrategy.html</anchorfile>
      <anchor>ae66d441e4095880ffbccf1ce0932bb7f</anchor>
      <arglist>(double lo, double hi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cAutoRangeHistogramStrategy.html</anchorfile>
      <anchor>a3b715fbb1b1a0b5079591510e4015d0b</anchor>
      <arglist>(double value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collectWeighted</name>
      <anchorfile>classomnetpp_1_1cAutoRangeHistogramStrategy.html</anchorfile>
      <anchor>a26fb09e47da0aceac9ffdce8555864be</anchor>
      <arglist>(double value, double weight) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cAutoRangeHistogramStrategy.html</anchorfile>
      <anchor>a8ab0745de7fefce72d67f99f3931a3e4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cAutoRangeHistogramStrategy *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cAutoRangeHistogramStrategy.html</anchorfile>
      <anchor>a2e07b1e209beaddc9c39a5fa4ba535fe</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRangeHint</name>
      <anchorfile>classomnetpp_1_1cAutoRangeHistogramStrategy.html</anchorfile>
      <anchor>ae66d441e4095880ffbccf1ce0932bb7f</anchor>
      <arglist>(double lo, double hi)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cAutoRangeHistogramStrategy.html</anchorfile>
      <anchor>a3b715fbb1b1a0b5079591510e4015d0b</anchor>
      <arglist>(double value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collectWeighted</name>
      <anchorfile>classomnetpp_1_1cAutoRangeHistogramStrategy.html</anchorfile>
      <anchor>a26fb09e47da0aceac9ffdce8555864be</anchor>
      <arglist>(double value, double weight) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cAutoRangeHistogramStrategy.html</anchorfile>
      <anchor>a8ab0745de7fefce72d67f99f3931a3e4</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cBernoulli</name>
    <filename>classomnetpp_1_1cBernoulli.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cBernoulli *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cBernoulli.html</anchorfile>
      <anchor>a2909766b06e4cd5dd07ac3742568ec43</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cBernoulli.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cBernoulli.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cBernoulli *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cBernoulli.html</anchorfile>
      <anchor>a2909766b06e4cd5dd07ac3742568ec43</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cBernoulli.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cBernoulli.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cBeta</name>
    <filename>classomnetpp_1_1cBeta.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cBeta *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cBeta.html</anchorfile>
      <anchor>a281b70f133876bcbed8273ca88f49494</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cBeta.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cBeta.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cBeta *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cBeta.html</anchorfile>
      <anchor>a281b70f133876bcbed8273ca88f49494</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cBeta.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cBeta.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cBinomial</name>
    <filename>classomnetpp_1_1cBinomial.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cBinomial *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cBinomial.html</anchorfile>
      <anchor>ab7b3991f7e2737d4e29caf32437de753</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cBinomial.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cBinomial.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cBinomial *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cBinomial.html</anchorfile>
      <anchor>ab7b3991f7e2737d4e29caf32437de753</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cBinomial.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cBinomial.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cBoolParImpl</name>
    <filename>classomnetpp_1_1cBoolParImpl.html</filename>
    <base>omnetpp::cParImpl</base>
    <member kind="function">
      <type></type>
      <name>cBoolParImpl</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>ad59f1b81907f20a8162d411f30a206fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cBoolParImpl</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>ae7aac8053c969e017ad0eac4c225e7c0</anchor>
      <arglist>(const cBoolParImpl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cBoolParImpl</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a6883d71b677b9c93dec8f0d2ae7747a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a6085bb876141d45a5a6d2017ba140adc</anchor>
      <arglist>(const cBoolParImpl &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cBoolParImpl *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a6658333acbd940a2796118218c75cbac</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>ae6d272d4af05edaa7725ad60b1ec2104</anchor>
      <arglist>(bool b) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIntValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a588e175407a2d81f79cec520e7044d20</anchor>
      <arglist>(intpar_t l) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a45f547947e811beaeec71863a1675ba1</anchor>
      <arglist>(double d) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a9e63a9930c4106d99ab35a8645698a27</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a0abe99195e911d2173519bf8064f5af2</anchor>
      <arglist>(cXMLElement *node) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a80af423d87336c25c28fe91e6bac674b</anchor>
      <arglist>(cExpression *e) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>aaed8a179966631fb8c64b1f963d0b685</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual intpar_t</type>
      <name>intValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>ac2b650859b0d6cc642bd26aa6af780ff</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a3438e6138743a93a08dde61c9411c711</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>af3bb05e9109c2f97e71d71e60548a1e4</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a7d0617a09188f05593e7036a73723857</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a6b6dfe5cc802e0a3a971ed99d8908d95</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a5f09bfa40706213278e1ea6a6e4a8d69</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>af4400fbe676882b9264a856cf952559c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>af862a39478bb95377b2734d86a30083b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>convertToConst</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a57c1d4c81cdb80b4bc12201a1a804c53</anchor>
      <arglist>(cComponent *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>ac880f5e94434ade08fbe54634fe95378</anchor>
      <arglist>(const char *text) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a9ed037b0e3f46f4d1d4d0f44041adf45</anchor>
      <arglist>(const cParImpl *other) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cBoolParImpl</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>ad59f1b81907f20a8162d411f30a206fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cBoolParImpl</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>ae7aac8053c969e017ad0eac4c225e7c0</anchor>
      <arglist>(const cBoolParImpl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cBoolParImpl</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a6883d71b677b9c93dec8f0d2ae7747a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a6085bb876141d45a5a6d2017ba140adc</anchor>
      <arglist>(const cBoolParImpl &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cBoolParImpl *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a6658333acbd940a2796118218c75cbac</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>ae6d272d4af05edaa7725ad60b1ec2104</anchor>
      <arglist>(bool b) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIntValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a588e175407a2d81f79cec520e7044d20</anchor>
      <arglist>(intpar_t l) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a45f547947e811beaeec71863a1675ba1</anchor>
      <arglist>(double d) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a9e63a9930c4106d99ab35a8645698a27</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a0abe99195e911d2173519bf8064f5af2</anchor>
      <arglist>(cXMLElement *node) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a80af423d87336c25c28fe91e6bac674b</anchor>
      <arglist>(cExpression *e) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>aaed8a179966631fb8c64b1f963d0b685</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual intpar_t</type>
      <name>intValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>ac2b650859b0d6cc642bd26aa6af780ff</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a3438e6138743a93a08dde61c9411c711</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>af3bb05e9109c2f97e71d71e60548a1e4</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a7d0617a09188f05593e7036a73723857</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a6b6dfe5cc802e0a3a971ed99d8908d95</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a5f09bfa40706213278e1ea6a6e4a8d69</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>af4400fbe676882b9264a856cf952559c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>af862a39478bb95377b2734d86a30083b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>convertToConst</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a57c1d4c81cdb80b4bc12201a1a804c53</anchor>
      <arglist>(cComponent *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>ac880f5e94434ade08fbe54634fe95378</anchor>
      <arglist>(const char *text) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cBoolParImpl.html</anchorfile>
      <anchor>a9ed037b0e3f46f4d1d4d0f44041adf45</anchor>
      <arglist>(const cParImpl *other) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cCanvas</name>
    <filename>classomnetpp_1_1cCanvas.html</filename>
    <base>omnetpp::cOwnedObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cCanvas *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a9282fa8402f458480009139f209b9149</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cFigure::Color &amp;</type>
      <name>getBackgroundColor</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a77edc2cdfddd5a431bfa353660344443</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBackgroundColor</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>adac63e97d332cffdeb3ba657f2bb1672</anchor>
      <arglist>(const cFigure::Color &amp;color)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>getRootFigure</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>af50b46cd69e542dcd3fb0b19da7694d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addFigure</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a5ef066ee563f914580f61111f8f46ba2</anchor>
      <arglist>(cFigure *figure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addFigure</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a5e191511a274bf202ebe99eba89671b9</anchor>
      <arglist>(cFigure *figure, int pos)</arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED void</type>
      <name>addFigureAbove</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a8aa0dae7f8349952c216ec9fd96f02e4</anchor>
      <arglist>(cFigure *figure, cFigure *referenceFigure)</arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED void</type>
      <name>addFigureBelow</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a04d48d54f08398087a2ca23443e348a3</anchor>
      <arglist>(cFigure *figure, cFigure *referenceFigure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>removeFigure</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>af5773829647886261f3027d1044b1a43</anchor>
      <arglist>(cFigure *figure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>removeFigure</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>af09d37460063a1b284acd8aa67a3d1b2</anchor>
      <arglist>(int pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findFigure</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>ab0f9c89695e65a7589eea4396a83979b</anchor>
      <arglist>(const char *name) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findFigure</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a45ccae45c246104ff3db44166ea87eed</anchor>
      <arglist>(cFigure *figure) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasFigures</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a4f44b1c5ac7e0c00456f14847fc89dfa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumFigures</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a0c8fc6ee898e89a1f93ac307962bcc87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>getFigure</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a9b737ea87aeda0a31e26b60738fbe83b</anchor>
      <arglist>(int pos) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>getFigure</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a389b6edf8d9c99dca02769f6d64e2b4a</anchor>
      <arglist>(const char *name) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>getSubmodulesLayer</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a11ac25790df9b4c0ccef7c6f81654d9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>findFigureRecursively</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a004bf4a7f530cb7e456778c49f80fb4d</anchor>
      <arglist>(const char *name) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>getFigureByPath</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a2e5ffb8b43d7cef7ce79840acb0a0471</anchor>
      <arglist>(const char *path) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAllTags</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>aac62f5b8a1a0c5fae9c06012cdcf26ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getAllTagsAsVector</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a39ca7d4e30f09915ccf78684e99e3fd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAnimationSpeed</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>ac430820db9baab3873e7e656649bdc14</anchor>
      <arglist>(double animationSpeed, const cObject *source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getAnimationSpeed</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a11ae62a2d80a5f046ed524e01cb29ee8</anchor>
      <arglist>(const cObject *source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>holdSimulationFor</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a84391e4005708bdbc618c24ef98ea0c5</anchor>
      <arglist>(double animationTimeDelta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cCanvas *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a9282fa8402f458480009139f209b9149</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const cFigure::Color &amp;</type>
      <name>getBackgroundColor</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a77edc2cdfddd5a431bfa353660344443</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBackgroundColor</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>adac63e97d332cffdeb3ba657f2bb1672</anchor>
      <arglist>(const cFigure::Color &amp;color)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>getRootFigure</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>af50b46cd69e542dcd3fb0b19da7694d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addFigure</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a5ef066ee563f914580f61111f8f46ba2</anchor>
      <arglist>(cFigure *figure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addFigure</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a5e191511a274bf202ebe99eba89671b9</anchor>
      <arglist>(cFigure *figure, int pos)</arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED void</type>
      <name>addFigureAbove</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a8aa0dae7f8349952c216ec9fd96f02e4</anchor>
      <arglist>(cFigure *figure, cFigure *referenceFigure)</arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED void</type>
      <name>addFigureBelow</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a04d48d54f08398087a2ca23443e348a3</anchor>
      <arglist>(cFigure *figure, cFigure *referenceFigure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>removeFigure</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>af5773829647886261f3027d1044b1a43</anchor>
      <arglist>(cFigure *figure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>removeFigure</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>af09d37460063a1b284acd8aa67a3d1b2</anchor>
      <arglist>(int pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findFigure</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>ab0f9c89695e65a7589eea4396a83979b</anchor>
      <arglist>(const char *name) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findFigure</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a45ccae45c246104ff3db44166ea87eed</anchor>
      <arglist>(cFigure *figure) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasFigures</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a4f44b1c5ac7e0c00456f14847fc89dfa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumFigures</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a0c8fc6ee898e89a1f93ac307962bcc87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>getFigure</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a9b737ea87aeda0a31e26b60738fbe83b</anchor>
      <arglist>(int pos) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>getFigure</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a389b6edf8d9c99dca02769f6d64e2b4a</anchor>
      <arglist>(const char *name) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>getSubmodulesLayer</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a11ac25790df9b4c0ccef7c6f81654d9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>findFigureRecursively</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a004bf4a7f530cb7e456778c49f80fb4d</anchor>
      <arglist>(const char *name) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>getFigureByPath</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a2e5ffb8b43d7cef7ce79840acb0a0471</anchor>
      <arglist>(const char *path) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAllTags</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>aac62f5b8a1a0c5fae9c06012cdcf26ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getAllTagsAsVector</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a39ca7d4e30f09915ccf78684e99e3fd0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAnimationSpeed</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>ac430820db9baab3873e7e656649bdc14</anchor>
      <arglist>(double animationSpeed, const cObject *source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getAnimationSpeed</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a11ae62a2d80a5f046ed524e01cb29ee8</anchor>
      <arglist>(const cObject *source)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>holdSimulationFor</name>
      <anchorfile>classomnetpp_1_1cCanvas.html</anchorfile>
      <anchor>a84391e4005708bdbc618c24ef98ea0c5</anchor>
      <arglist>(double animationTimeDelta)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cCauchy</name>
    <filename>classomnetpp_1_1cCauchy.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cCauchy *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cCauchy.html</anchorfile>
      <anchor>ab41486d47f5aef6a5eff872591e4badc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cCauchy.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cCauchy.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cCauchy *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cCauchy.html</anchorfile>
      <anchor>ab41486d47f5aef6a5eff872591e4badc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cCauchy.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cCauchy.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cChannel</name>
    <filename>classomnetpp_1_1cChannel.html</filename>
    <base>omnetpp::cComponent</base>
    <class kind="class">omnetpp::cChannel::MessageSentSignalValue</class>
    <class kind="struct">omnetpp::cChannel::result_t</class>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finalizeParameters</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a6053b9448540706eaaa8bc7071562100</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cChannel</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a560269f7f2a294ea313f32bf78443df8</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cChannel</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>acf81fb8aeb97a39ee2468a3f39e076fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callInitialize</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>ae17272aee328900c96b8111d642dabf2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>callInitialize</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>abb973abd34144b0ea340df8d2de60ffc</anchor>
      <arglist>(int stage) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callFinish</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a6ffefcbcab94d22d6712d7ded08ea5e3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ComponentKind</type>
      <name>getComponentKind</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>afc9caed92f155dabde94f8cf2f0b66ce</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getParentModule</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a6273eb514331e0e44130844d637b8b4c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>cChannelType *</type>
      <name>getChannelType</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>ad323e037e2eb24054f98fbc15d2ab8e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cProperties *</type>
      <name>getProperties</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a6eaf39f9644d7ec7ced2485ae9d558de</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate *</type>
      <name>getSourceGate</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>aedb39c2c0120e9178050ba5854726f38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a4279cb11ed219f4d19894560b7fe6fdb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>processMessage</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a5f63dc06c7294df684b292bca0a80b43</anchor>
      <arglist>(cMessage *msg, simtime_t t, result_t &amp;result)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getNominalDatarate</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>aea2bf047614a8ab73f596300cc71436c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual simtime_t</type>
      <name>calculateDuration</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a2d43c8a97f3a968a823520aab427db29</anchor>
      <arglist>(cMessage *msg) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual simtime_t</type>
      <name>getTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>ad734df66acd590badf9f52b13ed0c38e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBusy</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>ad58949ce4d6196843a7d3a5a8e105ec1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>forceTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>af16609bbae868ce2281aadd7240008eb</anchor>
      <arglist>(simtime_t t)=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cChannel</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a560269f7f2a294ea313f32bf78443df8</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cChannel</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>acf81fb8aeb97a39ee2468a3f39e076fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callInitialize</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>ae17272aee328900c96b8111d642dabf2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>callInitialize</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>abb973abd34144b0ea340df8d2de60ffc</anchor>
      <arglist>(int stage) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callFinish</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a6ffefcbcab94d22d6712d7ded08ea5e3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ComponentKind</type>
      <name>getComponentKind</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>afc9caed92f155dabde94f8cf2f0b66ce</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getParentModule</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a6273eb514331e0e44130844d637b8b4c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>cChannelType *</type>
      <name>getChannelType</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>ad323e037e2eb24054f98fbc15d2ab8e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cProperties *</type>
      <name>getProperties</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a6eaf39f9644d7ec7ced2485ae9d558de</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate *</type>
      <name>getSourceGate</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>aedb39c2c0120e9178050ba5854726f38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a4279cb11ed219f4d19894560b7fe6fdb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>processMessage</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a5f63dc06c7294df684b292bca0a80b43</anchor>
      <arglist>(cMessage *msg, simtime_t t, result_t &amp;result)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getNominalDatarate</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>aea2bf047614a8ab73f596300cc71436c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual simtime_t</type>
      <name>calculateDuration</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>a2d43c8a97f3a968a823520aab427db29</anchor>
      <arglist>(cMessage *msg) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual simtime_t</type>
      <name>getTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>ad734df66acd590badf9f52b13ed0c38e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBusy</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>ad58949ce4d6196843a7d3a5a8e105ec1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>forceTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cChannel.html</anchorfile>
      <anchor>af16609bbae868ce2281aadd7240008eb</anchor>
      <arglist>(simtime_t t)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cChannelType</name>
    <filename>classomnetpp_1_1cChannelType.html</filename>
    <base>omnetpp::cComponentType</base>
    <member kind="function">
      <type></type>
      <name>cChannelType</name>
      <anchorfile>classomnetpp_1_1cChannelType.html</anchorfile>
      <anchor>a11361f34c15197787378354332b34947</anchor>
      <arglist>(const char *qname=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cChannel *</type>
      <name>create</name>
      <anchorfile>classomnetpp_1_1cChannelType.html</anchorfile>
      <anchor>a6600a45bf594a56dc6c28fab12e6eece</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cChannelType *</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cChannelType.html</anchorfile>
      <anchor>af547238a70823d0de6a2ddd8dde7d790</anchor>
      <arglist>(const char *qname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cChannelType *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cChannelType.html</anchorfile>
      <anchor>a76b7b38d7dd221824c773aed9d5f7d99</anchor>
      <arglist>(const char *qname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cChannelType *</type>
      <name>getIdealChannelType</name>
      <anchorfile>classomnetpp_1_1cChannelType.html</anchorfile>
      <anchor>afd60c6e982aa6e21f77a4b83227f3e91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cChannelType *</type>
      <name>getDelayChannelType</name>
      <anchorfile>classomnetpp_1_1cChannelType.html</anchorfile>
      <anchor>a779702980ad2bbb9cc10bf5e783d14e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cChannelType *</type>
      <name>getDatarateChannelType</name>
      <anchorfile>classomnetpp_1_1cChannelType.html</anchorfile>
      <anchor>a8ec280d09924e7a2adfc57b6e5a45bfe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cIdealChannel *</type>
      <name>createIdealChannel</name>
      <anchorfile>classomnetpp_1_1cChannelType.html</anchorfile>
      <anchor>ae00a8273cd9be18305ee049d36bad88b</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cDelayChannel *</type>
      <name>createDelayChannel</name>
      <anchorfile>classomnetpp_1_1cChannelType.html</anchorfile>
      <anchor>a7970cf7a2be40f8c11394933896447fe</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cDatarateChannel *</type>
      <name>createDatarateChannel</name>
      <anchorfile>classomnetpp_1_1cChannelType.html</anchorfile>
      <anchor>ad9e4c4e388ace0533d74d99526a83364</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual cChannel *</type>
      <name>createChannelObject</name>
      <anchorfile>classomnetpp_1_1cChannelType.html</anchorfile>
      <anchor>a13f6988adb5a276f36ee5ee06340a4ae</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>addParametersTo</name>
      <anchorfile>classomnetpp_1_1cChannelType.html</anchorfile>
      <anchor>acd83ea7105897ac97f5eb1e10b82e134</anchor>
      <arglist>(cChannel *channel)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cChannel *</type>
      <name>instantiateChannelClass</name>
      <anchorfile>classomnetpp_1_1cChannelType.html</anchorfile>
      <anchor>a44017f71fc564979cc804db45fd9abc6</anchor>
      <arglist>(const char *classname)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cChannelType</name>
      <anchorfile>classomnetpp_1_1cChannelType.html</anchorfile>
      <anchor>a11361f34c15197787378354332b34947</anchor>
      <arglist>(const char *qname=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cChannel *</type>
      <name>create</name>
      <anchorfile>classomnetpp_1_1cChannelType.html</anchorfile>
      <anchor>a6600a45bf594a56dc6c28fab12e6eece</anchor>
      <arglist>(const char *name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cChiSquare</name>
    <filename>classomnetpp_1_1cChiSquare.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cChiSquare *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cChiSquare.html</anchorfile>
      <anchor>a7167bb02dad2ed1f0302a43bb1e5abcb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cChiSquare.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cChiSquare.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cChiSquare *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cChiSquare.html</anchorfile>
      <anchor>a7167bb02dad2ed1f0302a43bb1e5abcb</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cChiSquare.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cChiSquare.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cClassDescriptor</name>
    <filename>classomnetpp_1_1cClassDescriptor.html</filename>
    <base>omnetpp::cNoncopyableOwnedObject</base>
    <member kind="enumvalue">
      <name>FD_ISARRAY</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>adc29c2ff13d900c2f185ee95427fb06ca4fa62a67a5a14ad712c96108da00f36d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISCOMPOUND</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>adc29c2ff13d900c2f185ee95427fb06cac7b1b7c5d322963460117c53eebf0141</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISPOINTER</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>adc29c2ff13d900c2f185ee95427fb06caff73dac20f3794affa9dbc192f7da438</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISCOBJECT</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>adc29c2ff13d900c2f185ee95427fb06ca853da0db176b5d87ba10933979af4dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISCOWNEDOBJECT</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>adc29c2ff13d900c2f185ee95427fb06cae4a0bd37726b854a9d63b903218a6ad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISEDITABLE</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>adc29c2ff13d900c2f185ee95427fb06ca90c1e3ed9c0d3acce5c395614198c6e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISARRAY</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>adc29c2ff13d900c2f185ee95427fb06ca4fa62a67a5a14ad712c96108da00f36d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISCOMPOUND</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>adc29c2ff13d900c2f185ee95427fb06cac7b1b7c5d322963460117c53eebf0141</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISPOINTER</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>adc29c2ff13d900c2f185ee95427fb06caff73dac20f3794affa9dbc192f7da438</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISCOBJECT</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>adc29c2ff13d900c2f185ee95427fb06ca853da0db176b5d87ba10933979af4dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISCOWNEDOBJECT</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>adc29c2ff13d900c2f185ee95427fb06cae4a0bd37726b854a9d63b903218a6ad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FD_ISEDITABLE</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>adc29c2ff13d900c2f185ee95427fb06ca90c1e3ed9c0d3acce5c395614198c6e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFieldDeclaredOn</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a4fa7d612a8ca36b57edeb9bfbc12422f</anchor>
      <arglist>(int field) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFieldTypeString</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a61f5d1ead1218272be80cc69e74ae0bd</anchor>
      <arglist>(int field) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char **</type>
      <name>getFieldPropertyNames</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a2fb083056deef022460171111b4a2fad</anchor>
      <arglist>(int field) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFieldProperty</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a5f1e0c1a38d1a30b1255bfde4af50bbe</anchor>
      <arglist>(int field, const char *propertyname) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getFieldArraySize</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>afd8143c208130dc544a9c97250729b09</anchor>
      <arglist>(void *object, int field) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFieldDynamicTypeString</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a69337aa1d523f0759aa3a02217a471eb</anchor>
      <arglist>(void *object, int field, int i) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getFieldValueAsString</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>aa36fc1214817de233c8ac9128f75a569</anchor>
      <arglist>(void *object, int field, int i) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>setFieldValueAsString</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a5666e6c8760a2ee3470663938825378c</anchor>
      <arglist>(void *object, int field, int i, const char *value) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFieldStructName</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>aa73eb1f632e3133e307b95ece8a2c729</anchor>
      <arglist>(int field) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>getFieldStructValuePointer</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a6936098f20d70ae3ca2323f9127ea246</anchor>
      <arglist>(void *object, int field, int i) const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cClassDescriptor</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a98f00090735eef199dbc362b398ecfdf</anchor>
      <arglist>(const char *className, const char *baseClassName=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cClassDescriptor</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a0ccdef824b513673ae36ca70ae89299a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>doesSupport</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a103149c99b8d48c1d478c02077d4cf89</anchor>
      <arglist>(cObject *obj) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cClassDescriptor *</type>
      <name>getBaseClassDescriptor</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a30d76ea0921c35a2775ef1fca4bf9884</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extendsCObject</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a88bb85270b13751d403bfc33a15803b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getNamespace</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a328dd33c7c6c0898e5de799edb12284c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInheritanceChainLength</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>ab65a4abf159428321541d5e382cd49da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char **</type>
      <name>getPropertyNames</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>aa0010ce58392cbbeb4266edb8f1ef6ff</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getProperty</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a3e4c2e3400981a145986e48a8d8dfe6c</anchor>
      <arglist>(const char *propertyname) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getFieldCount</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a30f6207c669c238be4a23c0ca0bb810e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFieldName</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a32fb79e9abee8e91e81654362d91685d</anchor>
      <arglist>(int field) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findField</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a8864630f4b1796bb9fc88c7518082f10</anchor>
      <arglist>(const char *fieldName) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>getFieldTypeFlags</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a6941ac5cbea1681fe4c4abf7676ac06a</anchor>
      <arglist>(int field) const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cClassDescriptor *</type>
      <name>getDescriptorFor</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a1a202a2e7b2cac8c243ef37280223d17</anchor>
      <arglist>(const char *classname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cClassDescriptor *</type>
      <name>getDescriptorFor</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>acbf52a7182467dca2913ca0f690042d8</anchor>
      <arglist>(const cObject *object)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cClassDescriptor</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a98f00090735eef199dbc362b398ecfdf</anchor>
      <arglist>(const char *className, const char *baseClassName=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cClassDescriptor</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a0ccdef824b513673ae36ca70ae89299a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cClassDescriptor *</type>
      <name>getDescriptorFor</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a1a202a2e7b2cac8c243ef37280223d17</anchor>
      <arglist>(const char *classname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cClassDescriptor *</type>
      <name>getDescriptorFor</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>acbf52a7182467dca2913ca0f690042d8</anchor>
      <arglist>(const cObject *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>doesSupport</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a103149c99b8d48c1d478c02077d4cf89</anchor>
      <arglist>(cObject *obj) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cClassDescriptor *</type>
      <name>getBaseClassDescriptor</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a30d76ea0921c35a2775ef1fca4bf9884</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>extendsCObject</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a88bb85270b13751d403bfc33a15803b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getNamespace</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a328dd33c7c6c0898e5de799edb12284c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getInheritanceChainLength</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>ab65a4abf159428321541d5e382cd49da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char **</type>
      <name>getPropertyNames</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>aa0010ce58392cbbeb4266edb8f1ef6ff</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getProperty</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a3e4c2e3400981a145986e48a8d8dfe6c</anchor>
      <arglist>(const char *propertyname) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getFieldCount</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a30f6207c669c238be4a23c0ca0bb810e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFieldName</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a32fb79e9abee8e91e81654362d91685d</anchor>
      <arglist>(int field) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findField</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a8864630f4b1796bb9fc88c7518082f10</anchor>
      <arglist>(const char *fieldName) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>getFieldTypeFlags</name>
      <anchorfile>classomnetpp_1_1cClassDescriptor.html</anchorfile>
      <anchor>a6941ac5cbea1681fe4c4abf7676ac06a</anchor>
      <arglist>(int field) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cCommBuffer</name>
    <filename>classomnetpp_1_1cCommBuffer.html</filename>
    <base>omnetpp::cObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cCommBuffer</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a402c4387838bbff395ab5ea7c8110bec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isBufferEmpty</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a6ca89b958e79f5dd39aacbf1de9b56cb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>assertBufferEmpty</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ade8e6fa06440c5e1b4e250a74bbd7013</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a18f279a1b15912b7a7ad4db76f364621</anchor>
      <arglist>(char d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a17cb031bce3af1f714e091003614febe</anchor>
      <arglist>(unsigned char d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ab371f9ff68b8a490d6efb617102bd606</anchor>
      <arglist>(bool d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aa9bd14a0ed1ae5a95bf937342011c493</anchor>
      <arglist>(short d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a2ab66c10f793a98d29fedd6858c4f6c3</anchor>
      <arglist>(unsigned short d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a04b2ffeb9d8a873690c859973d9ee453</anchor>
      <arglist>(int d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>af397d002d73d3f9ed6641b31b3a84dca</anchor>
      <arglist>(unsigned int d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ac2ad3bc21ff226ed33ac85a3a6f97005</anchor>
      <arglist>(long d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a3e9bf1ee4d44e291e68b27cd121d99dc</anchor>
      <arglist>(unsigned long d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a26be2991f7508ac8cbf391da955eb7d7</anchor>
      <arglist>(long long d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a91588245fb3b4af16c470a0371db1c00</anchor>
      <arglist>(unsigned long long d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a1c196caf72eb5b4b1f3eb8a08cce13c6</anchor>
      <arglist>(float d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a8a4c79042f7c1e1824e3ce8235efcbf3</anchor>
      <arglist>(double d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>adaed967c081322fd50ae28d5bec63f55</anchor>
      <arglist>(long double d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a179a7cebf53fd186301ea961c5dfdb8d</anchor>
      <arglist>(const char *d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a93fb0cae05ad6aa8a7c8cf23352e5e4d</anchor>
      <arglist>(const opp_string &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a85ee67c776c9d91cc8c52b60cf142bb3</anchor>
      <arglist>(SimTime d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aefcce19fc09611d3ffb6262c4221bbf6</anchor>
      <arglist>(const char *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a170d055905f4dea76fd2c2a5fa57475d</anchor>
      <arglist>(const unsigned char *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a43ee1c7618808b98150ddb71ddabc91c</anchor>
      <arglist>(const bool *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a58985ee455806c2ccb7de5d0ad544161</anchor>
      <arglist>(const short *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a393b015fc1fc933f5976cc211e1f52d8</anchor>
      <arglist>(const unsigned short *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a93989855260307ef0e1b27d34c96f44c</anchor>
      <arglist>(const int *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a8728dbe02be0c26733c21ac769e3c1b6</anchor>
      <arglist>(const unsigned int *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>afd12a9b8bf620591fae3e372cbc259a5</anchor>
      <arglist>(const long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a3ed53ed056f224497e7f4a97cace77ed</anchor>
      <arglist>(const unsigned long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a63195e13189c4b05ddccff622fbe4215</anchor>
      <arglist>(const long long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a7517f3f055f34ef622b51233402aba65</anchor>
      <arglist>(const unsigned long long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a91d26ab7cb4ac3be21ec11e4828303ee</anchor>
      <arglist>(const float *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a7ce49e49d228ecae694d29dd93c8028a</anchor>
      <arglist>(const double *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ae9d65cb717065e1635141cd3fe1d6fa2</anchor>
      <arglist>(const long double *d, int size)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a2be5209381e8e238d63760447043db70</anchor>
      <arglist>(char **d, int size)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a769934711828a3e9865a66bd4d3c81eb</anchor>
      <arglist>(const char **d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a27bd70fe704c4628b8164f3ba0500d10</anchor>
      <arglist>(const opp_string *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>abc61adda2b264a6feaa0157c922eadc7</anchor>
      <arglist>(const SimTime *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a97ad968ffc3d00e0444bc4a1fdd3d906</anchor>
      <arglist>(char &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>acc948b850d5649cf37292ceea5ef1715</anchor>
      <arglist>(unsigned char &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a5b735abbe59e310ed52fd6d388e504ca</anchor>
      <arglist>(bool &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aaa8e32181fdca90c645d781e3c0a9892</anchor>
      <arglist>(short &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ab9c8ed55fc3c164219c402ddcfc684e3</anchor>
      <arglist>(unsigned short &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a4e3abac111b106a1ef4d670e16d9777e</anchor>
      <arglist>(int &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>af5b4f491c3693f1bebeb68712624031d</anchor>
      <arglist>(unsigned int &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a5313db8015102910e07311a9f646ae64</anchor>
      <arglist>(long &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>abe0cf9231776b56cae8e5b54786618fc</anchor>
      <arglist>(unsigned long &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aa56c76888e73d2adf41f0809f0aa0456</anchor>
      <arglist>(long long &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a1d3fd87b0794d853fe060c23eebee4b1</anchor>
      <arglist>(unsigned long long &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a79b217183beb648f7adee4557d7e2cd1</anchor>
      <arglist>(float &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>af84c7c978f8aeac7448e4b61098e6b6f</anchor>
      <arglist>(double &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>afa97923364329aad1fd5d260bc10cfa0</anchor>
      <arglist>(long double &amp;d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>abbcc7011c1236d9138b678b596e899d3</anchor>
      <arglist>(char *&amp;d)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>adae212badd3eb3ff9be7a5fe89f0a7a5</anchor>
      <arglist>(const char *&amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aa86a58b19c215cb71ad9dc00af3b50b0</anchor>
      <arglist>(opp_string &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a7f71388bee556894356e626891628986</anchor>
      <arglist>(SimTime &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a5c2482ff8a9cd59d6255b8abbb0cd322</anchor>
      <arglist>(char *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a6d266eeb51b87b71c7137b761f946e8a</anchor>
      <arglist>(unsigned char *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a098d628a7adf956043406588426d0b69</anchor>
      <arglist>(bool *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a037e46e0abeb4842c2a03d0d25f26ae7</anchor>
      <arglist>(short *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ac7fa9282a4ec46377d29b0331868d2d0</anchor>
      <arglist>(unsigned short *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a9b7858bae9eaabccbc87f0cca28cd0d3</anchor>
      <arglist>(int *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a2543ff5019753a0b3b1f5c21bb77471c</anchor>
      <arglist>(unsigned int *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>af97ee524aea18c854a867f9c8d21de54</anchor>
      <arglist>(long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>adf447f1e6260b26d09f9a3ae27316f53</anchor>
      <arglist>(unsigned long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aa2dfd482878af46c0f3ae64c7d646966</anchor>
      <arglist>(long long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>abcd48628af4da587ee42081d7c34d233</anchor>
      <arglist>(unsigned long long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>af8193545beff866ad068552278eec213</anchor>
      <arglist>(float *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ab351f966c9f1593e51f3544285a607ac</anchor>
      <arglist>(double *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ad3321dc99428e4d5507825bea4b9142f</anchor>
      <arglist>(long double *d, int size)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a605db897b64165cb422f906d5ec7b4ea</anchor>
      <arglist>(char **d, int size)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>af89c832b2354f2d6bc1145207465fe1c</anchor>
      <arglist>(const char **d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aeeaf685cf82e647578eeb422071c9baa</anchor>
      <arglist>(opp_string *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aa0c6649211be17513d224318c9c95b39</anchor>
      <arglist>(SimTime *d, int size)=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>packFlag</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a7515869cb85aae12a6e632d95f54ca2e</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkFlag</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a2f61f6ead6b75197a9c2348c3587037a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packObject</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a823800e1da7a664748fd5357c1f14386</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>unpackObject</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a9ac93f53bf231f4bceb2130aa4275b69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isBufferEmpty</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a6ca89b958e79f5dd39aacbf1de9b56cb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>assertBufferEmpty</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ade8e6fa06440c5e1b4e250a74bbd7013</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a18f279a1b15912b7a7ad4db76f364621</anchor>
      <arglist>(char d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a17cb031bce3af1f714e091003614febe</anchor>
      <arglist>(unsigned char d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ab371f9ff68b8a490d6efb617102bd606</anchor>
      <arglist>(bool d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aa9bd14a0ed1ae5a95bf937342011c493</anchor>
      <arglist>(short d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a2ab66c10f793a98d29fedd6858c4f6c3</anchor>
      <arglist>(unsigned short d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a04b2ffeb9d8a873690c859973d9ee453</anchor>
      <arglist>(int d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>af397d002d73d3f9ed6641b31b3a84dca</anchor>
      <arglist>(unsigned int d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ac2ad3bc21ff226ed33ac85a3a6f97005</anchor>
      <arglist>(long d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a3e9bf1ee4d44e291e68b27cd121d99dc</anchor>
      <arglist>(unsigned long d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a26be2991f7508ac8cbf391da955eb7d7</anchor>
      <arglist>(long long d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a91588245fb3b4af16c470a0371db1c00</anchor>
      <arglist>(unsigned long long d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a1c196caf72eb5b4b1f3eb8a08cce13c6</anchor>
      <arglist>(float d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a8a4c79042f7c1e1824e3ce8235efcbf3</anchor>
      <arglist>(double d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>adaed967c081322fd50ae28d5bec63f55</anchor>
      <arglist>(long double d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a179a7cebf53fd186301ea961c5dfdb8d</anchor>
      <arglist>(const char *d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a93fb0cae05ad6aa8a7c8cf23352e5e4d</anchor>
      <arglist>(const opp_string &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a85ee67c776c9d91cc8c52b60cf142bb3</anchor>
      <arglist>(SimTime d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aefcce19fc09611d3ffb6262c4221bbf6</anchor>
      <arglist>(const char *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a170d055905f4dea76fd2c2a5fa57475d</anchor>
      <arglist>(const unsigned char *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a43ee1c7618808b98150ddb71ddabc91c</anchor>
      <arglist>(const bool *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a58985ee455806c2ccb7de5d0ad544161</anchor>
      <arglist>(const short *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a393b015fc1fc933f5976cc211e1f52d8</anchor>
      <arglist>(const unsigned short *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a93989855260307ef0e1b27d34c96f44c</anchor>
      <arglist>(const int *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a8728dbe02be0c26733c21ac769e3c1b6</anchor>
      <arglist>(const unsigned int *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>afd12a9b8bf620591fae3e372cbc259a5</anchor>
      <arglist>(const long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a3ed53ed056f224497e7f4a97cace77ed</anchor>
      <arglist>(const unsigned long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a63195e13189c4b05ddccff622fbe4215</anchor>
      <arglist>(const long long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a7517f3f055f34ef622b51233402aba65</anchor>
      <arglist>(const unsigned long long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a91d26ab7cb4ac3be21ec11e4828303ee</anchor>
      <arglist>(const float *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a7ce49e49d228ecae694d29dd93c8028a</anchor>
      <arglist>(const double *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ae9d65cb717065e1635141cd3fe1d6fa2</anchor>
      <arglist>(const long double *d, int size)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a2be5209381e8e238d63760447043db70</anchor>
      <arglist>(char **d, int size)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a769934711828a3e9865a66bd4d3c81eb</anchor>
      <arglist>(const char **d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a27bd70fe704c4628b8164f3ba0500d10</anchor>
      <arglist>(const opp_string *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>abc61adda2b264a6feaa0157c922eadc7</anchor>
      <arglist>(const SimTime *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a97ad968ffc3d00e0444bc4a1fdd3d906</anchor>
      <arglist>(char &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>acc948b850d5649cf37292ceea5ef1715</anchor>
      <arglist>(unsigned char &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a5b735abbe59e310ed52fd6d388e504ca</anchor>
      <arglist>(bool &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aaa8e32181fdca90c645d781e3c0a9892</anchor>
      <arglist>(short &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ab9c8ed55fc3c164219c402ddcfc684e3</anchor>
      <arglist>(unsigned short &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a4e3abac111b106a1ef4d670e16d9777e</anchor>
      <arglist>(int &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>af5b4f491c3693f1bebeb68712624031d</anchor>
      <arglist>(unsigned int &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a5313db8015102910e07311a9f646ae64</anchor>
      <arglist>(long &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>abe0cf9231776b56cae8e5b54786618fc</anchor>
      <arglist>(unsigned long &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aa56c76888e73d2adf41f0809f0aa0456</anchor>
      <arglist>(long long &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a1d3fd87b0794d853fe060c23eebee4b1</anchor>
      <arglist>(unsigned long long &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a79b217183beb648f7adee4557d7e2cd1</anchor>
      <arglist>(float &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>af84c7c978f8aeac7448e4b61098e6b6f</anchor>
      <arglist>(double &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>afa97923364329aad1fd5d260bc10cfa0</anchor>
      <arglist>(long double &amp;d)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>abbcc7011c1236d9138b678b596e899d3</anchor>
      <arglist>(char *&amp;d)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>adae212badd3eb3ff9be7a5fe89f0a7a5</anchor>
      <arglist>(const char *&amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aa86a58b19c215cb71ad9dc00af3b50b0</anchor>
      <arglist>(opp_string &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a7f71388bee556894356e626891628986</anchor>
      <arglist>(SimTime &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a5c2482ff8a9cd59d6255b8abbb0cd322</anchor>
      <arglist>(char *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a6d266eeb51b87b71c7137b761f946e8a</anchor>
      <arglist>(unsigned char *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a098d628a7adf956043406588426d0b69</anchor>
      <arglist>(bool *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a037e46e0abeb4842c2a03d0d25f26ae7</anchor>
      <arglist>(short *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ac7fa9282a4ec46377d29b0331868d2d0</anchor>
      <arglist>(unsigned short *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a9b7858bae9eaabccbc87f0cca28cd0d3</anchor>
      <arglist>(int *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a2543ff5019753a0b3b1f5c21bb77471c</anchor>
      <arglist>(unsigned int *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>af97ee524aea18c854a867f9c8d21de54</anchor>
      <arglist>(long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>adf447f1e6260b26d09f9a3ae27316f53</anchor>
      <arglist>(unsigned long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aa2dfd482878af46c0f3ae64c7d646966</anchor>
      <arglist>(long long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>abcd48628af4da587ee42081d7c34d233</anchor>
      <arglist>(unsigned long long *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>af8193545beff866ad068552278eec213</anchor>
      <arglist>(float *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ab351f966c9f1593e51f3544285a607ac</anchor>
      <arglist>(double *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>ad3321dc99428e4d5507825bea4b9142f</anchor>
      <arglist>(long double *d, int size)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a605db897b64165cb422f906d5ec7b4ea</anchor>
      <arglist>(char **d, int size)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>af89c832b2354f2d6bc1145207465fe1c</anchor>
      <arglist>(const char **d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aeeaf685cf82e647578eeb422071c9baa</anchor>
      <arglist>(opp_string *d, int size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unpack</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>aa0c6649211be17513d224318c9c95b39</anchor>
      <arglist>(SimTime *d, int size)=0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>packFlag</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a7515869cb85aae12a6e632d95f54ca2e</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkFlag</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a2f61f6ead6b75197a9c2348c3587037a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>packObject</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a823800e1da7a664748fd5357c1f14386</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>unpackObject</name>
      <anchorfile>classomnetpp_1_1cCommBuffer.html</anchorfile>
      <anchor>a9ac93f53bf231f4bceb2130aa4275b69</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cComponent</name>
    <filename>classomnetpp_1_1cComponent.html</filename>
    <base>omnetpp::cDefaultList</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finalizeParameters</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a8d83c0346d3f9f1c5ecb95777bac5556</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cComponent</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a914eb6b60cdcbec00464e3bdde1ede1b</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cComponent</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a2b5ac76ba3236f514b9d9d977f3b9a3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function">
      <type>const cComponent *</type>
      <name>getThisPtr</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a1b3454f7a4eefb9450ab2b977b589c60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cProperties *</type>
      <name>getProperties</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ad0662fb98947d8cabe8702e09733418f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cComponentType *</type>
      <name>getComponentType</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a0ec35927a8004fac537588df05faee3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cSimulation *</type>
      <name>getSimulation</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a99d94cf2c52f0f6ec1092691d54b2ba5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getId</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a4753a5331a3ccc5974088b45b2b532ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getNedTypeName</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>aeecfa364503c4a33f37c81ce5278b14f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ComponentKind</type>
      <name>getComponentKind</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a56b1aacbc65126ccd7cede0521eee59d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isModule</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a8d2f913f542210584f2f20a4aa09b43e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isChannel</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a9888093c43c151208f9f647500cd8662</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cModule *</type>
      <name>getParentModule</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a181097feef47ea7103ad89550250a5de</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getSystemModule</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a49067ba31e8f98f656f5754af05b8f40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>callInitialize</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a696c02b4d28bafcd19521668ba589cb9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>callInitialize</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>abe0d07fe5e69478ed318eee62f31af59</anchor>
      <arglist>(int stage)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>callFinish</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a834d5764a674b01e9287404ef64f5bcf</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumParams</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>afbf0fab0b386af4f3d8181c45deac319</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPar &amp;</type>
      <name>par</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a0a95bef1b9c84b134b18c1481adf4c55</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function">
      <type>const cPar &amp;</type>
      <name>par</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ae37cd0fa4b38d6874c694dc83c0f1b69</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPar &amp;</type>
      <name>par</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>af5506335b59111e62cf6292f411f9a9f</anchor>
      <arglist>(const char *parname)</arglist>
    </member>
    <member kind="function">
      <type>const cPar &amp;</type>
      <name>par</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a9e3193aa5640b19aafa3576e95031795</anchor>
      <arglist>(const char *parname) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findPar</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ae8b2a77a4c37863e91ebdee49e484784</anchor>
      <arglist>(const char *parname) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPar</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>aac9ff0f6b84df47801576452d5bbc2bc</anchor>
      <arglist>(const char *s) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cRNG *</type>
      <name>getRNG</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ab925c81ec85f5d9a415fd4409442535a</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>intrand</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a74453a951e099b3a52d545e346ae3714</anchor>
      <arglist>(long r, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>dblrand</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ad77dedf18e935a3ea6ff968315688a91</anchor>
      <arglist>(int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>uniform</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a590fc7b9500267a06fe0f42acd20b45f</anchor>
      <arglist>(double a, double b, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimTime</type>
      <name>uniform</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a5db6fdfcbffcf387a9763e010ae032e4</anchor>
      <arglist>(SimTime a, SimTime b, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>exponential</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>aac9f40cdbdcb631ccdb8e5527e5a2de2</anchor>
      <arglist>(double mean, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimTime</type>
      <name>exponential</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a3499e404e19327332b7d53a90c9378a7</anchor>
      <arglist>(SimTime mean, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>normal</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a91dc59d1cf74391fba42667d4d099326</anchor>
      <arglist>(double mean, double stddev, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimTime</type>
      <name>normal</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a5ffb4b038f6b1f2ea0b5729468b4dc45</anchor>
      <arglist>(SimTime mean, SimTime stddev, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>truncnormal</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ad12915952a3622a3b478f79523326f25</anchor>
      <arglist>(double mean, double stddev, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimTime</type>
      <name>truncnormal</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a79324d798ce173b3ff38917b9562a674</anchor>
      <arglist>(SimTime mean, SimTime stddev, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>gamma_d</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>aeb0fd486e42db0bf94a06f71a9a3ccf2</anchor>
      <arglist>(double alpha, double theta, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>beta</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a5b489eb3f12614a89071be333636db5f</anchor>
      <arglist>(double alpha1, double alpha2, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>erlang_k</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a969d9cd590f517ad47c42cfffc9ad2e8</anchor>
      <arglist>(unsigned int k, double mean, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>chi_square</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a928391963b8ec9ac16e019c0fd49ac91</anchor>
      <arglist>(unsigned int k, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>student_t</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a53715cdd907611af438c6d65c9681c6a</anchor>
      <arglist>(unsigned int i, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>cauchy</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a48fc7bed4301b201b6b0dbe4d82f6a99</anchor>
      <arglist>(double a, double b, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>triang</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a152c2985a4c595abda95956653b61137</anchor>
      <arglist>(double a, double b, double c, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>lognormal</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a114db798b3d83fbf3be470dace43a669</anchor>
      <arglist>(double m, double w, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>weibull</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a2a2babc5bdfdcdd5755f4da0cd2906fc</anchor>
      <arglist>(double a, double b, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>pareto_shifted</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a47fa39b8c9351397d881cdf97353a50c</anchor>
      <arglist>(double a, double b, double c, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>intuniform</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a7e613b8ab73b01f81c787c66fbdbd2aa</anchor>
      <arglist>(int a, int b, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>intuniformexcl</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a6b0739471b6b0790ff06262f1cd78e94</anchor>
      <arglist>(int a, int b, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bernoulli</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a48c5c76fa57312885f92a172b14e9d88</anchor>
      <arglist>(double p, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>binomial</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ad2549a2113b00ee75199df643d3aa824</anchor>
      <arglist>(int n, double p, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>geometric</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a64f14bc46ec4e7973f740636a2a68cf3</anchor>
      <arglist>(double p, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>negbinomial</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a23b5d36ff42ab8eaf6aeef878bddeffb</anchor>
      <arglist>(int n, double p, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>poisson</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a52282569d1e9fedbea6e86325b89c3d1</anchor>
      <arglist>(double lambda, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>subscribe</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a178aee891ea1813e4009f5cbf3f08dbd</anchor>
      <arglist>(simsignal_t signalID, cIListener *listener)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>subscribe</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a09bbb65fe46cafb0891d4950e74cdb71</anchor>
      <arglist>(const char *signalName, cIListener *listener)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unsubscribe</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>abc2e2b269cdad6e91f67e8c70f383d14</anchor>
      <arglist>(simsignal_t signalID, cIListener *listener)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unsubscribe</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a29290418183b197ec7376cf48e175839</anchor>
      <arglist>(const char *signalName, cIListener *listener)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSubscribed</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ac8f141d551583de6db0b2e703cf7b52f</anchor>
      <arglist>(simsignal_t signalID, cIListener *listener) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSubscribed</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>af1514861019a5327bee13805a103a17a</anchor>
      <arglist>(const char *signalName, cIListener *listener) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; simsignal_t &gt;</type>
      <name>getLocalListenedSignals</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a4ebdbc59d6441240468eeb96f991f340</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; cIListener * &gt;</type>
      <name>getLocalSignalListeners</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a653d4ce8b7f2b040537f36bf857119f7</anchor>
      <arglist>(simsignal_t signalID) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasGUI</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a11e02cdf6a302d256b62548381c73de7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cDisplayString &amp;</type>
      <name>getDisplayString</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a9f26e144ae6f30baa19979f2e87e3c01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDisplayString</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>aa145768f6a54a453e745415400d04080</anchor>
      <arglist>(const char *dispstr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bubble</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>abaadc0dfe861d9a2b2197a6094425af0</anchor>
      <arglist>(const char *text) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>resolveResourcePath</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ab75c276e73f5e9932fe9d5feb957806a</anchor>
      <arglist>(const char *fileName) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordScalar</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ac553b85fbf167cbb73e546771627f797</anchor>
      <arglist>(const char *name, double value, const char *unit=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordScalar</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>afd8f1f3618f29687d07b6cb2693aa78d</anchor>
      <arglist>(const char *name, SimTime value, const char *unit=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordStatistic</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a1d2db12bf50d56a56ba3dc176df91b17</anchor>
      <arglist>(cStatistic *stats, const char *unit=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordStatistic</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>af7d6115031e118ca4586c855ddec90a2</anchor>
      <arglist>(const char *name, cStatistic *stats, const char *unit=nullptr)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a36c856572779aa7766989186cef95029</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a77dd9c0872a109e3c1ef62c30ce5b9b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a6365dca5a7d8ddb694726a53b55a4c27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>add480a9cf3f0b32e06ef6e9b87c36b16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleParameterChange</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a4c59e888b018005049066efac784fd23</anchor>
      <arglist>(const char *parname)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>refreshDisplay</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a5cc46f0bc49a3f57c619b660e78c7dae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a36c856572779aa7766989186cef95029</anchor>
      <arglist>(int stage)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual int</type>
      <name>numInitStages</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a77dd9c0872a109e3c1ef62c30ce5b9b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a6365dca5a7d8ddb694726a53b55a4c27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>add480a9cf3f0b32e06ef6e9b87c36b16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleParameterChange</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a4c59e888b018005049066efac784fd23</anchor>
      <arglist>(const char *parname)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>refreshDisplay</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a5cc46f0bc49a3f57c619b660e78c7dae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cComponent</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a914eb6b60cdcbec00464e3bdde1ede1b</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cComponent</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a2b5ac76ba3236f514b9d9d977f3b9a3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function">
      <type>const cComponent *</type>
      <name>getThisPtr</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a1b3454f7a4eefb9450ab2b977b589c60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cProperties *</type>
      <name>getProperties</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ad0662fb98947d8cabe8702e09733418f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cComponentType *</type>
      <name>getComponentType</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a0ec35927a8004fac537588df05faee3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cSimulation *</type>
      <name>getSimulation</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a99d94cf2c52f0f6ec1092691d54b2ba5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getId</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a4753a5331a3ccc5974088b45b2b532ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getNedTypeName</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>aeecfa364503c4a33f37c81ce5278b14f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual ComponentKind</type>
      <name>getComponentKind</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a56b1aacbc65126ccd7cede0521eee59d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isModule</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a8d2f913f542210584f2f20a4aa09b43e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isChannel</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a9888093c43c151208f9f647500cd8662</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cModule *</type>
      <name>getParentModule</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a181097feef47ea7103ad89550250a5de</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getSystemModule</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a49067ba31e8f98f656f5754af05b8f40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>callInitialize</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a696c02b4d28bafcd19521668ba589cb9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>callInitialize</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>abe0d07fe5e69478ed318eee62f31af59</anchor>
      <arglist>(int stage)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>callFinish</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a834d5764a674b01e9287404ef64f5bcf</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumParams</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>afbf0fab0b386af4f3d8181c45deac319</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPar &amp;</type>
      <name>par</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a0a95bef1b9c84b134b18c1481adf4c55</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function">
      <type>const cPar &amp;</type>
      <name>par</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ae37cd0fa4b38d6874c694dc83c0f1b69</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPar &amp;</type>
      <name>par</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>af5506335b59111e62cf6292f411f9a9f</anchor>
      <arglist>(const char *parname)</arglist>
    </member>
    <member kind="function">
      <type>const cPar &amp;</type>
      <name>par</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a9e3193aa5640b19aafa3576e95031795</anchor>
      <arglist>(const char *parname) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findPar</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ae8b2a77a4c37863e91ebdee49e484784</anchor>
      <arglist>(const char *parname) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPar</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>aac9ff0f6b84df47801576452d5bbc2bc</anchor>
      <arglist>(const char *s) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cRNG *</type>
      <name>getRNG</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ab925c81ec85f5d9a415fd4409442535a</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>intrand</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a74453a951e099b3a52d545e346ae3714</anchor>
      <arglist>(long r, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>dblrand</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ad77dedf18e935a3ea6ff968315688a91</anchor>
      <arglist>(int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>uniform</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a590fc7b9500267a06fe0f42acd20b45f</anchor>
      <arglist>(double a, double b, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimTime</type>
      <name>uniform</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a5db6fdfcbffcf387a9763e010ae032e4</anchor>
      <arglist>(SimTime a, SimTime b, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>exponential</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>aac9f40cdbdcb631ccdb8e5527e5a2de2</anchor>
      <arglist>(double mean, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimTime</type>
      <name>exponential</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a3499e404e19327332b7d53a90c9378a7</anchor>
      <arglist>(SimTime mean, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>normal</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a91dc59d1cf74391fba42667d4d099326</anchor>
      <arglist>(double mean, double stddev, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimTime</type>
      <name>normal</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a5ffb4b038f6b1f2ea0b5729468b4dc45</anchor>
      <arglist>(SimTime mean, SimTime stddev, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>truncnormal</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ad12915952a3622a3b478f79523326f25</anchor>
      <arglist>(double mean, double stddev, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimTime</type>
      <name>truncnormal</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a79324d798ce173b3ff38917b9562a674</anchor>
      <arglist>(SimTime mean, SimTime stddev, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>gamma_d</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>aeb0fd486e42db0bf94a06f71a9a3ccf2</anchor>
      <arglist>(double alpha, double theta, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>beta</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a5b489eb3f12614a89071be333636db5f</anchor>
      <arglist>(double alpha1, double alpha2, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>erlang_k</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a969d9cd590f517ad47c42cfffc9ad2e8</anchor>
      <arglist>(unsigned int k, double mean, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>chi_square</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a928391963b8ec9ac16e019c0fd49ac91</anchor>
      <arglist>(unsigned int k, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>student_t</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a53715cdd907611af438c6d65c9681c6a</anchor>
      <arglist>(unsigned int i, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>cauchy</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a48fc7bed4301b201b6b0dbe4d82f6a99</anchor>
      <arglist>(double a, double b, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>triang</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a152c2985a4c595abda95956653b61137</anchor>
      <arglist>(double a, double b, double c, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>lognormal</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a114db798b3d83fbf3be470dace43a669</anchor>
      <arglist>(double m, double w, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>weibull</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a2a2babc5bdfdcdd5755f4da0cd2906fc</anchor>
      <arglist>(double a, double b, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>pareto_shifted</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a47fa39b8c9351397d881cdf97353a50c</anchor>
      <arglist>(double a, double b, double c, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>intuniform</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a7e613b8ab73b01f81c787c66fbdbd2aa</anchor>
      <arglist>(int a, int b, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>intuniformexcl</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a6b0739471b6b0790ff06262f1cd78e94</anchor>
      <arglist>(int a, int b, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>bernoulli</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a48c5c76fa57312885f92a172b14e9d88</anchor>
      <arglist>(double p, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>binomial</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ad2549a2113b00ee75199df643d3aa824</anchor>
      <arglist>(int n, double p, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>geometric</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a64f14bc46ec4e7973f740636a2a68cf3</anchor>
      <arglist>(double p, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>negbinomial</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a23b5d36ff42ab8eaf6aeef878bddeffb</anchor>
      <arglist>(int n, double p, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>poisson</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a52282569d1e9fedbea6e86325b89c3d1</anchor>
      <arglist>(double lambda, int rng=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ad9d13a52022df8f4e754f55c22958eab</anchor>
      <arglist>(simsignal_t signalID, bool b, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a3dc2bd99e2171e2f164288d1ae9af7ec</anchor>
      <arglist>(simsignal_t signalID, long l, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a030f024d5f093fe2aec5ed587642a4de</anchor>
      <arglist>(simsignal_t signalID, unsigned long l, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>affc7f9833852c0cebe455c9abc2069e9</anchor>
      <arglist>(simsignal_t signalID, double d, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a86e03b6ce067930fc5a23af3d9a6c194</anchor>
      <arglist>(simsignal_t signalID, const SimTime &amp;t, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a52dd0d8252b351712ec5efae5620b51c</anchor>
      <arglist>(simsignal_t signalID, const char *s, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a686a0ed0adb405486c24e849b83191bf</anchor>
      <arglist>(simsignal_t signalID, cObject *obj, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>acc1a71c4d912d7d6bd8bd8e772711cd8</anchor>
      <arglist>(simsignal_t signalID, const cObject *obj, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a3f7a67e59ad3abcb21429c2a9912861f</anchor>
      <arglist>(simsignal_t signalID, char c, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a664554f42b7c05d7881db38d55fa68d2</anchor>
      <arglist>(simsignal_t signalID, unsigned char c, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a14b3db315aed45dbe007245e92c5a4ae</anchor>
      <arglist>(simsignal_t signalID, short i, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ac8c6683fc70c790f073b0b0ade89bcf9</anchor>
      <arglist>(simsignal_t signalID, unsigned short i, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>aedab2c18b2d3b39ad774e9ec6877cf98</anchor>
      <arglist>(simsignal_t signalID, int i, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a8ac2497a112fb4c8e89289a89565e69b</anchor>
      <arglist>(simsignal_t signalID, unsigned int i, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a4a12c952d230f75a219532b14352d9cb</anchor>
      <arglist>(simsignal_t signalID, float f, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>emit</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a49a291ed5b89376519bebaa10bdb7b97</anchor>
      <arglist>(simsignal_t signalID, long double d, cObject *details=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mayHaveListeners</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a26a5d6fb39973763fd52cec80270b4b2</anchor>
      <arglist>(simsignal_t signalID) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasListeners</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a72bc2410f5cd901c2841b51ce175d326</anchor>
      <arglist>(simsignal_t signalID) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static simsignal_t</type>
      <name>registerSignal</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ae9541593ed53f6b0b468a62c80e7095b</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getSignalName</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>af4a05243a1ce13f3d0fb8b74eba76b3a</anchor>
      <arglist>(simsignal_t signalID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>subscribe</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a178aee891ea1813e4009f5cbf3f08dbd</anchor>
      <arglist>(simsignal_t signalID, cIListener *listener)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>subscribe</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a09bbb65fe46cafb0891d4950e74cdb71</anchor>
      <arglist>(const char *signalName, cIListener *listener)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unsubscribe</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>abc2e2b269cdad6e91f67e8c70f383d14</anchor>
      <arglist>(simsignal_t signalID, cIListener *listener)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unsubscribe</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a29290418183b197ec7376cf48e175839</anchor>
      <arglist>(const char *signalName, cIListener *listener)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSubscribed</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ac8f141d551583de6db0b2e703cf7b52f</anchor>
      <arglist>(simsignal_t signalID, cIListener *listener) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSubscribed</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>af1514861019a5327bee13805a103a17a</anchor>
      <arglist>(const char *signalName, cIListener *listener) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; simsignal_t &gt;</type>
      <name>getLocalListenedSignals</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a4ebdbc59d6441240468eeb96f991f340</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; cIListener * &gt;</type>
      <name>getLocalSignalListeners</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a653d4ce8b7f2b040537f36bf857119f7</anchor>
      <arglist>(simsignal_t signalID) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasGUI</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a11e02cdf6a302d256b62548381c73de7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cDisplayString &amp;</type>
      <name>getDisplayString</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a9f26e144ae6f30baa19979f2e87e3c01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDisplayString</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>aa145768f6a54a453e745415400d04080</anchor>
      <arglist>(const char *dispstr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bubble</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>abaadc0dfe861d9a2b2197a6094425af0</anchor>
      <arglist>(const char *text) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>resolveResourcePath</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ab75c276e73f5e9932fe9d5feb957806a</anchor>
      <arglist>(const char *fileName) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordScalar</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>ac553b85fbf167cbb73e546771627f797</anchor>
      <arglist>(const char *name, double value, const char *unit=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordScalar</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>afd8f1f3618f29687d07b6cb2693aa78d</anchor>
      <arglist>(const char *name, SimTime value, const char *unit=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordStatistic</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>a1d2db12bf50d56a56ba3dc176df91b17</anchor>
      <arglist>(cStatistic *stats, const char *unit=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordStatistic</name>
      <anchorfile>classomnetpp_1_1cComponent.html</anchorfile>
      <anchor>af7d6115031e118ca4586c855ddec90a2</anchor>
      <arglist>(const char *name, cStatistic *stats, const char *unit=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cComponentType</name>
    <filename>classomnetpp_1_1cComponentType.html</filename>
    <base>omnetpp::cNoncopyableOwnedObject</base>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getNedSource</name>
      <anchorfile>classomnetpp_1_1cComponentType.html</anchorfile>
      <anchor>ae827e4ef285a73f5a8fe7242a9f6b4cd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cComponentType</name>
      <anchorfile>classomnetpp_1_1cComponentType.html</anchorfile>
      <anchor>ab8717f85461cf0b2e29d0f8911160511</anchor>
      <arglist>(const char *qname=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cComponentType</name>
      <anchorfile>classomnetpp_1_1cComponentType.html</anchorfile>
      <anchor>a5fa5d54f02b1022797f6bf7554cdc487</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classomnetpp_1_1cComponentType.html</anchorfile>
      <anchor>ac8c2df3a4b90f890270bda7b2d7c1bec</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cComponentType *</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cComponentType.html</anchorfile>
      <anchor>a7a640944c50c6a41403cfd1b32986f3c</anchor>
      <arglist>(const char *qname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cComponentType *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cComponentType.html</anchorfile>
      <anchor>ac6f296feec2395e281923b27c5152214</anchor>
      <arglist>(const char *qname)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cComponentType</name>
      <anchorfile>classomnetpp_1_1cComponentType.html</anchorfile>
      <anchor>ab8717f85461cf0b2e29d0f8911160511</anchor>
      <arglist>(const char *qname=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cComponentType</name>
      <anchorfile>classomnetpp_1_1cComponentType.html</anchorfile>
      <anchor>a5fa5d54f02b1022797f6bf7554cdc487</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classomnetpp_1_1cComponentType.html</anchorfile>
      <anchor>ac8c2df3a4b90f890270bda7b2d7c1bec</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cConfigOption</name>
    <filename>classomnetpp_1_1cConfigOption.html</filename>
    <base>omnetpp::cNoncopyableOwnedObject</base>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>a1d1cfd8ffb84e947f82999c682b666a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ObjectKind</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>ac3b0677926528858fd29ac7fe358ee93</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cConfigOption</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>aae4a7cba63aacc3acae47126ecff3b1b</anchor>
      <arglist>(const char *name, bool isGlobal, Type type, const char *unit, const char *defaultValue, const char *description)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cConfigOption</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>a89774df903e819f8daaea1f44fdc4f09</anchor>
      <arglist>(const char *name, ObjectKind kind, Type type, const char *unit, const char *defaultValue, const char *description)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cConfigOption *</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>ad2f5cd3d2d17ef0836dced1aa3ebef6c</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cConfigOption *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>a6ff57c48f17507511cc941b7e281e8bc</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cConfigOption</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>aae4a7cba63aacc3acae47126ecff3b1b</anchor>
      <arglist>(const char *name, bool isGlobal, Type type, const char *unit, const char *defaultValue, const char *description)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cConfigOption</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>a89774df903e819f8daaea1f44fdc4f09</anchor>
      <arglist>(const char *name, ObjectKind kind, Type type, const char *unit, const char *defaultValue, const char *description)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPerObject</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>a477c2f147625d457e7a2b9304e468f50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGlobal</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>a19ba379112d6b29faa45c5eefbf38500</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ObjectKind</type>
      <name>getObjectKind</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>a8325405ffbf04b356589f5914673f44a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>a97c56d51eec84be3e856eb0ca6ebd3d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getUnit</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>a0d05734c8c6121209c8ec9cb0da3d3aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDefaultValue</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>afed720ab5a6bf30d770fed29a8cb8a04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDescription</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>a7e04381ec22454e831a3db7b063c35c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getObjectKindName</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>a7e3da2320b4a882833c362c0839c4a86</anchor>
      <arglist>(ObjectKind kind)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getTypeName</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>a811755497e507821b3f40e3f6aa56886</anchor>
      <arglist>(Type type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cConfigOption *</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>ad2f5cd3d2d17ef0836dced1aa3ebef6c</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cConfigOption *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cConfigOption.html</anchorfile>
      <anchor>a6ff57c48f17507511cc941b7e281e8bc</anchor>
      <arglist>(const char *name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cConfiguration</name>
    <filename>classomnetpp_1_1cConfiguration.html</filename>
    <base>omnetpp::cObject</base>
    <class kind="class">omnetpp::cConfiguration::KeyValue</class>
    <class kind="struct">omnetpp::cConfiguration::RunInfo</class>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getConfigValue</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a79c2681653bb6410960c9212563b5f94</anchor>
      <arglist>(const char *key) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const KeyValue &amp;</type>
      <name>getConfigEntry</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a5630601f5abc174a917f7f7c49558097</anchor>
      <arglist>(const char *key) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getPerObjectConfigValue</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a9efb215445da7f2dd4a42b8882886205</anchor>
      <arglist>(const char *objectFullPath, const char *keySuffix) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const KeyValue &amp;</type>
      <name>getPerObjectConfigEntry</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a695b0a827f12def9b0d921e5f59f7e91</anchor>
      <arglist>(const char *objectFullPath, const char *keySuffix) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAsCustom</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a443fcd59cadd11125607c6cea0b43127</anchor>
      <arglist>(cConfigOption *option, const char *fallbackValue=nullptr) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getAsBool</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a113381ec7a4c17acf839d2fab58ebb19</anchor>
      <arglist>(cConfigOption *option, bool fallbackValue=false) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getAsInt</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a1200c5529dacc93a2927d3179d58db41</anchor>
      <arglist>(cConfigOption *option, long fallbackValue=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getAsDouble</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a513f62da6f1d14687ab3f85c6a6d1bc0</anchor>
      <arglist>(cConfigOption *option, double fallbackValue=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsString</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>affdaacda96a2b6ad29e616fe5cd269e1</anchor>
      <arglist>(cConfigOption *option, const char *fallbackValue=&quot;&quot;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsFilename</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a6f6ba6e0fe3e7f54771391f5c2f8f35f</anchor>
      <arglist>(cConfigOption *option) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getAsFilenames</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a12635b7244d90e6e26ca42906c375450</anchor>
      <arglist>(cConfigOption *option) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsPath</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a3aeae2b0c68781427ac531c36933f366</anchor>
      <arglist>(cConfigOption *option) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAsCustom</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a00e5c928a93f02895a3297d45d171447</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option, const char *fallbackValue=nullptr) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getAsBool</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a695507c0fd0fc53dac3e6f03a89f5289</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option, bool fallbackValue=false) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getAsInt</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>adabddc2ccc6130734344a51c538fb601</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option, long fallbackValue=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getAsDouble</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a29d88bdee88ed6942ed42f81c1993e31</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option, double fallbackValue=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsString</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a2fca7b203138926c4f824bcf7f5c21fb</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option, const char *fallbackValue=&quot;&quot;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsFilename</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a2eb7867d908142d99794805342d556e5</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getAsFilenames</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a488cb4deab3e0219e1faa0590615a007</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsPath</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a765ec6eea1fee4586b44dc3ad4d85b52</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>substituteVariables</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>ab100426da4b8ebe624b67db009e79596</anchor>
      <arglist>(const char *value) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getConfigValue</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a79c2681653bb6410960c9212563b5f94</anchor>
      <arglist>(const char *key) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const KeyValue &amp;</type>
      <name>getConfigEntry</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a5630601f5abc174a917f7f7c49558097</anchor>
      <arglist>(const char *key) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getPerObjectConfigValue</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a9efb215445da7f2dd4a42b8882886205</anchor>
      <arglist>(const char *objectFullPath, const char *keySuffix) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const KeyValue &amp;</type>
      <name>getPerObjectConfigEntry</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a695b0a827f12def9b0d921e5f59f7e91</anchor>
      <arglist>(const char *objectFullPath, const char *keySuffix) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAsCustom</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a443fcd59cadd11125607c6cea0b43127</anchor>
      <arglist>(cConfigOption *option, const char *fallbackValue=nullptr) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getAsBool</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a113381ec7a4c17acf839d2fab58ebb19</anchor>
      <arglist>(cConfigOption *option, bool fallbackValue=false) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getAsInt</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a1200c5529dacc93a2927d3179d58db41</anchor>
      <arglist>(cConfigOption *option, long fallbackValue=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getAsDouble</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a513f62da6f1d14687ab3f85c6a6d1bc0</anchor>
      <arglist>(cConfigOption *option, double fallbackValue=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsString</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>affdaacda96a2b6ad29e616fe5cd269e1</anchor>
      <arglist>(cConfigOption *option, const char *fallbackValue=&quot;&quot;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsFilename</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a6f6ba6e0fe3e7f54771391f5c2f8f35f</anchor>
      <arglist>(cConfigOption *option) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getAsFilenames</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a12635b7244d90e6e26ca42906c375450</anchor>
      <arglist>(cConfigOption *option) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsPath</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a3aeae2b0c68781427ac531c36933f366</anchor>
      <arglist>(cConfigOption *option) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAsCustom</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a00e5c928a93f02895a3297d45d171447</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option, const char *fallbackValue=nullptr) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getAsBool</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a695507c0fd0fc53dac3e6f03a89f5289</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option, bool fallbackValue=false) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual long</type>
      <name>getAsInt</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>adabddc2ccc6130734344a51c538fb601</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option, long fallbackValue=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getAsDouble</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a29d88bdee88ed6942ed42f81c1993e31</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option, double fallbackValue=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsString</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a2fca7b203138926c4f824bcf7f5c21fb</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option, const char *fallbackValue=&quot;&quot;) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsFilename</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a2eb7867d908142d99794805342d556e5</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getAsFilenames</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a488cb4deab3e0219e1faa0590615a007</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getAsPath</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>a765ec6eea1fee4586b44dc3ad4d85b52</anchor>
      <arglist>(const char *objectFullPath, cConfigOption *option) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>substituteVariables</name>
      <anchorfile>classomnetpp_1_1cConfiguration.html</anchorfile>
      <anchor>ab100426da4b8ebe624b67db009e79596</anchor>
      <arglist>(const char *value) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cConfigurationEx</name>
    <filename>classomnetpp_1_1cConfigurationEx.html</filename>
    <base>omnetpp::cConfiguration</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initializeFrom</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a0be3648e0b171e7f54422285de56de55</anchor>
      <arglist>(cConfiguration *bootConfig)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFileName</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>ae029375c4f36cc1abf4fb90e398d5831</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>validate</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a91bb4bc29e8a5a95b36ca0210d5e86ae</anchor>
      <arglist>(const char *ignorableConfigKeys=nullptr) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getConfigNames</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a94024946850d2001fe2e7b79f7adbc7b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>activateConfig</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>af1185cb1605442df97c49f88eb0c62b9</anchor>
      <arglist>(const char *configName, int runNumber=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getConfigDescription</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>ab71424bbeb54ebbdcfc684f72946719e</anchor>
      <arglist>(const char *configName) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getBaseConfigs</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a60dfb6efb25b74f4e9a4641fe6a02830</anchor>
      <arglist>(const char *configName) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getConfigChain</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a7f54435822ab259066fad86639d01d68</anchor>
      <arglist>(const char *configName) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumRunsInConfig</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>ac498f124e8e15a3178e8bb0db2e014cd</anchor>
      <arglist>(const char *configName) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; RunInfo &gt;</type>
      <name>unrollConfig</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>ae305b6e465c39aa1e8fe74ee3f1be620</anchor>
      <arglist>(const char *configName) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getActiveConfigName</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a633745781a12e58daf1ba30c9cf7be6a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getActiveRunNumber</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>afc0a7751b9315bea65ab9f5d1f70a314</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getVariable</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a412125870a7128415aa2988ec65e9417</anchor>
      <arglist>(const char *varname) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getIterationVariableNames</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a36bc70a28b2f231448e25013530987e6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getPredefinedVariableNames</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>abe99c0e5bd3bec729b9c759d80aa14ac</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getVariableDescription</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a6c1ffebbe251c5786cc1143f18b60f81</anchor>
      <arglist>(const char *varname) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a7a6a14a099a69ee446cf9017679bf52a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getMatchingConfigKeys</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>af3550abfc909b4b46e945e5b478b6aaf</anchor>
      <arglist>(const char *pattern) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getParameterValue</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>aa420c1c0b33fb3e047a15d8c6b438cb0</anchor>
      <arglist>(const char *moduleFullPath, const char *paramName, bool hasDefaultValue) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const KeyValue &amp;</type>
      <name>getParameterEntry</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a59a3553c604c95d463726acd024ad59e</anchor>
      <arglist>(const char *moduleFullPath, const char *paramName, bool hasDefaultValue) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getKeyValuePairs</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a61b9c9fab54b210a7bf7f436c3751648</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getParameterKeyValuePairs</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a359bf1ff8929581998cebd9bbe13410e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getMatchingPerObjectConfigKeys</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a8d411117c85a8c26ff944a03b49ddddc</anchor>
      <arglist>(const char *objectFullPath, const char *keySuffixPattern) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getMatchingPerObjectConfigKeySuffixes</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a69f83695587cf97e9a02498c50e31541</anchor>
      <arglist>(const char *objectFullPath, const char *keySuffixPattern) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getConfigNames</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a94024946850d2001fe2e7b79f7adbc7b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>activateConfig</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>af1185cb1605442df97c49f88eb0c62b9</anchor>
      <arglist>(const char *configName, int runNumber=0)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>getConfigDescription</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>ab71424bbeb54ebbdcfc684f72946719e</anchor>
      <arglist>(const char *configName) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getBaseConfigs</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a60dfb6efb25b74f4e9a4641fe6a02830</anchor>
      <arglist>(const char *configName) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getConfigChain</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a7f54435822ab259066fad86639d01d68</anchor>
      <arglist>(const char *configName) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumRunsInConfig</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>ac498f124e8e15a3178e8bb0db2e014cd</anchor>
      <arglist>(const char *configName) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; RunInfo &gt;</type>
      <name>unrollConfig</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>ae305b6e465c39aa1e8fe74ee3f1be620</anchor>
      <arglist>(const char *configName) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getActiveConfigName</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a633745781a12e58daf1ba30c9cf7be6a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getActiveRunNumber</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>afc0a7751b9315bea65ab9f5d1f70a314</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getVariable</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a412125870a7128415aa2988ec65e9417</anchor>
      <arglist>(const char *varname) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getIterationVariableNames</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a36bc70a28b2f231448e25013530987e6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getPredefinedVariableNames</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>abe99c0e5bd3bec729b9c759d80aa14ac</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getVariableDescription</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a6c1ffebbe251c5786cc1143f18b60f81</anchor>
      <arglist>(const char *varname) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a7a6a14a099a69ee446cf9017679bf52a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getMatchingConfigKeys</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>af3550abfc909b4b46e945e5b478b6aaf</anchor>
      <arglist>(const char *pattern) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getParameterValue</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>aa420c1c0b33fb3e047a15d8c6b438cb0</anchor>
      <arglist>(const char *moduleFullPath, const char *paramName, bool hasDefaultValue) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const KeyValue &amp;</type>
      <name>getParameterEntry</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a59a3553c604c95d463726acd024ad59e</anchor>
      <arglist>(const char *moduleFullPath, const char *paramName, bool hasDefaultValue) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getKeyValuePairs</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a61b9c9fab54b210a7bf7f436c3751648</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getParameterKeyValuePairs</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a359bf1ff8929581998cebd9bbe13410e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getMatchingPerObjectConfigKeys</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a8d411117c85a8c26ff944a03b49ddddc</anchor>
      <arglist>(const char *objectFullPath, const char *keySuffixPattern) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getMatchingPerObjectConfigKeySuffixes</name>
      <anchorfile>classomnetpp_1_1cConfigurationEx.html</anchorfile>
      <anchor>a69f83695587cf97e9a02498c50e31541</anchor>
      <arglist>(const char *objectFullPath, const char *keySuffixPattern) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cConfigurationReader</name>
    <filename>classomnetpp_1_1cConfigurationReader.html</filename>
    <class kind="class">omnetpp::cConfigurationReader::KeyValue</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cConfigurationReader</name>
      <anchorfile>classomnetpp_1_1cConfigurationReader.html</anchorfile>
      <anchor>a4f69d5972b6a651096671bbf054e471a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initializeFrom</name>
      <anchorfile>classomnetpp_1_1cConfigurationReader.html</anchorfile>
      <anchor>a0be3648e0b171e7f54422285de56de55</anchor>
      <arglist>(cConfiguration *bootConfig)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFileName</name>
      <anchorfile>classomnetpp_1_1cConfigurationReader.html</anchorfile>
      <anchor>ae029375c4f36cc1abf4fb90e398d5831</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getDefaultBaseDirectory</name>
      <anchorfile>classomnetpp_1_1cConfigurationReader.html</anchorfile>
      <anchor>a0020683e0fb8cb660cfa96fca0d7bdca</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumSections</name>
      <anchorfile>classomnetpp_1_1cConfigurationReader.html</anchorfile>
      <anchor>ad53f9dd22b3406ee84962be6b4497a8f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getSectionName</name>
      <anchorfile>classomnetpp_1_1cConfigurationReader.html</anchorfile>
      <anchor>a3ba710a0b6f9f530fcc324920587ae27</anchor>
      <arglist>(int sectionId) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumEntries</name>
      <anchorfile>classomnetpp_1_1cConfigurationReader.html</anchorfile>
      <anchor>a469cc2940f8f06d546a5aa290861b144</anchor>
      <arglist>(int sectionId) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const KeyValue &amp;</type>
      <name>getEntry</name>
      <anchorfile>classomnetpp_1_1cConfigurationReader.html</anchorfile>
      <anchor>adc0950a978380e84c8eb22c2edda337c</anchor>
      <arglist>(int sectionId, int entryId) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>dump</name>
      <anchorfile>classomnetpp_1_1cConfigurationReader.html</anchorfile>
      <anchor>a7a6a14a099a69ee446cf9017679bf52a</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cContextSwitcher</name>
    <filename>classomnetpp_1_1cContextSwitcher.html</filename>
    <member kind="function">
      <type></type>
      <name>cContextSwitcher</name>
      <anchorfile>classomnetpp_1_1cContextSwitcher.html</anchorfile>
      <anchor>a63164fafb28f3cd2a28d237c2eee1cdd</anchor>
      <arglist>(const cComponent *newContext)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cContextSwitcher</name>
      <anchorfile>classomnetpp_1_1cContextSwitcher.html</anchorfile>
      <anchor>a06bd75016e3c052f5f8b5e70ef2c511e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cContextTypeSwitcher</name>
    <filename>classomnetpp_1_1cContextTypeSwitcher.html</filename>
    <member kind="function">
      <type></type>
      <name>cContextTypeSwitcher</name>
      <anchorfile>classomnetpp_1_1cContextTypeSwitcher.html</anchorfile>
      <anchor>a103cc8bb9449708b8c75e40f56667d28</anchor>
      <arglist>(int contexttype)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cContextTypeSwitcher</name>
      <anchorfile>classomnetpp_1_1cContextTypeSwitcher.html</anchorfile>
      <anchor>ab4a637202a7ef423c186e962e9fb060e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cCoroutine</name>
    <filename>classomnetpp_1_1cCoroutine.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>setup</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>a5b906e3f42b51704bf60d4684a1afa87</anchor>
      <arglist>(CoroutineFnp fnp, void *arg, unsigned stackSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cCoroutine</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>a0611e7f68f7001071b85b2228864061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cCoroutine</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>a21c72f456f83c6fb55d837863f955707</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasStackOverflow</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>af273da78e599915a4fb714af87786bb5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>getStackSize</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>a194e299d9386bbefa7a3c20d1032c649</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>getStackUsage</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>aae71114e57a4ee0885ca15a4304be850</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>a0373cb8911ea30ed9eaf63f368020f55</anchor>
      <arglist>(unsigned totalStack, unsigned mainStack)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>switchTo</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>ae167b603e5e653a02cbed46c06d740b4</anchor>
      <arglist>(cCoroutine *cor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>switchToMain</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>a5ddd5a77d3fff9b54c0e97160dd07351</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>init</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>a0373cb8911ea30ed9eaf63f368020f55</anchor>
      <arglist>(unsigned totalStack, unsigned mainStack)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>switchTo</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>ae167b603e5e653a02cbed46c06d740b4</anchor>
      <arglist>(cCoroutine *cor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>switchToMain</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>a5ddd5a77d3fff9b54c0e97160dd07351</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setup</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>a5b906e3f42b51704bf60d4684a1afa87</anchor>
      <arglist>(CoroutineFnp fnp, void *arg, unsigned stackSize)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cCoroutine</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>a0611e7f68f7001071b85b2228864061c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cCoroutine</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>a21c72f456f83c6fb55d837863f955707</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasStackOverflow</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>af273da78e599915a4fb714af87786bb5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>getStackSize</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>a194e299d9386bbefa7a3c20d1032c649</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>getStackUsage</name>
      <anchorfile>classomnetpp_1_1cCoroutine.html</anchorfile>
      <anchor>aae71114e57a4ee0885ca15a4304be850</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cDatarateChannel</name>
    <filename>classomnetpp_1_1cDatarateChannel.html</filename>
    <base>omnetpp::cChannel</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>af00039aa20dc0292c0aa7148ae37ed29</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDelay</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a8379f7caae708756cd413c718d571093</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDatarate</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>ae7bb61b525d07321407c9fafd1ff13d5</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBitErrorRate</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>af4048cd7af2b6ecde21c49df4261b3b7</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPacketErrorRate</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>ac2550944936d4eec74acf4c7bd6d8903</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDisabled</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>aef710a87c755c60f47e3f3bb655e861e</anchor>
      <arglist>(bool d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getDelay</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a8ddc1ebb466e8ccd9454923b8b48c4a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDatarate</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>aec9e9b925f3175c57d124fc3e2c8f039</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBitErrorRate</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a44810174e054c524619716231d6a396b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPacketErrorRate</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>aacf4bf8e7f7a8f44dd5b807cddd73d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDisabled</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a596017b55824cee2080e4f7a38ff5a47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getNominalDatarate</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a6fad550c580a37726765499db9a2ae93</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>calculateDuration</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a7a1412953d747f4e9c46b21c5f3842be</anchor>
      <arglist>(cMessage *msg) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a2a33010b8eca90af45bf635604cf4d35</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBusy</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a64caf29219b831820033c69abca25309</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forceTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>af861f779937974d90cd5ffc24cbb672c</anchor>
      <arglist>(simtime_t t) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a93bf86397028a1470554607e94b31c08</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processMessage</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a4ef096427b3d225fd8e0a79518a104f2</anchor>
      <arglist>(cMessage *msg, simtime_t t, result_t &amp;result) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleParameterChange</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a32fae46a42035e2728e0b33397269cae</anchor>
      <arglist>(const char *parname) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a7a74c8d74ce75e855bb3e5f84e4dfaa1</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDatarateChannel</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a5905dd960cbdf26e57ce23c048fe078f</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDatarateChannel</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a6bad2fcfc7d581fdbcb8b6b107c673f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cDatarateChannel *</type>
      <name>create</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a4aedae32419b530b795fe3f8d475b8ea</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>af00039aa20dc0292c0aa7148ae37ed29</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDelay</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a8379f7caae708756cd413c718d571093</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDatarate</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>ae7bb61b525d07321407c9fafd1ff13d5</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBitErrorRate</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>af4048cd7af2b6ecde21c49df4261b3b7</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPacketErrorRate</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>ac2550944936d4eec74acf4c7bd6d8903</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDisabled</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>aef710a87c755c60f47e3f3bb655e861e</anchor>
      <arglist>(bool d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getDelay</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a8ddc1ebb466e8ccd9454923b8b48c4a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getDatarate</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>aec9e9b925f3175c57d124fc3e2c8f039</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBitErrorRate</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a44810174e054c524619716231d6a396b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPacketErrorRate</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>aacf4bf8e7f7a8f44dd5b807cddd73d99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDisabled</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a596017b55824cee2080e4f7a38ff5a47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getNominalDatarate</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a6fad550c580a37726765499db9a2ae93</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>calculateDuration</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a7a1412953d747f4e9c46b21c5f3842be</anchor>
      <arglist>(cMessage *msg) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a2a33010b8eca90af45bf635604cf4d35</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBusy</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a64caf29219b831820033c69abca25309</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forceTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>af861f779937974d90cd5ffc24cbb672c</anchor>
      <arglist>(simtime_t t) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a93bf86397028a1470554607e94b31c08</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processMessage</name>
      <anchorfile>classomnetpp_1_1cDatarateChannel.html</anchorfile>
      <anchor>a4ef096427b3d225fd8e0a79518a104f2</anchor>
      <arglist>(cMessage *msg, simtime_t t, result_t &amp;result) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cDefaultHistogramStrategy</name>
    <filename>classomnetpp_1_1cDefaultHistogramStrategy.html</filename>
    <base>omnetpp::cPrecollectionBasedHistogramStrategy</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cDefaultHistogramStrategy *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cDefaultHistogramStrategy.html</anchorfile>
      <anchor>ad77c467699dd69f31d9e2c4eaf7ff26b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cDefaultHistogramStrategy.html</anchorfile>
      <anchor>a3b715fbb1b1a0b5079591510e4015d0b</anchor>
      <arglist>(double value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collectWeighted</name>
      <anchorfile>classomnetpp_1_1cDefaultHistogramStrategy.html</anchorfile>
      <anchor>a26fb09e47da0aceac9ffdce8555864be</anchor>
      <arglist>(double value, double weight) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cDefaultHistogramStrategy.html</anchorfile>
      <anchor>a8ab0745de7fefce72d67f99f3931a3e4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cDefaultHistogramStrategy *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cDefaultHistogramStrategy.html</anchorfile>
      <anchor>ad77c467699dd69f31d9e2c4eaf7ff26b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cDefaultHistogramStrategy.html</anchorfile>
      <anchor>a3b715fbb1b1a0b5079591510e4015d0b</anchor>
      <arglist>(double value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collectWeighted</name>
      <anchorfile>classomnetpp_1_1cDefaultHistogramStrategy.html</anchorfile>
      <anchor>a26fb09e47da0aceac9ffdce8555864be</anchor>
      <arglist>(double value, double weight) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cDefaultHistogramStrategy.html</anchorfile>
      <anchor>a8ab0745de7fefce72d67f99f3931a3e4</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cDefaultList</name>
    <filename>classomnetpp_1_1cDefaultList.html</filename>
    <base>omnetpp::cNoncopyableOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cDefaultList</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a54ae8016bf4a8114be5879f44d218cf7</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDefaultList</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a2312c9aa63bc47d1328b5af4fe30b8b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSoftOwner</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>aa5298be7a432f44d1ab78ce9cf89d7a8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPerformFinalGC</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>ac7e7481f9c559282b2568bf04fecb45c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPerformFinalGC</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>aae7ee771e5ed3c49a8d79ec62c78bad3</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>defaultListSize</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a7c44deb29b48f5f8a35deaf87f54ea73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cOwnedObject *</type>
      <name>defaultListGet</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>ac2ada0ce144b32cba101f5fd0648290f</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>defaultListContains</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a488f3ccd37f50d97254c321c9e918e98</anchor>
      <arglist>(cOwnedObject *obj) const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>take</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a84fddeafbc9ff5b424526424c1d43388</anchor>
      <arglist>(cOwnedObject *obj) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>drop</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>aaf848f8ee6cda450b60b2452bd7815f3</anchor>
      <arglist>(cOwnedObject *obj) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>take</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a84fddeafbc9ff5b424526424c1d43388</anchor>
      <arglist>(cOwnedObject *obj) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>drop</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>aaf848f8ee6cda450b60b2452bd7815f3</anchor>
      <arglist>(cOwnedObject *obj) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDefaultList</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a54ae8016bf4a8114be5879f44d218cf7</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDefaultList</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a2312c9aa63bc47d1328b5af4fe30b8b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSoftOwner</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>aa5298be7a432f44d1ab78ce9cf89d7a8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getPerformFinalGC</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>ac7e7481f9c559282b2568bf04fecb45c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPerformFinalGC</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>aae7ee771e5ed3c49a8d79ec62c78bad3</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>defaultListSize</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a7c44deb29b48f5f8a35deaf87f54ea73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cOwnedObject *</type>
      <name>defaultListGet</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>ac2ada0ce144b32cba101f5fd0648290f</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>defaultListContains</name>
      <anchorfile>classomnetpp_1_1cDefaultList.html</anchorfile>
      <anchor>a488f3ccd37f50d97254c321c9e918e98</anchor>
      <arglist>(cOwnedObject *obj) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cDefaultMessagePrinter</name>
    <filename>classomnetpp_1_1cDefaultMessagePrinter.html</filename>
    <base>omnetpp::cMessagePrinter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getScoreFor</name>
      <anchorfile>classomnetpp_1_1cDefaultMessagePrinter.html</anchorfile>
      <anchor>af768ba39a7a16feb44d05d2d29a882f8</anchor>
      <arglist>(cMessage *msg) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::set&lt; std::string &gt;</type>
      <name>getSupportedTags</name>
      <anchorfile>classomnetpp_1_1cDefaultMessagePrinter.html</anchorfile>
      <anchor>a69eab1b7044240cf025006826382a730</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::set&lt; std::string &gt;</type>
      <name>getDefaultEnabledTags</name>
      <anchorfile>classomnetpp_1_1cDefaultMessagePrinter.html</anchorfile>
      <anchor>a4013dc1eb075b74b842466f39b262fa1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getColumnNames</name>
      <anchorfile>classomnetpp_1_1cDefaultMessagePrinter.html</anchorfile>
      <anchor>a3afff24fcfd8a70d7b826b947a6ce2e6</anchor>
      <arglist>(const Options *options) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printMessage</name>
      <anchorfile>classomnetpp_1_1cDefaultMessagePrinter.html</anchorfile>
      <anchor>ace6bf10a1cd8a469c8ca37f1e10005c0</anchor>
      <arglist>(std::ostream &amp;os, cMessage *msg, const Options *options) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cDelayChannel</name>
    <filename>classomnetpp_1_1cDelayChannel.html</filename>
    <base>omnetpp::cChannel</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>af00039aa20dc0292c0aa7148ae37ed29</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getNominalDatarate</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a6fad550c580a37726765499db9a2ae93</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>calculateDuration</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a7a1412953d747f4e9c46b21c5f3842be</anchor>
      <arglist>(cMessage *msg) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a2a33010b8eca90af45bf635604cf4d35</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBusy</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a64caf29219b831820033c69abca25309</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forceTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>af861f779937974d90cd5ffc24cbb672c</anchor>
      <arglist>(simtime_t t) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDelay</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a8379f7caae708756cd413c718d571093</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDisabled</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>aef710a87c755c60f47e3f3bb655e861e</anchor>
      <arglist>(bool d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getDelay</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a8ddc1ebb466e8ccd9454923b8b48c4a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDisabled</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a596017b55824cee2080e4f7a38ff5a47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a93bf86397028a1470554607e94b31c08</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processMessage</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a4ef096427b3d225fd8e0a79518a104f2</anchor>
      <arglist>(cMessage *msg, simtime_t t, result_t &amp;result) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleParameterChange</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a32fae46a42035e2728e0b33397269cae</anchor>
      <arglist>(const char *parname) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDelayChannel</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a3bfb565f78dbcffa848260be92578921</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDelayChannel</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>afbe0e0c23f9e0902103658c0c6db4316</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cDelayChannel *</type>
      <name>create</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a9bd41354488b8ff8a16143a12d4f3c4b</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>af00039aa20dc0292c0aa7148ae37ed29</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getNominalDatarate</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a6fad550c580a37726765499db9a2ae93</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>calculateDuration</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a7a1412953d747f4e9c46b21c5f3842be</anchor>
      <arglist>(cMessage *msg) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a2a33010b8eca90af45bf635604cf4d35</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBusy</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a64caf29219b831820033c69abca25309</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forceTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>af861f779937974d90cd5ffc24cbb672c</anchor>
      <arglist>(simtime_t t) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDelay</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a8379f7caae708756cd413c718d571093</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDisabled</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>aef710a87c755c60f47e3f3bb655e861e</anchor>
      <arglist>(bool d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getDelay</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a8ddc1ebb466e8ccd9454923b8b48c4a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isDisabled</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a596017b55824cee2080e4f7a38ff5a47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a93bf86397028a1470554607e94b31c08</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processMessage</name>
      <anchorfile>classomnetpp_1_1cDelayChannel.html</anchorfile>
      <anchor>a4ef096427b3d225fd8e0a79518a104f2</anchor>
      <arglist>(cMessage *msg, simtime_t t, result_t &amp;result) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cDeleteModuleException</name>
    <filename>classomnetpp_1_1cDeleteModuleException.html</filename>
    <base>omnetpp::cException</base>
    <member kind="function">
      <type></type>
      <name>cDeleteModuleException</name>
      <anchorfile>classomnetpp_1_1cDeleteModuleException.html</anchorfile>
      <anchor>a47287e4a309e20e600319fe7ea32d3f0</anchor>
      <arglist>(cModule *toDelete)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDeleteModuleException</name>
      <anchorfile>classomnetpp_1_1cDeleteModuleException.html</anchorfile>
      <anchor>a1435bac08c8ae9177d6e601f62358f12</anchor>
      <arglist>(const cDeleteModuleException &amp;e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cDeleteModuleException *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cDeleteModuleException.html</anchorfile>
      <anchor>a70f5aa6087077e5bf8ce10499a6adbc8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getModuleToDelete</name>
      <anchorfile>classomnetpp_1_1cDeleteModuleException.html</anchorfile>
      <anchor>abb49052b5f659d564d9399881c85dec5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isError</name>
      <anchorfile>classomnetpp_1_1cDeleteModuleException.html</anchorfile>
      <anchor>ad9b0bf983020b113eb43bded6e480887</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cDisplayString</name>
    <filename>classomnetpp_1_1cDisplayString.html</filename>
    <member kind="function">
      <type></type>
      <name>cDisplayString</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>ac7188b7ded5cad79f25b99eb2eb8ebbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDisplayString</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a42446be9b2f8ae8a22be2fab6dd6fdb8</anchor>
      <arglist>(const char *dispstr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDisplayString</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a76b866eb5152392258bfff1dcfb54070</anchor>
      <arglist>(const cDisplayString &amp;ds)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cDisplayString</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>aebaf78e62ec56f567726b553f25a9997</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cDisplayString &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a09f40799cbd4dc18e8d27818ab65cc48</anchor>
      <arglist>(const cDisplayString &amp;ds)</arglist>
    </member>
    <member kind="function">
      <type>cDisplayString &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a7c637cd3079e4b85ab4780d572e978c7</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>af4e65277e4f9ecbe4f7cd87ab63be71e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a407bc8f5a2d66b6661f8addaf7674bf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a9fbbd810e16e381fbb9770919ec460d5</anchor>
      <arglist>(const char *displaystr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a868491f1bb3085364a28cf3b8cc315f0</anchor>
      <arglist>(const char *displaystr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateWith</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>aace213fe84c8e3ec070b21611eb1a27e</anchor>
      <arglist>(const cDisplayString &amp;ds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateWith</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>acb21aadd8e682967e97b930388bc5bdd</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsTag</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a64a2c9df99a052f696aed1b8a3eb9dde</anchor>
      <arglist>(const char *tagname) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumArgs</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a39828cac2664522c3a006538dcc978c4</anchor>
      <arglist>(const char *tagname) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTagArg</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a8f5a7afac2d0aff1213f9196c6579b7b</anchor>
      <arglist>(const char *tagname, int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setTagArg</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>ab617f89477d545643327a1dbd3b0ea50</anchor>
      <arglist>(const char *tagname, int index, const char *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setTagArg</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a6365fce5a40a7a7c595772b7d229dcfc</anchor>
      <arglist>(const char *tagname, int index, long value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeTag</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a7f837c1d1ec4505c7d1cd663e918eee3</anchor>
      <arglist>(const char *tagname)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTags</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>acbf927a8f40c624b44aa3622b710241a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTagName</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a81907db0156d4e89784ddac10b5b995b</anchor>
      <arglist>(int tagindex) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTagIndex</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>aad5dd06a40615f8f96fe6128be170bb5</anchor>
      <arglist>(const char *tagname) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumArgs</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a56bdd22693d6ad399eee2889210ec6be</anchor>
      <arglist>(int tagindex) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTagArg</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a20d37d4544fa8958fd90aa4eb6065e4f</anchor>
      <arglist>(int tagindex, int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setTagArg</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>afb324bf6a9ae14fc7c3809759f9ca7a0</anchor>
      <arglist>(int tagindex, int index, const char *value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insertTag</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>ac74e53edc2bfddf5483af77cf269a5d6</anchor>
      <arglist>(const char *tagname, int atindex=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeTag</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a780fa758b55c3f637ef92c8e69e134cd</anchor>
      <arglist>(int tagindex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDisplayString</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>ac7188b7ded5cad79f25b99eb2eb8ebbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDisplayString</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a42446be9b2f8ae8a22be2fab6dd6fdb8</anchor>
      <arglist>(const char *dispstr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDisplayString</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a76b866eb5152392258bfff1dcfb54070</anchor>
      <arglist>(const cDisplayString &amp;ds)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cDisplayString</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>aebaf78e62ec56f567726b553f25a9997</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cDisplayString &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a09f40799cbd4dc18e8d27818ab65cc48</anchor>
      <arglist>(const cDisplayString &amp;ds)</arglist>
    </member>
    <member kind="function">
      <type>cDisplayString &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a7c637cd3079e4b85ab4780d572e978c7</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>af4e65277e4f9ecbe4f7cd87ab63be71e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a407bc8f5a2d66b6661f8addaf7674bf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a9fbbd810e16e381fbb9770919ec460d5</anchor>
      <arglist>(const char *displaystr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a868491f1bb3085364a28cf3b8cc315f0</anchor>
      <arglist>(const char *displaystr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateWith</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>aace213fe84c8e3ec070b21611eb1a27e</anchor>
      <arglist>(const cDisplayString &amp;ds)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateWith</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>acb21aadd8e682967e97b930388bc5bdd</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsTag</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a64a2c9df99a052f696aed1b8a3eb9dde</anchor>
      <arglist>(const char *tagname) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumArgs</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a39828cac2664522c3a006538dcc978c4</anchor>
      <arglist>(const char *tagname) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTagArg</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a8f5a7afac2d0aff1213f9196c6579b7b</anchor>
      <arglist>(const char *tagname, int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setTagArg</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>ab617f89477d545643327a1dbd3b0ea50</anchor>
      <arglist>(const char *tagname, int index, const char *value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setTagArg</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a6365fce5a40a7a7c595772b7d229dcfc</anchor>
      <arglist>(const char *tagname, int index, long value)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeTag</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a7f837c1d1ec4505c7d1cd663e918eee3</anchor>
      <arglist>(const char *tagname)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumTags</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>acbf927a8f40c624b44aa3622b710241a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTagName</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a81907db0156d4e89784ddac10b5b995b</anchor>
      <arglist>(int tagindex) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTagIndex</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>aad5dd06a40615f8f96fe6128be170bb5</anchor>
      <arglist>(const char *tagname) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumArgs</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a56bdd22693d6ad399eee2889210ec6be</anchor>
      <arglist>(int tagindex) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getTagArg</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a20d37d4544fa8958fd90aa4eb6065e4f</anchor>
      <arglist>(int tagindex, int index) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>setTagArg</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>afb324bf6a9ae14fc7c3809759f9ca7a0</anchor>
      <arglist>(int tagindex, int index, const char *value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insertTag</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>ac74e53edc2bfddf5483af77cf269a5d6</anchor>
      <arglist>(const char *tagname, int atindex=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeTag</name>
      <anchorfile>classomnetpp_1_1cDisplayString.html</anchorfile>
      <anchor>a780fa758b55c3f637ef92c8e69e134cd</anchor>
      <arglist>(int tagindex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cDoubleHistogram</name>
    <filename>classomnetpp_1_1cDoubleHistogram.html</filename>
    <base>omnetpp::cLegacyHistogram</base>
    <member kind="function">
      <type></type>
      <name>cDoubleHistogram</name>
      <anchorfile>classomnetpp_1_1cDoubleHistogram.html</anchorfile>
      <anchor>a391fd4c5bc280b65ecf6351b97c5f952</anchor>
      <arglist>(const cDoubleHistogram &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDoubleHistogram</name>
      <anchorfile>classomnetpp_1_1cDoubleHistogram.html</anchorfile>
      <anchor>a36e980a48c21461c27abb0c46c661e12</anchor>
      <arglist>(const char *name=nullptr, int numcells=-1, bool weighted=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDoubleHistogram</name>
      <anchorfile>classomnetpp_1_1cDoubleHistogram.html</anchorfile>
      <anchor>a8a2f78fff2f3e07f1a68965f907b76d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cDoubleHistogram &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDoubleHistogram.html</anchorfile>
      <anchor>a81d9e6326d9b0ae61b5c2b26ce397d7d</anchor>
      <arglist>(const cDoubleHistogram &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cDoubleHistogram *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cDoubleHistogram.html</anchorfile>
      <anchor>a9be06799086cc7241fc78ec58bd3a38f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDoubleHistogram</name>
      <anchorfile>classomnetpp_1_1cDoubleHistogram.html</anchorfile>
      <anchor>a391fd4c5bc280b65ecf6351b97c5f952</anchor>
      <arglist>(const cDoubleHistogram &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDoubleHistogram</name>
      <anchorfile>classomnetpp_1_1cDoubleHistogram.html</anchorfile>
      <anchor>a36e980a48c21461c27abb0c46c661e12</anchor>
      <arglist>(const char *name=nullptr, int numcells=-1, bool weighted=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDoubleHistogram</name>
      <anchorfile>classomnetpp_1_1cDoubleHistogram.html</anchorfile>
      <anchor>a8a2f78fff2f3e07f1a68965f907b76d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cDoubleHistogram &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDoubleHistogram.html</anchorfile>
      <anchor>a81d9e6326d9b0ae61b5c2b26ce397d7d</anchor>
      <arglist>(const cDoubleHistogram &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cDoubleHistogram *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cDoubleHistogram.html</anchorfile>
      <anchor>a9be06799086cc7241fc78ec58bd3a38f</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cDoubleParImpl</name>
    <filename>classomnetpp_1_1cDoubleParImpl.html</filename>
    <base>omnetpp::cParImpl</base>
    <member kind="function">
      <type></type>
      <name>cDoubleParImpl</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a4c27602efd5eba459a70fe786e8ac6da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDoubleParImpl</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a297d5f464e523042142a8db3c535a607</anchor>
      <arglist>(const cDoubleParImpl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDoubleParImpl</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a9395ae4676d6fa4452ee6d07e4380d0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a3256add573b422bb71dddc83ce95bf66</anchor>
      <arglist>(const cDoubleParImpl &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cDoubleParImpl *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>afa9faf795d8e6726738dba6c5071c42c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>ae6d272d4af05edaa7725ad60b1ec2104</anchor>
      <arglist>(bool b) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIntValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a588e175407a2d81f79cec520e7044d20</anchor>
      <arglist>(intpar_t l) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a45f547947e811beaeec71863a1675ba1</anchor>
      <arglist>(double d) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a9e63a9930c4106d99ab35a8645698a27</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a0abe99195e911d2173519bf8064f5af2</anchor>
      <arglist>(cXMLElement *node) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a80af423d87336c25c28fe91e6bac674b</anchor>
      <arglist>(cExpression *e) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>aaed8a179966631fb8c64b1f963d0b685</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual intpar_t</type>
      <name>intValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>ac2b650859b0d6cc642bd26aa6af780ff</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a3438e6138743a93a08dde61c9411c711</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>af3bb05e9109c2f97e71d71e60548a1e4</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a7d0617a09188f05593e7036a73723857</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a6b6dfe5cc802e0a3a971ed99d8908d95</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a5f09bfa40706213278e1ea6a6e4a8d69</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>af4400fbe676882b9264a856cf952559c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>af862a39478bb95377b2734d86a30083b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>convertToConst</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a57c1d4c81cdb80b4bc12201a1a804c53</anchor>
      <arglist>(cComponent *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>ac880f5e94434ade08fbe54634fe95378</anchor>
      <arglist>(const char *text) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a9ed037b0e3f46f4d1d4d0f44041adf45</anchor>
      <arglist>(const cParImpl *other) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDoubleParImpl</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a4c27602efd5eba459a70fe786e8ac6da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDoubleParImpl</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a297d5f464e523042142a8db3c535a607</anchor>
      <arglist>(const cDoubleParImpl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDoubleParImpl</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a9395ae4676d6fa4452ee6d07e4380d0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a3256add573b422bb71dddc83ce95bf66</anchor>
      <arglist>(const cDoubleParImpl &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cDoubleParImpl *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>afa9faf795d8e6726738dba6c5071c42c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>ae6d272d4af05edaa7725ad60b1ec2104</anchor>
      <arglist>(bool b) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIntValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a588e175407a2d81f79cec520e7044d20</anchor>
      <arglist>(intpar_t l) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a45f547947e811beaeec71863a1675ba1</anchor>
      <arglist>(double d) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a9e63a9930c4106d99ab35a8645698a27</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a0abe99195e911d2173519bf8064f5af2</anchor>
      <arglist>(cXMLElement *node) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a80af423d87336c25c28fe91e6bac674b</anchor>
      <arglist>(cExpression *e) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>aaed8a179966631fb8c64b1f963d0b685</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual intpar_t</type>
      <name>intValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>ac2b650859b0d6cc642bd26aa6af780ff</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a3438e6138743a93a08dde61c9411c711</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>af3bb05e9109c2f97e71d71e60548a1e4</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a7d0617a09188f05593e7036a73723857</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a6b6dfe5cc802e0a3a971ed99d8908d95</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a5f09bfa40706213278e1ea6a6e4a8d69</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>af4400fbe676882b9264a856cf952559c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>af862a39478bb95377b2734d86a30083b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>convertToConst</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a57c1d4c81cdb80b4bc12201a1a804c53</anchor>
      <arglist>(cComponent *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>ac880f5e94434ade08fbe54634fe95378</anchor>
      <arglist>(const char *text) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cDoubleParImpl.html</anchorfile>
      <anchor>a9ed037b0e3f46f4d1d4d0f44041adf45</anchor>
      <arglist>(const cParImpl *other) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cDynamicExpression</name>
    <filename>classomnetpp_1_1cDynamicExpression.html</filename>
    <base>omnetpp::cExpression</base>
    <class kind="class">omnetpp::cDynamicExpression::Elem</class>
    <class kind="class">omnetpp::cDynamicExpression::Functor</class>
    <member kind="enumeration">
      <type></type>
      <name>OpType</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>aa1aa1c6a8f3bbed5b167bc2d4511b969</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDynamicExpression</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>ac53061fc453bee6909ee01f4647b7588</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDynamicExpression</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>ab1afc3e7dbea916957c62f3dc5e24b91</anchor>
      <arglist>(const cDynamicExpression &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDynamicExpression</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a9f789279e8ef6318ba18f0cbb75a5b9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cDynamicExpression &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a03fc282f6ded53ded9abfe2812695b7b</anchor>
      <arglist>(const cDynamicExpression &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cDynamicExpression *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>ab9f7e69985cfa8da17d9e9becb81617e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>afcca117215da32234b4907136ed775bd</anchor>
      <arglist>(Elem e[], int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cNedValue</type>
      <name>evaluate</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a7ade4e01b13dd7f5c6078d6f16be4b90</anchor>
      <arglist>(Context *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>aff0ecefd41ba99464cfe92a132ab5cc3</anchor>
      <arglist>(Context *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual intpar_t</type>
      <name>intValue</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a52eeb4314a23b611da97b99ecdd3fe5f</anchor>
      <arglist>(Context *context, const char *expectedUnit=nullptr) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a6f8ae4d8bb90ed3f13ac0a717b02a437</anchor>
      <arglist>(Context *context, const char *expectedUnit=nullptr) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>ac6a26f46f60dab52fc33e32653265fe9</anchor>
      <arglist>(Context *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a19323d5202e96420a8b6c7c9c1128fae</anchor>
      <arglist>(Context *context) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDynamicExpression</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>ac53061fc453bee6909ee01f4647b7588</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cDynamicExpression</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>ab1afc3e7dbea916957c62f3dc5e24b91</anchor>
      <arglist>(const cDynamicExpression &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cDynamicExpression</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a9f789279e8ef6318ba18f0cbb75a5b9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cDynamicExpression &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a03fc282f6ded53ded9abfe2812695b7b</anchor>
      <arglist>(const cDynamicExpression &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cDynamicExpression *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>ab9f7e69985cfa8da17d9e9becb81617e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>afcca117215da32234b4907136ed775bd</anchor>
      <arglist>(Elem e[], int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cNedValue</type>
      <name>evaluate</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a7ade4e01b13dd7f5c6078d6f16be4b90</anchor>
      <arglist>(Context *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>aff0ecefd41ba99464cfe92a132ab5cc3</anchor>
      <arglist>(Context *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual intpar_t</type>
      <name>intValue</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a52eeb4314a23b611da97b99ecdd3fe5f</anchor>
      <arglist>(Context *context, const char *expectedUnit=nullptr) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a6f8ae4d8bb90ed3f13ac0a717b02a437</anchor>
      <arglist>(Context *context, const char *expectedUnit=nullptr) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>ac6a26f46f60dab52fc33e32653265fe9</anchor>
      <arglist>(Context *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a19323d5202e96420a8b6c7c9c1128fae</anchor>
      <arglist>(Context *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>ac880f5e94434ade08fbe54634fe95378</anchor>
      <arglist>(const char *text) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a423203898bb6865f0bd2f8335e8bb9d1</anchor>
      <arglist>(const cExpression *other) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isAConstant</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a6efade9c41ed88347b7cb0b8cf72f9a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsConstSubexpressions</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a85a9fec712e6a5e69ffd76a05623637e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluateConstSubexpressions</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a4d009bfbea196476906f1fa3751c3528</anchor>
      <arglist>(Context *context) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>convertUnit</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression.html</anchorfile>
      <anchor>a44cc255a4b41c3baea2dad147e288a78</anchor>
      <arglist>(double d, const char *unit, const char *targetUnit)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cEnum</name>
    <filename>classomnetpp_1_1cEnum.html</filename>
    <base>omnetpp::cOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cEnum</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a561148a563851d3aaf7f3f6c4a52b9b1</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cEnum</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>af66cbac13dd29d4ce4df52e8edd0ac36</anchor>
      <arglist>(const char *name, const char *str,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cEnum</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a4287a073832adaf46badca65ef58fb7b</anchor>
      <arglist>(const cEnum &amp;cenum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cEnum</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a6315b0752f8d7926dc3e58635898f21e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cEnum &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a174cf2d40af7c48fdeff27801623ab91</anchor>
      <arglist>(const cEnum &amp;list)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEnum *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>ae6db1f8035f6eef9e330733c25411c3a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a27d455ca85908877759d556c6597bc8d</anchor>
      <arglist>(int value, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bulkInsert</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a1d160ee27f9fb163c0af493496c03ab6</anchor>
      <arglist>(const char *name1,...)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getStringFor</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>af14ab71a2f175b24c90d99bcad416b98</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lookup</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a3e6b92b9cd0febe41797e342ef6e0b7c</anchor>
      <arglist>(const char *name, int fallback=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resolve</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a9491099daedd8826b5aa9068f432a6c0</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, int &gt;</type>
      <name>getNameValueMap</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>ac3c17ec1e57e2d5e7224dcd42ffe4233</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cEnum *</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>ad8c4fd4a19b9e3c90d9257d7ebd9dc64</anchor>
      <arglist>(const char *enumName, const char *contextNamespace=nullptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cEnum *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>af62fcf61aedfeb3b5bb65ff8f2a6e7b0</anchor>
      <arglist>(const char *enumName, const char *contextNamespace=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cEnum</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a561148a563851d3aaf7f3f6c4a52b9b1</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cEnum</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>af66cbac13dd29d4ce4df52e8edd0ac36</anchor>
      <arglist>(const char *name, const char *str,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cEnum</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a4287a073832adaf46badca65ef58fb7b</anchor>
      <arglist>(const cEnum &amp;cenum)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cEnum</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a6315b0752f8d7926dc3e58635898f21e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cEnum &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a174cf2d40af7c48fdeff27801623ab91</anchor>
      <arglist>(const cEnum &amp;list)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEnum *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>ae6db1f8035f6eef9e330733c25411c3a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a27d455ca85908877759d556c6597bc8d</anchor>
      <arglist>(int value, const char *name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bulkInsert</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a1d160ee27f9fb163c0af493496c03ab6</anchor>
      <arglist>(const char *name1,...)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getStringFor</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>af14ab71a2f175b24c90d99bcad416b98</anchor>
      <arglist>(int value)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>lookup</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a3e6b92b9cd0febe41797e342ef6e0b7c</anchor>
      <arglist>(const char *name, int fallback=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>resolve</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>a9491099daedd8826b5aa9068f432a6c0</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, int &gt;</type>
      <name>getNameValueMap</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>ac3c17ec1e57e2d5e7224dcd42ffe4233</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cEnum *</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>ad8c4fd4a19b9e3c90d9257d7ebd9dc64</anchor>
      <arglist>(const char *enumName, const char *contextNamespace=nullptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cEnum *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cEnum.html</anchorfile>
      <anchor>af62fcf61aedfeb3b5bb65ff8f2a6e7b0</anchor>
      <arglist>(const char *enumName, const char *contextNamespace=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cEnvir</name>
    <filename>classomnetpp_1_1cEnvir.html</filename>
    <member kind="function">
      <type></type>
      <name>cEnvir</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ad5b6c9aca7cccab7ff739f23b9a5eafa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cEnvir</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a205ff0da6955bdba3ea794f9c72f9c59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>objectDeleted</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a0115bf48e9f5530f0983cdead07d3764</anchor>
      <arglist>(cObject *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>componentInitBegin</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ae58d654d230b6d864cf7dfe63d6175f4</anchor>
      <arglist>(cComponent *component, int stage)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>simulationEvent</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a19247e2b26f41e9cc1eba80a2d127b09</anchor>
      <arglist>(cEvent *event)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageScheduled</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>af181f35b3bdb5b8039ef0f3537a9f421</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageCancelled</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a2fc540cb60ff2d27024df373806d7f1e</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>beginSend</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a5bc17b175a83b8ce66b185d7ea058954</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageSendDirect</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a28213e378a39f302257005a8bc0dac44</anchor>
      <arglist>(cMessage *msg, cGate *toGate, simtime_t propagationDelay, simtime_t transmissionDelay)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageSendHop</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a291c3abd9879995b251048b7b05800c6</anchor>
      <arglist>(cMessage *msg, cGate *srcGate)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageSendHop</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a6f2c1b0491e794e66995af398de6513f</anchor>
      <arglist>(cMessage *msg, cGate *srcGate, simtime_t propagationDelay, simtime_t transmissionDelay, bool discard)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endSend</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ac7402a31fef42ae7e01bc48c8614ae69</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageCreated</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>acf785aa6a32b53dbf160a26164f908aa</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageCloned</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a5fdaaeefd778192d21ba7c57b908ea1f</anchor>
      <arglist>(cMessage *msg, cMessage *clone)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageDeleted</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>adad7f5e9833eb9e960c1b4204500a286</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>moduleReparented</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>aaad45e02feb9927b4b8fec863eeaa154</anchor>
      <arglist>(cModule *module, cModule *oldparent, int oldId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>componentMethodBegin</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a921dc95d8cebbdff765fa5372c6e3d7c</anchor>
      <arglist>(cComponent *from, cComponent *to, const char *methodFmt, va_list va, bool silent)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>componentMethodEnd</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a356a1fa0096b200dee2a56b77071b466</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>moduleCreated</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a3b6427ab1a8c98dc8ebaa42a3ba9fe1f</anchor>
      <arglist>(cModule *newmodule)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>moduleDeleted</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>af76c25b86760ac92290e8bda37f4c9a9</anchor>
      <arglist>(cModule *module)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>gateCreated</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a98d871412024c715efbad7c7bad848f8</anchor>
      <arglist>(cGate *newgate)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>gateDeleted</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a6beea8772ffc08eb3b89d227c389d62f</anchor>
      <arglist>(cGate *gate)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>connectionCreated</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>abefe7cb988c214c468ae6ffd413d254b</anchor>
      <arglist>(cGate *srcgate)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>connectionDeleted</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a79349c08f37502d5080b154dcce3f183</anchor>
      <arglist>(cGate *srcgate)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>displayStringChanged</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>aade0907fecc282c852954825b98f7387</anchor>
      <arglist>(cComponent *component)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>undisposedObject</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a3f6184b69af711fbd8b3c5527ab57fd3</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getCurrentEventName</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a21a2a2167ff1a5f350f686242906066b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getCurrentEventClassName</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a4cbbd8416e8d13df73d93851b13eee6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getCurrentEventModule</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a3dd07d1a10dafa1a4ab6ceb86c235db1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>preconfigure</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a2b11c1e456beb8324eec7795ccf5738b</anchor>
      <arglist>(cComponent *component)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>configure</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ae8b0c547a791ff52285a7c7d1da456fb</anchor>
      <arglist>(cComponent *component)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>readParameter</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a08d934443f2d8c0f00469e61125bf53b</anchor>
      <arglist>(cPar *parameter)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isModuleLocal</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ab9dc76891ba4db0c3aca3ca6fe8ab8b1</anchor>
      <arglist>(cModule *parentmod, const char *modname, int index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cXMLElement *</type>
      <name>getXMLDocument</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ad24ee6cee9afef58728be09fcafaa323</anchor>
      <arglist>(const char *filename, const char *xpath=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cXMLElement *</type>
      <name>getParsedXMLString</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ad9fd63316e364a1f8787134282cb748c</anchor>
      <arglist>(const char *content, const char *xpath=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>forgetXMLDocument</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>aa95d6fbdcb2424087a88c7e9d74407af</anchor>
      <arglist>(const char *filename)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>forgetParsedXMLString</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a78ea72a94ab03ed4cf7cd5fbe93f5c5e</anchor>
      <arglist>(const char *content)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flushXMLDocumentCache</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a6f5476a6759b90e53c8d23d7eaaf2038</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flushXMLParsedContentCache</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a0686a65f9b012ea6d56c880a170b64d2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned</type>
      <name>getExtraStackForEnvir</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>af9f554725dd84c22e9019a7702c73b2b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cConfiguration *</type>
      <name>getConfig</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a1ced2dca00249df63d6a184d711600f0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cConfigurationEx *</type>
      <name>getConfigEx</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ad44c47726e7e8487a0e5dff0d66ce2cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>resolveResourcePath</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a3912720b86980f5beb0972173aefab6f</anchor>
      <arglist>(const char *fileName, cComponentType *context=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isGUI</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ac62df22e8ca3af0eb6b9bd57eb7070a0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLoggingEnabled</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a3f79203e0c4015b9a5500090d9ce556f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isExpressMode</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a43dc46ec83dab2021b9421c0c0147123</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>bubble</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>abcb58867fe98018b3155c3f5aa22203c</anchor>
      <arglist>(cComponent *component, const char *text)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>log</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ac56c39b2f2c905218117cba57d17c6ca</anchor>
      <arglist>(cLogEntry *entry)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>alert</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a401a0ebaf5dcc7f5aeb71b0084e57f05</anchor>
      <arglist>(const char *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printfmsg</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ac8c95ae05234fcbb62033972fcdb0080</anchor>
      <arglist>(const char *fmt,...)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>gets</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a11e36bfad3d747a49dd2cc7d2b213fee</anchor>
      <arglist>(const char *prompt, const char *defaultReply=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>askYesNo</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a0c04b87b990c8d31c5366ae04b0a0299</anchor>
      <arglist>(const char *prompt)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getImageSize</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>aa550ee7b3e57d730a455de16df78b7ce</anchor>
      <arglist>(const char *imageName, double &amp;outWidth, double &amp;outHeight)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getTextExtent</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a2a68bac92a412643ff216f3761023355</anchor>
      <arglist>(const cFigure::Font &amp;font, const char *text, double &amp;outWidth, double &amp;outHeight, double &amp;outAscent)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>appendToImagePath</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>aded68c01d4db78668b90f6b4dbad5750</anchor>
      <arglist>(const char *directory)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>loadImage</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a54d3bcbf0879b836e93573c446c5eb3a</anchor>
      <arglist>(const char *fileName, const char *imageName=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cFigure::Rectangle</type>
      <name>getSubmoduleBounds</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a9c16e0b3c8e31eb6f719f15ae6b99864</anchor>
      <arglist>(const cModule *submodule)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getZoomLevel</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ae225a0db85736e63079fbeef3a343099</anchor>
      <arglist>(const cModule *module)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getAnimationTime</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a4e2a4b863c4325a18fa9fa77895399f3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getAnimationSpeed</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a2322f988ca5ff0313031d9e75cbb340a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getRemainingAnimationHoldTime</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>af968021f9de4408a8fe7469cf684edcf</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumRNGs</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>aab21113f9b66f87a4f82683345ad9871</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cRNG *</type>
      <name>getRNG</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a569accfb1d607678fdcdfd840f91538d</anchor>
      <arglist>(int k)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>registerOutputVector</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>af5ef5b4f034266a532a5f1f9c2c3d87b</anchor>
      <arglist>(const char *modulename, const char *vectorname)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>deregisterOutputVector</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a02c87433d6d5da29341ad7e06ea822e4</anchor>
      <arglist>(void *vechandle)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setVectorAttribute</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>af32389e8e2d4b720a4b9849a5021f508</anchor>
      <arglist>(void *vechandle, const char *name, const char *value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>recordInOutputVector</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a08a55d093b78085ee7bd33fb2a3f1bc5</anchor>
      <arglist>(void *vechandle, simtime_t t, double value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recordScalar</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a146cd0fd58bf0c3b8229f8f1d9539754</anchor>
      <arglist>(cComponent *component, const char *name, double value, opp_string_map *attributes=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recordStatistic</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>adc729620384c00f93f3c3b6c030371b8</anchor>
      <arglist>(cComponent *component, const char *name, cStatistic *statistic, opp_string_map *attributes=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addResultRecorders</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a7d5a4007579fbaea8cd60b81b8285651</anchor>
      <arglist>(cComponent *component, simsignal_t signal, const char *statisticName, cProperty *statisticTemplateProperty)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::ostream *</type>
      <name>getStreamForSnapshot</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>aa4a27a22e8c9b9e35912fd6e26b1fc55</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>releaseStreamForSnapshot</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>aad78c37d423020e93ffc850e36c5182a</anchor>
      <arglist>(std::ostream *os)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getArgCount</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a7007326f572ee57504c023d27e0f9689</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char **</type>
      <name>getArgVector</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a46679df2a00628ffb233f7143415f337</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getParsimProcId</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ac6db6404686d760d6d121d7aaa267455</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getParsimNumPartitions</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a4b918cd14ddc3b871478a95f72946f81</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned long</type>
      <name>getUniqueNumber</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>aa8a93059999a0d664065475d354cc736</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>refOsgNode</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ac7f556f26b585e5acc8b0cc2acb40412</anchor>
      <arglist>(osg::Node *scene)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unrefOsgNode</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a3897f6eaa037d756d8fa3cdecbfdf8c0</anchor>
      <arglist>(osg::Node *scene)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>idle</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a55c1024cf95ca111eba73c77bf051377</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>ensureDebugger</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a4b8bcc89846f5e265b7246534e002054</anchor>
      <arglist>(cRuntimeError *error=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addLifecycleListener</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a715f6c80da5fc9cd818f049df943ba87</anchor>
      <arglist>(cISimulationLifecycleListener *listener)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>removeLifecycleListener</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a586810ea68f851727a476a6525f1237c</anchor>
      <arglist>(cISimulationLifecycleListener *listener)=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cEnvir</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ad5b6c9aca7cccab7ff739f23b9a5eafa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cEnvir</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a205ff0da6955bdba3ea794f9c72f9c59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>objectDeleted</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a0115bf48e9f5530f0983cdead07d3764</anchor>
      <arglist>(cObject *object)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>componentInitBegin</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ae58d654d230b6d864cf7dfe63d6175f4</anchor>
      <arglist>(cComponent *component, int stage)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>simulationEvent</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a19247e2b26f41e9cc1eba80a2d127b09</anchor>
      <arglist>(cEvent *event)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageScheduled</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>af181f35b3bdb5b8039ef0f3537a9f421</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageCancelled</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a2fc540cb60ff2d27024df373806d7f1e</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>beginSend</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a5bc17b175a83b8ce66b185d7ea058954</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageSendDirect</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a28213e378a39f302257005a8bc0dac44</anchor>
      <arglist>(cMessage *msg, cGate *toGate, simtime_t propagationDelay, simtime_t transmissionDelay)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageSendHop</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a291c3abd9879995b251048b7b05800c6</anchor>
      <arglist>(cMessage *msg, cGate *srcGate)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageSendHop</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a6f2c1b0491e794e66995af398de6513f</anchor>
      <arglist>(cMessage *msg, cGate *srcGate, simtime_t propagationDelay, simtime_t transmissionDelay, bool discard)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endSend</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ac7402a31fef42ae7e01bc48c8614ae69</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageCreated</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>acf785aa6a32b53dbf160a26164f908aa</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageCloned</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a5fdaaeefd778192d21ba7c57b908ea1f</anchor>
      <arglist>(cMessage *msg, cMessage *clone)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>messageDeleted</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>adad7f5e9833eb9e960c1b4204500a286</anchor>
      <arglist>(cMessage *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>moduleReparented</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>aaad45e02feb9927b4b8fec863eeaa154</anchor>
      <arglist>(cModule *module, cModule *oldparent, int oldId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>componentMethodBegin</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a921dc95d8cebbdff765fa5372c6e3d7c</anchor>
      <arglist>(cComponent *from, cComponent *to, const char *methodFmt, va_list va, bool silent)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>componentMethodEnd</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a356a1fa0096b200dee2a56b77071b466</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>moduleCreated</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a3b6427ab1a8c98dc8ebaa42a3ba9fe1f</anchor>
      <arglist>(cModule *newmodule)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>moduleDeleted</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>af76c25b86760ac92290e8bda37f4c9a9</anchor>
      <arglist>(cModule *module)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>gateCreated</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a98d871412024c715efbad7c7bad848f8</anchor>
      <arglist>(cGate *newgate)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>gateDeleted</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a6beea8772ffc08eb3b89d227c389d62f</anchor>
      <arglist>(cGate *gate)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>connectionCreated</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>abefe7cb988c214c468ae6ffd413d254b</anchor>
      <arglist>(cGate *srcgate)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>connectionDeleted</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a79349c08f37502d5080b154dcce3f183</anchor>
      <arglist>(cGate *srcgate)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>displayStringChanged</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>aade0907fecc282c852954825b98f7387</anchor>
      <arglist>(cComponent *component)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>undisposedObject</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a3f6184b69af711fbd8b3c5527ab57fd3</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getCurrentEventName</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a21a2a2167ff1a5f350f686242906066b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getCurrentEventClassName</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a4cbbd8416e8d13df73d93851b13eee6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getCurrentEventModule</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a3dd07d1a10dafa1a4ab6ceb86c235db1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>preconfigure</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a2b11c1e456beb8324eec7795ccf5738b</anchor>
      <arglist>(cComponent *component)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>configure</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ae8b0c547a791ff52285a7c7d1da456fb</anchor>
      <arglist>(cComponent *component)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>readParameter</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a08d934443f2d8c0f00469e61125bf53b</anchor>
      <arglist>(cPar *parameter)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isModuleLocal</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ab9dc76891ba4db0c3aca3ca6fe8ab8b1</anchor>
      <arglist>(cModule *parentmod, const char *modname, int index)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cXMLElement *</type>
      <name>getXMLDocument</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ad24ee6cee9afef58728be09fcafaa323</anchor>
      <arglist>(const char *filename, const char *xpath=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cXMLElement *</type>
      <name>getParsedXMLString</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ad9fd63316e364a1f8787134282cb748c</anchor>
      <arglist>(const char *content, const char *xpath=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>forgetXMLDocument</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>aa95d6fbdcb2424087a88c7e9d74407af</anchor>
      <arglist>(const char *filename)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>forgetParsedXMLString</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a78ea72a94ab03ed4cf7cd5fbe93f5c5e</anchor>
      <arglist>(const char *content)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flushXMLDocumentCache</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a6f5476a6759b90e53c8d23d7eaaf2038</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flushXMLParsedContentCache</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a0686a65f9b012ea6d56c880a170b64d2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned</type>
      <name>getExtraStackForEnvir</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>af9f554725dd84c22e9019a7702c73b2b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cConfiguration *</type>
      <name>getConfig</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a1ced2dca00249df63d6a184d711600f0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cConfigurationEx *</type>
      <name>getConfigEx</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ad44c47726e7e8487a0e5dff0d66ce2cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>resolveResourcePath</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a3912720b86980f5beb0972173aefab6f</anchor>
      <arglist>(const char *fileName, cComponentType *context=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isGUI</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ac62df22e8ca3af0eb6b9bd57eb7070a0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLoggingEnabled</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a3f79203e0c4015b9a5500090d9ce556f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isExpressMode</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a43dc46ec83dab2021b9421c0c0147123</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>bubble</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>abcb58867fe98018b3155c3f5aa22203c</anchor>
      <arglist>(cComponent *component, const char *text)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>log</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ac56c39b2f2c905218117cba57d17c6ca</anchor>
      <arglist>(cLogEntry *entry)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>alert</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a401a0ebaf5dcc7f5aeb71b0084e57f05</anchor>
      <arglist>(const char *msg)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>printfmsg</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ac8c95ae05234fcbb62033972fcdb0080</anchor>
      <arglist>(const char *fmt,...)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>gets</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a11e36bfad3d747a49dd2cc7d2b213fee</anchor>
      <arglist>(const char *prompt, const char *defaultReply=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>askYesNo</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a0c04b87b990c8d31c5366ae04b0a0299</anchor>
      <arglist>(const char *prompt)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getImageSize</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>aa550ee7b3e57d730a455de16df78b7ce</anchor>
      <arglist>(const char *imageName, double &amp;outWidth, double &amp;outHeight)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>getTextExtent</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a2a68bac92a412643ff216f3761023355</anchor>
      <arglist>(const cFigure::Font &amp;font, const char *text, double &amp;outWidth, double &amp;outHeight, double &amp;outAscent)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>appendToImagePath</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>aded68c01d4db78668b90f6b4dbad5750</anchor>
      <arglist>(const char *directory)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>loadImage</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a54d3bcbf0879b836e93573c446c5eb3a</anchor>
      <arglist>(const char *fileName, const char *imageName=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cFigure::Rectangle</type>
      <name>getSubmoduleBounds</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a9c16e0b3c8e31eb6f719f15ae6b99864</anchor>
      <arglist>(const cModule *submodule)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getZoomLevel</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ae225a0db85736e63079fbeef3a343099</anchor>
      <arglist>(const cModule *module)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getAnimationTime</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a4e2a4b863c4325a18fa9fa77895399f3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getAnimationSpeed</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a2322f988ca5ff0313031d9e75cbb340a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getRemainingAnimationHoldTime</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>af968021f9de4408a8fe7469cf684edcf</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumRNGs</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>aab21113f9b66f87a4f82683345ad9871</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cRNG *</type>
      <name>getRNG</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a569accfb1d607678fdcdfd840f91538d</anchor>
      <arglist>(int k)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>registerOutputVector</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>af5ef5b4f034266a532a5f1f9c2c3d87b</anchor>
      <arglist>(const char *modulename, const char *vectorname)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>deregisterOutputVector</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a02c87433d6d5da29341ad7e06ea822e4</anchor>
      <arglist>(void *vechandle)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setVectorAttribute</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>af32389e8e2d4b720a4b9849a5021f508</anchor>
      <arglist>(void *vechandle, const char *name, const char *value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>recordInOutputVector</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a08a55d093b78085ee7bd33fb2a3f1bc5</anchor>
      <arglist>(void *vechandle, simtime_t t, double value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recordScalar</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a146cd0fd58bf0c3b8229f8f1d9539754</anchor>
      <arglist>(cComponent *component, const char *name, double value, opp_string_map *attributes=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recordStatistic</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>adc729620384c00f93f3c3b6c030371b8</anchor>
      <arglist>(cComponent *component, const char *name, cStatistic *statistic, opp_string_map *attributes=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addResultRecorders</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a7d5a4007579fbaea8cd60b81b8285651</anchor>
      <arglist>(cComponent *component, simsignal_t signal, const char *statisticName, cProperty *statisticTemplateProperty)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::ostream *</type>
      <name>getStreamForSnapshot</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>aa4a27a22e8c9b9e35912fd6e26b1fc55</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>releaseStreamForSnapshot</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>aad78c37d423020e93ffc850e36c5182a</anchor>
      <arglist>(std::ostream *os)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getArgCount</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a7007326f572ee57504c023d27e0f9689</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual char **</type>
      <name>getArgVector</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a46679df2a00628ffb233f7143415f337</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getParsimProcId</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ac6db6404686d760d6d121d7aaa267455</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getParsimNumPartitions</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a4b918cd14ddc3b871478a95f72946f81</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned long</type>
      <name>getUniqueNumber</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>aa8a93059999a0d664065475d354cc736</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>refOsgNode</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>ac7f556f26b585e5acc8b0cc2acb40412</anchor>
      <arglist>(osg::Node *scene)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unrefOsgNode</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a3897f6eaa037d756d8fa3cdecbfdf8c0</anchor>
      <arglist>(osg::Node *scene)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>idle</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a55c1024cf95ca111eba73c77bf051377</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>ensureDebugger</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a4b8bcc89846f5e265b7246534e002054</anchor>
      <arglist>(cRuntimeError *error=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addLifecycleListener</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a715f6c80da5fc9cd818f049df943ba87</anchor>
      <arglist>(cISimulationLifecycleListener *listener)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>removeLifecycleListener</name>
      <anchorfile>classomnetpp_1_1cEnvir.html</anchorfile>
      <anchor>a586810ea68f851727a476a6525f1237c</anchor>
      <arglist>(cISimulationLifecycleListener *listener)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cErlang</name>
    <filename>classomnetpp_1_1cErlang.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cErlang *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cErlang.html</anchorfile>
      <anchor>a9cbe1ac79c4f0a12e41e2e13a456926d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cErlang.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cErlang.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cErlang *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cErlang.html</anchorfile>
      <anchor>a9cbe1ac79c4f0a12e41e2e13a456926d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cErlang.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cErlang.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cErrorMessages</name>
    <filename>classomnetpp_1_1cErrorMessages.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::cEvent</name>
    <filename>classomnetpp_1_1cEvent.html</filename>
    <base>omnetpp::cOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cEvent</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a2b9d1f17c1ae693396aabfe6671806eb</anchor>
      <arglist>(const cEvent &amp;event)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cEvent</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>aef9c4ead911212e1cb4e0b58d601d1da</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cEvent</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a4ad62a2a6e4cb248830b54ab8828dd56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cEvent &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>ac42c71d590531b0c45bc1913d198a777</anchor>
      <arglist>(const cEvent &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cEvent *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a0ccae07de319b9185ee7795bfb825df9</anchor>
      <arglist>() const override=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSchedulingPriority</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a237354dd9d4cbbf541853d92c3966bb4</anchor>
      <arglist>(short p)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>getSchedulingPriority</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a103c4e6aa3e0908586268111edd1c17f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isScheduled</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a23e5c7f61f8a7b30644db54b3c748e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getArrivalTime</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a63c064f2bd21bdca420aaa847c884ba9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cObject *</type>
      <name>getTargetObject</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>ae11170f979f894ca0309b7fc6357eed1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMessage</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a9bbbedfec839d46811972a668fffb6fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isStale</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>ad82ee20534e197adf447761720e437fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shouldPrecede</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>acab79507e54a4d1c47591e9f339cd6c7</anchor>
      <arglist>(const cEvent *event) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>execute</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>ad202bdf85b060603989ff7dcb1be7072</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cEvent</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a2b9d1f17c1ae693396aabfe6671806eb</anchor>
      <arglist>(const cEvent &amp;event)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cEvent</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>aef9c4ead911212e1cb4e0b58d601d1da</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cEvent</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a4ad62a2a6e4cb248830b54ab8828dd56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cEvent &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>ac42c71d590531b0c45bc1913d198a777</anchor>
      <arglist>(const cEvent &amp;event)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cEvent *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a0ccae07de319b9185ee7795bfb825df9</anchor>
      <arglist>() const override=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSchedulingPriority</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a237354dd9d4cbbf541853d92c3966bb4</anchor>
      <arglist>(short p)</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>getSchedulingPriority</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a103c4e6aa3e0908586268111edd1c17f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isScheduled</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a23e5c7f61f8a7b30644db54b3c748e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getArrivalTime</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a63c064f2bd21bdca420aaa847c884ba9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cObject *</type>
      <name>getTargetObject</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>ae11170f979f894ca0309b7fc6357eed1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isMessage</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>a9bbbedfec839d46811972a668fffb6fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isStale</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>ad82ee20534e197adf447761720e437fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shouldPrecede</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>acab79507e54a4d1c47591e9f339cd6c7</anchor>
      <arglist>(const cEvent *event) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>execute</name>
      <anchorfile>classomnetpp_1_1cEvent.html</anchorfile>
      <anchor>ad202bdf85b060603989ff7dcb1be7072</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cEventHeap</name>
    <filename>classomnetpp_1_1cEventHeap.html</filename>
    <base>omnetpp::cFutureEventSet</base>
    <member kind="function">
      <type></type>
      <name>cEventHeap</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a3fcb274aa6a7c51d00d8d7b13a8a04e1</anchor>
      <arglist>(const cEventHeap &amp;msgq)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cEventHeap</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>ab27ce4acae1932a62bbc740b06590ca6</anchor>
      <arglist>(const char *name=nullptr, int initialCapacity=128)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cEventHeap</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a2050a48dddcbd56f2f5308e756d7e81d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cEventHeap &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a9bc95142da08a087ad47bc7e30307f56</anchor>
      <arglist>(const cEventHeap &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEventHeap *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>afd4b655583317d27031109c5778b88d3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insert</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a019c2c119da10ac58f4b9e318828ddf5</anchor>
      <arglist>(cEvent *event) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEvent *</type>
      <name>peekFirst</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>ad30729d40fbdeff3ca708492d6f569f5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEvent *</type>
      <name>removeFirst</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a3b84f23f4165400a51f1dabec5f78df6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putBackFirst</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a6d8a901a21ae4ed70d0039b82fa7064e</anchor>
      <arglist>(cEvent *event) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEvent *</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a8c2baf5843b0316eff31370cf6a8e807</anchor>
      <arglist>(cEvent *event) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a252b0ffc176ef2d26fbce771fb8ce3d6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a8ab0745de7fefce72d67f99f3931a3e4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getLength</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>aa33939917e368e96d253eac5e081d32c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEvent *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>accfc4d7e750a2b481cc7ecd8ef639549</anchor>
      <arglist>(int k) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sort</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>ab842095dd9236621ea6e6b0fe92040ac</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cEventHeap</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a3fcb274aa6a7c51d00d8d7b13a8a04e1</anchor>
      <arglist>(const cEventHeap &amp;msgq)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cEventHeap</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>ab27ce4acae1932a62bbc740b06590ca6</anchor>
      <arglist>(const char *name=nullptr, int initialCapacity=128)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cEventHeap</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a2050a48dddcbd56f2f5308e756d7e81d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cEventHeap &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a9bc95142da08a087ad47bc7e30307f56</anchor>
      <arglist>(const cEventHeap &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEventHeap *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>afd4b655583317d27031109c5778b88d3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insert</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a019c2c119da10ac58f4b9e318828ddf5</anchor>
      <arglist>(cEvent *event) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEvent *</type>
      <name>peekFirst</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>ad30729d40fbdeff3ca708492d6f569f5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEvent *</type>
      <name>removeFirst</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a3b84f23f4165400a51f1dabec5f78df6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putBackFirst</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a6d8a901a21ae4ed70d0039b82fa7064e</anchor>
      <arglist>(cEvent *event) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEvent *</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a8c2baf5843b0316eff31370cf6a8e807</anchor>
      <arglist>(cEvent *event) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a252b0ffc176ef2d26fbce771fb8ce3d6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>a8ab0745de7fefce72d67f99f3931a3e4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getLength</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>aa33939917e368e96d253eac5e081d32c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEvent *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>accfc4d7e750a2b481cc7ecd8ef639549</anchor>
      <arglist>(int k) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sort</name>
      <anchorfile>classomnetpp_1_1cEventHeap.html</anchorfile>
      <anchor>ab842095dd9236621ea6e6b0fe92040ac</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cException</name>
    <filename>classomnetpp_1_1cException.html</filename>
    <member kind="function">
      <type></type>
      <name>cException</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a4610de076686bbf2f50a3cff58e7e82a</anchor>
      <arglist>(ErrorCodeInt errcode,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cException</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>af5adb5ad9a1df543cb457d61897c5130</anchor>
      <arglist>(const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cException</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>ac3700fd849455b4b2e87151787ca981e</anchor>
      <arglist>(const cObject *where, ErrorCodeInt errcode,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cException</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>acac45118142c9048c573d89c5858af89</anchor>
      <arglist>(const cObject *where, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cException</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a678befe867e9ff64a80213d2ce3ee8b5</anchor>
      <arglist>(const cException &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cException *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>aafaf8feb1ea17ac7cbf4fa236797c79e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cException</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a82013bc9da99df8a5f15f1d962a8c173</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMessage</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a5bbf2a5832dde65d55f124195cd1f5ff</anchor>
      <arglist>(const char *txt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>prependMessage</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a28fd871d32d23af162b862a4d48c2bac</anchor>
      <arglist>(const char *txt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isError</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a0cc044d8dcf3d3e8853ce0939f36ff0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getErrorCode</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>ab03e9ca997823c23a7a87c549f1245a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>ae26e1f71562f0ec85aa1d3fa735da3da</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getFormattedMessage</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>ad169f4d436a2377d30a80fd20a9d0cf5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSimulationStage</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a5ec9ed56948b9fa1f684838dae422c62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual eventnumber_t</type>
      <name>getEventNumber</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>ad420b72032578ce773c0e7ca6615cbab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getSimtime</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>aff7967886c34860ebbea256039160283</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasContext</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a1e56b7c2ff759068d6380862723d0a86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getContextClassName</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>aafc3330aa41564006c3e0c44c9296371</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getContextFullPath</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a36841c133a3b62e5b644da7fef7213e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getContextComponentId</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>afd9f41bad89c4fb4f5d5573c2991b0ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getContextComponentKind</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>ac5591858d99c5d28ed925a44a477f0e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a601b48ca92b6835e927f746a08013b62</anchor>
      <arglist>(const cObject *obj, ErrorCode errorcode, const char *fmt, va_list va)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cException</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a4610de076686bbf2f50a3cff58e7e82a</anchor>
      <arglist>(ErrorCodeInt errcode,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cException</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>af5adb5ad9a1df543cb457d61897c5130</anchor>
      <arglist>(const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cException</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>ac3700fd849455b4b2e87151787ca981e</anchor>
      <arglist>(const cObject *where, ErrorCodeInt errcode,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cException</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>acac45118142c9048c573d89c5858af89</anchor>
      <arglist>(const cObject *where, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cException</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a678befe867e9ff64a80213d2ce3ee8b5</anchor>
      <arglist>(const cException &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cException *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>aafaf8feb1ea17ac7cbf4fa236797c79e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cException</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a82013bc9da99df8a5f15f1d962a8c173</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMessage</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a5bbf2a5832dde65d55f124195cd1f5ff</anchor>
      <arglist>(const char *txt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>prependMessage</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a28fd871d32d23af162b862a4d48c2bac</anchor>
      <arglist>(const char *txt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isError</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a0cc044d8dcf3d3e8853ce0939f36ff0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getErrorCode</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>ab03e9ca997823c23a7a87c549f1245a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>what</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>ae26e1f71562f0ec85aa1d3fa735da3da</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getFormattedMessage</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>ad169f4d436a2377d30a80fd20a9d0cf5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSimulationStage</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a5ec9ed56948b9fa1f684838dae422c62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual eventnumber_t</type>
      <name>getEventNumber</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>ad420b72032578ce773c0e7ca6615cbab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getSimtime</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>aff7967886c34860ebbea256039160283</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasContext</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a1e56b7c2ff759068d6380862723d0a86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getContextClassName</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>aafc3330aa41564006c3e0c44c9296371</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getContextFullPath</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>a36841c133a3b62e5b644da7fef7213e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getContextComponentId</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>afd9f41bad89c4fb4f5d5573c2991b0ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getContextComponentKind</name>
      <anchorfile>classomnetpp_1_1cException.html</anchorfile>
      <anchor>ac5591858d99c5d28ed925a44a477f0e8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cExponential</name>
    <filename>classomnetpp_1_1cExponential.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cExponential *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cExponential.html</anchorfile>
      <anchor>a8ff950b6a150536545ba7c0422a85694</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cExponential.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cExponential.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExponential *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cExponential.html</anchorfile>
      <anchor>a8ff950b6a150536545ba7c0422a85694</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cExponential.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cExponential.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cExpression</name>
    <filename>classomnetpp_1_1cExpression.html</filename>
    <base>omnetpp::cObject</base>
    <class kind="class">omnetpp::cExpression::Context</class>
    <member kind="function">
      <type></type>
      <name>cExpression</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>ab0743b489b94eb9a75cc6bbfcceda54c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cExpression</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a1fee568287f02b558e551764b17ece6f</anchor>
      <arglist>(const cExpression &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cExpression</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a6961bae2edda5bcff8293ed3e032693f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cExpression &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>ad8e18f35306bb42c1b4609fbd936f865</anchor>
      <arglist>(const cExpression &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExpression *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>aa60fe59484b723d5e38875fd3536bb62</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cNedValue</type>
      <name>evaluate</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a50643cbd8124c2321f4eac700e5a5cba</anchor>
      <arglist>(Context *context) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>abb4268745f6050569e7d8752809b6021</anchor>
      <arglist>(Context *context) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual intpar_t</type>
      <name>intValue</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>abb6278d074f36d862d2516969b85cb90</anchor>
      <arglist>(Context *context, const char *expectedUnit=nullptr) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a69ccc90e17409ff451c44c78cea528b5</anchor>
      <arglist>(Context *context, const char *expectedUnit=nullptr) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a238a01a0ce119f3debe134b159585822</anchor>
      <arglist>(Context *context) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>ad6d856c845fe3ca64bd54eff1808cc6b</anchor>
      <arglist>(Context *context) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cNedValue</type>
      <name>evaluate</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>abbd865a57c5c4655f20dd5a4fe4cbce0</anchor>
      <arglist>(cComponent *contextComponent=nullptr) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>ad9aad8a9c996d9f1d7dec1701c4e3925</anchor>
      <arglist>(cComponent *contextComponent=nullptr) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual intpar_t</type>
      <name>intValue</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a11c3f8270f4bf9984584eaa6d7a342e9</anchor>
      <arglist>(cComponent *contextComponent=nullptr, const char *expectedUnit=nullptr) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a03439f146c0ede5eea1e93a484af90ee</anchor>
      <arglist>(cComponent *contextComponent=nullptr, const char *expectedUnit=nullptr) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a13804c479632594dcfcfbd48d0c1c623</anchor>
      <arglist>(cComponent *contextComponent=nullptr) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a11156a90c80cf66db1d7917a12b388c8</anchor>
      <arglist>(cComponent *contextComponent=nullptr) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>ab592bc6d2445a934196f8ff55f99e54e</anchor>
      <arglist>(const char *text)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a928df96c60d65fb8020fdd24e2fbc1b3</anchor>
      <arglist>(const cExpression *other) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>containsConstSubexpressions</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>aa66fc411931496877d76762b01c77650</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluateConstSubexpressions</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>ab7bf95cf20aa658ca88c5b1113472712</anchor>
      <arglist>(Context *context)=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cExpression</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>ab0743b489b94eb9a75cc6bbfcceda54c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cExpression</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a1fee568287f02b558e551764b17ece6f</anchor>
      <arglist>(const cExpression &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cExpression</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a6961bae2edda5bcff8293ed3e032693f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cExpression &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>ad8e18f35306bb42c1b4609fbd936f865</anchor>
      <arglist>(const cExpression &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExpression *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>aa60fe59484b723d5e38875fd3536bb62</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cNedValue</type>
      <name>evaluate</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a50643cbd8124c2321f4eac700e5a5cba</anchor>
      <arglist>(Context *context) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>abb4268745f6050569e7d8752809b6021</anchor>
      <arglist>(Context *context) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual intpar_t</type>
      <name>intValue</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>abb6278d074f36d862d2516969b85cb90</anchor>
      <arglist>(Context *context, const char *expectedUnit=nullptr) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a69ccc90e17409ff451c44c78cea528b5</anchor>
      <arglist>(Context *context, const char *expectedUnit=nullptr) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a238a01a0ce119f3debe134b159585822</anchor>
      <arglist>(Context *context) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>ad6d856c845fe3ca64bd54eff1808cc6b</anchor>
      <arglist>(Context *context) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cNedValue</type>
      <name>evaluate</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>abbd865a57c5c4655f20dd5a4fe4cbce0</anchor>
      <arglist>(cComponent *contextComponent=nullptr) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>ad9aad8a9c996d9f1d7dec1701c4e3925</anchor>
      <arglist>(cComponent *contextComponent=nullptr) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual intpar_t</type>
      <name>intValue</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a11c3f8270f4bf9984584eaa6d7a342e9</anchor>
      <arglist>(cComponent *contextComponent=nullptr, const char *expectedUnit=nullptr) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a03439f146c0ede5eea1e93a484af90ee</anchor>
      <arglist>(cComponent *contextComponent=nullptr, const char *expectedUnit=nullptr) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a13804c479632594dcfcfbd48d0c1c623</anchor>
      <arglist>(cComponent *contextComponent=nullptr) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a11156a90c80cf66db1d7917a12b388c8</anchor>
      <arglist>(cComponent *contextComponent=nullptr) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>ab592bc6d2445a934196f8ff55f99e54e</anchor>
      <arglist>(const char *text)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>a928df96c60d65fb8020fdd24e2fbc1b3</anchor>
      <arglist>(const cExpression *other) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>containsConstSubexpressions</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>aa66fc411931496877d76762b01c77650</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluateConstSubexpressions</name>
      <anchorfile>classomnetpp_1_1cExpression.html</anchorfile>
      <anchor>ab7bf95cf20aa658ca88c5b1113472712</anchor>
      <arglist>(Context *context)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cFigure</name>
    <filename>classomnetpp_1_1cFigure.html</filename>
    <base>omnetpp::cOwnedObject</base>
    <class kind="struct">omnetpp::cFigure::Color</class>
    <class kind="struct">omnetpp::cFigure::Font</class>
    <class kind="class">omnetpp::cFigure::Pixmap</class>
    <class kind="struct">omnetpp::cFigure::Point</class>
    <class kind="struct">omnetpp::cFigure::Rectangle</class>
    <class kind="struct">omnetpp::cFigure::RGBA</class>
    <class kind="struct">omnetpp::cFigure::Transform</class>
    <member kind="enumeration">
      <type></type>
      <name>FontStyle</name>
      <anchorfile>group__Canvas.html</anchorfile>
      <anchor>ga5e5699dd6b22c785fd82a0e87f2c5bfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LineStyle</name>
      <anchorfile>group__Canvas.html</anchorfile>
      <anchor>ga86e0f5648542856159bb40775c854aa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CapStyle</name>
      <anchorfile>group__Canvas.html</anchorfile>
      <anchor>ga63806a3e806775b35bb9373a3ec0c555</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>JoinStyle</name>
      <anchorfile>group__Canvas.html</anchorfile>
      <anchor>ga4ae807b1d30d2a3c375f0616740e8b3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FillRule</name>
      <anchorfile>group__Canvas.html</anchorfile>
      <anchor>ga9a534b0377c9ca41983d53b0dae0d5a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Arrowhead</name>
      <anchorfile>group__Canvas.html</anchorfile>
      <anchor>gaa7a1b6f1e7b1caa83c503749051c1312</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Interpolation</name>
      <anchorfile>group__Canvas.html</anchorfile>
      <anchor>ga817402314dfc91b23b3642e5b6bb4549</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Anchor</name>
      <anchorfile>group__Canvas.html</anchorfile>
      <anchor>ga31212c0e97573d350c4420f8d1679c9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a8e99d8c5e498daaffe01f4b81f7158e5</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a4d5d77ee90549b1652dc3bff26361519</anchor>
      <arglist>(const cFigure &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>afd9076bd218c8d583093778cc71887b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cFigure &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a8a9584e82d7c92417d54ce04a67dd08e</anchor>
      <arglist>(const cFigure &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>ab480ec1001be59293ab54d17244a13a9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getId</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a4753a5331a3ccc5974088b45b2b532ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isVisible</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>aaf9e092d80ed0c3995187866bb1b12e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setVisible</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>aff6547edc5bdc358ad27566775035b3c</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Transform &amp;</type>
      <name>getTransform</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a3d7cb4a28ce78b493276f0e26a475e6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransform</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a06c5cba18a2af9d40679c4b6207d079d</anchor>
      <arglist>(const Transform &amp;transform)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetTransform</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a893b62e38895a80cb34491f4d04c4a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getZIndex</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a4333c312c49f5b9e50874cebd9f17487</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setZIndex</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a4cf0ad1d746869434ef0caf1edf07218</anchor>
      <arglist>(double zIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getEffectiveZIndex</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>adeb03e8e92ba3e41d876815e3c129308</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTooltip</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>aa579a5135f89996e46ccf17b6decf4d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTooltip</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>aea8543e8c7ce290a2fbe0b86c40e7557</anchor>
      <arglist>(const char *tooltip)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>getAssociatedObject</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a8a31eab01c81ca1db167f576b9950874</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAssociatedObject</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a13fa8fd8f34a5077ff8aefa7dfc77304</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTags</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a54e3b84b7e9989df0406f047ab0162a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTags</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>aefcd02e43ea49c15d3123f5e00d77e36</anchor>
      <arglist>(const char *tags)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>getParentFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a3629d6fe8a1b5d801a5dca7b430783a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cCanvas *</type>
      <name>getCanvas</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>ac020b218ef95880637922aeb12b75cdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumFigures</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a0c8fc6ee898e89a1f93ac307962bcc87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>getFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a9b737ea87aeda0a31e26b60738fbe83b</anchor>
      <arglist>(int pos) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>getFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a389b6edf8d9c99dca02769f6d64e2b4a</anchor>
      <arglist>(const char *name) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>ab0f9c89695e65a7589eea4396a83979b</anchor>
      <arglist>(const char *name) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a051a6d232a101f0d6ccd8df5a280bda2</anchor>
      <arglist>(const cFigure *figure) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsFigures</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a76948197e56efaa92381593523bbd15e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>findFigureRecursively</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a004bf4a7f530cb7e456778c49f80fb4d</anchor>
      <arglist>(const char *name) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>getFigureByPath</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a2e5ffb8b43d7cef7ce79840acb0a0471</anchor>
      <arglist>(const char *path) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a5ef066ee563f914580f61111f8f46ba2</anchor>
      <arglist>(cFigure *figure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a5e191511a274bf202ebe99eba89671b9</anchor>
      <arglist>(cFigure *figure, int pos)</arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED void</type>
      <name>addFigureAbove</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a8aa0dae7f8349952c216ec9fd96f02e4</anchor>
      <arglist>(cFigure *figure, cFigure *referenceFigure)</arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED void</type>
      <name>addFigureBelow</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a04d48d54f08398087a2ca23443e348a3</anchor>
      <arglist>(cFigure *figure, cFigure *referenceFigure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>removeFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>af5773829647886261f3027d1044b1a43</anchor>
      <arglist>(cFigure *figure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>removeFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>af09d37460063a1b284acd8aa67a3d1b2</anchor>
      <arglist>(int pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>removeFromParent</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a2c6b55308e0b5275ab68eee6667bc352</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isAbove</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a446e03636781a29f0363c3bf938740d0</anchor>
      <arglist>(const cFigure *figure) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBelow</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>ac5e7e0de08df346878cb72f43a59a059</anchor>
      <arglist>(const cFigure *figure) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertAbove</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a6609e345d91aa0c7f16226db47ca7354</anchor>
      <arglist>(cFigure *referenceFigure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBelow</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a84d81c5c5e4c9d2d662e5a79d00ac3b0</anchor>
      <arglist>(cFigure *referenceFigure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertAfter</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a05e8dca1ac9553effc7a0e9a20a77f90</anchor>
      <arglist>(const cFigure *referenceFigure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBefore</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a296f2e4a990918e075be4118cdff7764</anchor>
      <arglist>(const cFigure *referenceFigure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>raiseAbove</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a5e26f9434d4ad9ba38af30fcd405f4f5</anchor>
      <arglist>(cFigure *figure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lowerBelow</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>abdaf356c1a86f324dee1ff9ba1dc3ed8</anchor>
      <arglist>(cFigure *figure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>raiseToTop</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>af8eca5416a69dc9851b27d2b91a10cd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lowerToBottom</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a552b85c68bbe6557397f19cc56453a34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>dupTree</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>acad483ecb866e36b3c2970947f4b20e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>aa3b187fe04fe4688663bb8fa55365b05</anchor>
      <arglist>(cProperty *property)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char **</type>
      <name>getAllowedPropertyKeys</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a1209e15ea6ccf808f092ccffd02fbdfb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a80c8ea86138165ba0ba882cdf14ae304</anchor>
      <arglist>(double dx, double dy)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a9bbfc49189ad8062f2a75959ddef9256</anchor>
      <arglist>(double dx, double dy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>refreshDisplay</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a4316afc77d8ee990182cbe21b2ee5adc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>ac88743b02af1f80efb0fe104988899aa</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a8e99d8c5e498daaffe01f4b81f7158e5</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a4d5d77ee90549b1652dc3bff26361519</anchor>
      <arglist>(const cFigure &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>afd9076bd218c8d583093778cc71887b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cFigure &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a8a9584e82d7c92417d54ce04a67dd08e</anchor>
      <arglist>(const cFigure &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>ab480ec1001be59293ab54d17244a13a9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getId</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a4753a5331a3ccc5974088b45b2b532ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isVisible</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>aaf9e092d80ed0c3995187866bb1b12e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setVisible</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>aff6547edc5bdc358ad27566775035b3c</anchor>
      <arglist>(bool visible)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Transform &amp;</type>
      <name>getTransform</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a3d7cb4a28ce78b493276f0e26a475e6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTransform</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a06c5cba18a2af9d40679c4b6207d079d</anchor>
      <arglist>(const Transform &amp;transform)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>resetTransform</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a893b62e38895a80cb34491f4d04c4a16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getZIndex</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a4333c312c49f5b9e50874cebd9f17487</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setZIndex</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a4cf0ad1d746869434ef0caf1edf07218</anchor>
      <arglist>(double zIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getEffectiveZIndex</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>adeb03e8e92ba3e41d876815e3c129308</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTooltip</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>aa579a5135f89996e46ccf17b6decf4d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTooltip</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>aea8543e8c7ce290a2fbe0b86c40e7557</anchor>
      <arglist>(const char *tooltip)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>getAssociatedObject</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a8a31eab01c81ca1db167f576b9950874</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAssociatedObject</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a13fa8fd8f34a5077ff8aefa7dfc77304</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTags</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a54e3b84b7e9989df0406f047ab0162a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setTags</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>aefcd02e43ea49c15d3123f5e00d77e36</anchor>
      <arglist>(const char *tags)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>getParentFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a3629d6fe8a1b5d801a5dca7b430783a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cCanvas *</type>
      <name>getCanvas</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>ac020b218ef95880637922aeb12b75cdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumFigures</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a0c8fc6ee898e89a1f93ac307962bcc87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>getFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a9b737ea87aeda0a31e26b60738fbe83b</anchor>
      <arglist>(int pos) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>getFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a389b6edf8d9c99dca02769f6d64e2b4a</anchor>
      <arglist>(const char *name) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>ab0f9c89695e65a7589eea4396a83979b</anchor>
      <arglist>(const char *name) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a051a6d232a101f0d6ccd8df5a280bda2</anchor>
      <arglist>(const cFigure *figure) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsFigures</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a76948197e56efaa92381593523bbd15e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>findFigureRecursively</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a004bf4a7f530cb7e456778c49f80fb4d</anchor>
      <arglist>(const char *name) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>getFigureByPath</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a2e5ffb8b43d7cef7ce79840acb0a0471</anchor>
      <arglist>(const char *path) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a5ef066ee563f914580f61111f8f46ba2</anchor>
      <arglist>(cFigure *figure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a5e191511a274bf202ebe99eba89671b9</anchor>
      <arglist>(cFigure *figure, int pos)</arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED void</type>
      <name>addFigureAbove</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a8aa0dae7f8349952c216ec9fd96f02e4</anchor>
      <arglist>(cFigure *figure, cFigure *referenceFigure)</arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED void</type>
      <name>addFigureBelow</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a04d48d54f08398087a2ca23443e348a3</anchor>
      <arglist>(cFigure *figure, cFigure *referenceFigure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>removeFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>af5773829647886261f3027d1044b1a43</anchor>
      <arglist>(cFigure *figure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>removeFigure</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>af09d37460063a1b284acd8aa67a3d1b2</anchor>
      <arglist>(int pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>removeFromParent</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a2c6b55308e0b5275ab68eee6667bc352</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isAbove</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a446e03636781a29f0363c3bf938740d0</anchor>
      <arglist>(const cFigure *figure) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBelow</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>ac5e7e0de08df346878cb72f43a59a059</anchor>
      <arglist>(const cFigure *figure) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertAbove</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a6609e345d91aa0c7f16226db47ca7354</anchor>
      <arglist>(cFigure *referenceFigure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBelow</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a84d81c5c5e4c9d2d662e5a79d00ac3b0</anchor>
      <arglist>(cFigure *referenceFigure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertAfter</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a05e8dca1ac9553effc7a0e9a20a77f90</anchor>
      <arglist>(const cFigure *referenceFigure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBefore</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a296f2e4a990918e075be4118cdff7764</anchor>
      <arglist>(const cFigure *referenceFigure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>raiseAbove</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a5e26f9434d4ad9ba38af30fcd405f4f5</anchor>
      <arglist>(cFigure *figure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lowerBelow</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>abdaf356c1a86f324dee1ff9ba1dc3ed8</anchor>
      <arglist>(cFigure *figure)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>raiseToTop</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>af8eca5416a69dc9851b27d2b91a10cd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>lowerToBottom</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a552b85c68bbe6557397f19cc56453a34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure *</type>
      <name>dupTree</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>acad483ecb866e36b3c2970947f4b20e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>aa3b187fe04fe4688663bb8fa55365b05</anchor>
      <arglist>(cProperty *property)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char **</type>
      <name>getAllowedPropertyKeys</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a1209e15ea6ccf808f092ccffd02fbdfb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a80c8ea86138165ba0ba882cdf14ae304</anchor>
      <arglist>(double dx, double dy)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a9bbfc49189ad8062f2a75959ddef9256</anchor>
      <arglist>(double dx, double dy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>refreshDisplay</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>a4316afc77d8ee990182cbe21b2ee5adc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cFigure.html</anchorfile>
      <anchor>ac88743b02af1f80efb0fe104988899aa</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cFingerprintCalculator</name>
    <filename>classomnetpp_1_1cFingerprintCalculator.html</filename>
    <base>omnetpp::cObject</base>
    <base protection="private">omnetpp::noncopyable</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classomnetpp_1_1cFingerprintCalculator.html</anchorfile>
      <anchor>a997d0fe4121d4c64c7867208df6eb8ec</anchor>
      <arglist>(const char *expectedFingerprints, cConfiguration *cfg, int index=-1)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>checkFingerprint</name>
      <anchorfile>classomnetpp_1_1cFingerprintCalculator.html</anchorfile>
      <anchor>aad406f3b2a67a498ae5ed1b4e34f9e5d</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cFixedRangeHistogramStrategy</name>
    <filename>classomnetpp_1_1cFixedRangeHistogramStrategy.html</filename>
    <base>omnetpp::cIHistogramStrategy</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cFixedRangeHistogramStrategy *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cFixedRangeHistogramStrategy.html</anchorfile>
      <anchor>a6768da24a710a549c44cf7b311bc2bad</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cFixedRangeHistogramStrategy.html</anchorfile>
      <anchor>a3b715fbb1b1a0b5079591510e4015d0b</anchor>
      <arglist>(double value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collectWeighted</name>
      <anchorfile>classomnetpp_1_1cFixedRangeHistogramStrategy.html</anchorfile>
      <anchor>a26fb09e47da0aceac9ffdce8555864be</anchor>
      <arglist>(double value, double weight) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUpBins</name>
      <anchorfile>classomnetpp_1_1cFixedRangeHistogramStrategy.html</anchorfile>
      <anchor>af163dfec64f493a3c41e445228529ae6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cFixedRangeHistogramStrategy.html</anchorfile>
      <anchor>a8ab0745de7fefce72d67f99f3931a3e4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFixedRangeHistogramStrategy *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cFixedRangeHistogramStrategy.html</anchorfile>
      <anchor>a6768da24a710a549c44cf7b311bc2bad</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cFixedRangeHistogramStrategy.html</anchorfile>
      <anchor>a3b715fbb1b1a0b5079591510e4015d0b</anchor>
      <arglist>(double value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collectWeighted</name>
      <anchorfile>classomnetpp_1_1cFixedRangeHistogramStrategy.html</anchorfile>
      <anchor>a26fb09e47da0aceac9ffdce8555864be</anchor>
      <arglist>(double value, double weight) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUpBins</name>
      <anchorfile>classomnetpp_1_1cFixedRangeHistogramStrategy.html</anchorfile>
      <anchor>af163dfec64f493a3c41e445228529ae6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cFixedRangeHistogramStrategy.html</anchorfile>
      <anchor>a8ab0745de7fefce72d67f99f3931a3e4</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cFSM</name>
    <filename>classomnetpp_1_1cFSM.html</filename>
    <base>omnetpp::cOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cFSM</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>abac5843e392344f2b8bd4746827a320a</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cFSM</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>ad402ac8e0390e96fdbd9c47643d74b31</anchor>
      <arglist>(const cFSM &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>cFSM &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>af3fc68ab0ad078d0581d3d0e8bec4fb6</anchor>
      <arglist>(const cFSM &amp;vs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFSM *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>a7ce4005d638f5e92c0dedb9dec2fbeaf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getState</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>ac60d40c35abc35a4be2f71d88cdad4d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getStateName</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>add12cd9b53cda3783bc2cd51ac993d9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isInTransientState</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>aec7f35510bf50b1331f039f00e11396e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>a9eeff0498e055ca73441c5f3f16dd0b9</anchor>
      <arglist>(int state, const char *stateName=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cFSM</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>abac5843e392344f2b8bd4746827a320a</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cFSM</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>ad402ac8e0390e96fdbd9c47643d74b31</anchor>
      <arglist>(const cFSM &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>cFSM &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>af3fc68ab0ad078d0581d3d0e8bec4fb6</anchor>
      <arglist>(const cFSM &amp;vs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFSM *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>a7ce4005d638f5e92c0dedb9dec2fbeaf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getState</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>ac60d40c35abc35a4be2f71d88cdad4d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getStateName</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>add12cd9b53cda3783bc2cd51ac993d9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>isInTransientState</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>aec7f35510bf50b1331f039f00e11396e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>classomnetpp_1_1cFSM.html</anchorfile>
      <anchor>a9eeff0498e055ca73441c5f3f16dd0b9</anchor>
      <arglist>(int state, const char *stateName=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cFutureEventSet</name>
    <filename>classomnetpp_1_1cFutureEventSet.html</filename>
    <base>omnetpp::cOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cFutureEventSet</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>ac028189fb0b4ce4a6fca7125855dc0a5</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cFutureEventSet</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>abe567c3bd432cfb0983c232078ec911c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cFutureEventSet &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>a118a2f9bc53702da286ef30fea7eb5eb</anchor>
      <arglist>(const cFutureEventSet &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insert</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>ab32ac46be50776254b1127194310eca8</anchor>
      <arglist>(cEvent *event)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cEvent *</type>
      <name>peekFirst</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>ad91a71457e239126d795e953069c502f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cEvent *</type>
      <name>removeFirst</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>ad4f19c1ff184440ca5f1e7adc94b0c2a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putBackFirst</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>ad5c78b1b28ba67ee6bb3f2692d0be0a5</anchor>
      <arglist>(cEvent *event)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cEvent *</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>ad0d566b9654b5052f913a124845c6433</anchor>
      <arglist>(cEvent *event)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>a0429f9eb647b986ea609536de0143219</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>a5eeb94d22b8366d1b68d0614384802fe</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getLength</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>a0e6dd5fad9ead809b933defcdb4cc872</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cEvent *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>ae2300fa37846b42a05eb401083d5ee08</anchor>
      <arglist>(int k)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sort</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>a83961e591ab5cb6a1373c5eb28d735f2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cFutureEventSet</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>ac028189fb0b4ce4a6fca7125855dc0a5</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cFutureEventSet</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>abe567c3bd432cfb0983c232078ec911c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cFutureEventSet &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>a118a2f9bc53702da286ef30fea7eb5eb</anchor>
      <arglist>(const cFutureEventSet &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insert</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>ab32ac46be50776254b1127194310eca8</anchor>
      <arglist>(cEvent *event)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cEvent *</type>
      <name>peekFirst</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>ad91a71457e239126d795e953069c502f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cEvent *</type>
      <name>removeFirst</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>ad4f19c1ff184440ca5f1e7adc94b0c2a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putBackFirst</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>ad5c78b1b28ba67ee6bb3f2692d0be0a5</anchor>
      <arglist>(cEvent *event)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cEvent *</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>ad0d566b9654b5052f913a124845c6433</anchor>
      <arglist>(cEvent *event)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isEmpty</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>a0429f9eb647b986ea609536de0143219</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>a5eeb94d22b8366d1b68d0614384802fe</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getLength</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>a0e6dd5fad9ead809b933defcdb4cc872</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cEvent *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>ae2300fa37846b42a05eb401083d5ee08</anchor>
      <arglist>(int k)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>sort</name>
      <anchorfile>classomnetpp_1_1cFutureEventSet.html</anchorfile>
      <anchor>a83961e591ab5cb6a1373c5eb28d735f2</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cGamma</name>
    <filename>classomnetpp_1_1cGamma.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cGamma *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cGamma.html</anchorfile>
      <anchor>a1ad14403de477d687c6c44b025fe83f2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cGamma.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cGamma.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGamma *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cGamma.html</anchorfile>
      <anchor>a1ad14403de477d687c6c44b025fe83f2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cGamma.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cGamma.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cGate</name>
    <filename>classomnetpp_1_1cGate.html</filename>
    <base>omnetpp::cObject</base>
    <base protection="private">omnetpp::noncopyable</base>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a1d1cfd8ffb84e947f82999c682b666a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>deliver</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a6414f30b8d52995e4efda7b7caf746df</anchor>
      <arglist>(cMessage *msg, simtime_t at)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a83be907353bc2510cac6212277a77777</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>ac8c2df3a4b90f890270bda7b2d7c1bec</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>getOwner</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a1c61b59f0ccf468084ee3c932e21aff6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>connectTo</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a2ccf25d786300fd3514ecd700c362514</anchor>
      <arglist>(cGate *gate, cChannel *channel=nullptr, bool leaveUninitialized=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnect</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a960705de531a20389fb29928d43258c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>reconnectWith</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>ade2a0c93a66e514fe7a6ebcc631bed1f</anchor>
      <arglist>(cChannel *channel, bool leaveUninitialized=false)</arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>getTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a372966d979a8ef3187096adca72f47cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>findTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>add840e99bafd5938a1adea4ebbb21014</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>getIncomingTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>ac14070d486f3a0adf1f4f768bcb5ac07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>findIncomingTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a28a9bac0c300f92a8d6e146767fa7f3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getPreviousGate</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>aa739a926923e898e0b76a24e4a3f4ee3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getNextGate</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>acb4d419c0adec6c4861dabec86366b0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getConnectionId</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a67bcd63b33e06b19184d68bbeaf69765</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getPathStartGate</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a117291fde85f07dfb40bd6019ad46a4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getPathEndGate</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a061e96f1e715a522d9ec3eef5462fccc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pathContains</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a7f7d353255f15867f6c98a7a1d87d243</anchor>
      <arglist>(cModule *module, int gateId=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnectedOutside</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>aa60690cf0484300cd94665c5262cdfdd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnectedInside</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a615afd667dce3f9124cfad8ffd1db86a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a80178eafbc14f5434c65b0a8413c12c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPathOK</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a4cf770a7f60f04096e0768e80984b81c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cDisplayString &amp;</type>
      <name>getDisplayString</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a874774b4a34846e019c7341998c26e91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisplayString</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a5fca7be71b1a08f7272233e8b96c2591</anchor>
      <arglist>(const char *dispstr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a83be907353bc2510cac6212277a77777</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>ac8c2df3a4b90f890270bda7b2d7c1bec</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>getOwner</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a1c61b59f0ccf468084ee3c932e21aff6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>connectTo</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a2ccf25d786300fd3514ecd700c362514</anchor>
      <arglist>(cGate *gate, cChannel *channel=nullptr, bool leaveUninitialized=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disconnect</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a960705de531a20389fb29928d43258c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>reconnectWith</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>ade2a0c93a66e514fe7a6ebcc631bed1f</anchor>
      <arglist>(cChannel *channel, bool leaveUninitialized=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGateHalf</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a6879a66dbdd6c2eb202ea83380a1ce0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getOtherHalf</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a306b6ebe9a395e86328b623324f5e6f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getBaseName</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>ae60894ca7f0cdfbf4821d4a0ec8ff094</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getNameSuffix</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a54d9e00e6a5cc13bc741aa3d39b68eb2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cProperties *</type>
      <name>getProperties</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a47f3eea152aa81dd2e12f358077ea866</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a97c56d51eec84be3e856eb0ca6ebd3d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getOwnerModule</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a23d852ad799c84c3108b239dbc7ac7f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getId</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a4753a5331a3ccc5974088b45b2b532ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a434d8fdd91756a54ea935ba21de4f4f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getBaseId</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>ab44d803c92cd5d58398e563ff6e8d466</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndex</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a1678b8fbb78027fe25fd31e6b4001f0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getVectorSize</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a494de372234f171012b13610c6aad096</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>getChannel</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a54774ff037dfd45ac1b0be410d052629</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDeliverOnReceptionStart</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a06104078027d23c9b2c25e71702bbc70</anchor>
      <arglist>(bool d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getDeliverOnReceptionStart</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>ad50ee6c7d7b314a6d055f28619606d46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getTypeName</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a34a85b045e20a88c11f98b4049085e34</anchor>
      <arglist>(Type t)</arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>getTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a372966d979a8ef3187096adca72f47cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>findTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>add840e99bafd5938a1adea4ebbb21014</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>getIncomingTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>ac14070d486f3a0adf1f4f768bcb5ac07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>findIncomingTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a28a9bac0c300f92a8d6e146767fa7f3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getPreviousGate</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>aa739a926923e898e0b76a24e4a3f4ee3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getNextGate</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>acb4d419c0adec6c4861dabec86366b0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getConnectionId</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a67bcd63b33e06b19184d68bbeaf69765</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getPathStartGate</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a117291fde85f07dfb40bd6019ad46a4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getPathEndGate</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a061e96f1e715a522d9ec3eef5462fccc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pathContains</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a7f7d353255f15867f6c98a7a1d87d243</anchor>
      <arglist>(cModule *module, int gateId=-1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnectedOutside</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>aa60690cf0484300cd94665c5262cdfdd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnectedInside</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a615afd667dce3f9124cfad8ffd1db86a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConnected</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a80178eafbc14f5434c65b0a8413c12c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPathOK</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a4cf770a7f60f04096e0768e80984b81c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cDisplayString &amp;</type>
      <name>getDisplayString</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a874774b4a34846e019c7341998c26e91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDisplayString</name>
      <anchorfile>classomnetpp_1_1cGate.html</anchorfile>
      <anchor>a5fca7be71b1a08f7272233e8b96c2591</anchor>
      <arglist>(const char *dispstr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cGenericAssignableWatch</name>
    <filename>classomnetpp_1_1cGenericAssignableWatch.html</filename>
    <templarg>T</templarg>
    <base>omnetpp::cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classomnetpp_1_1cGenericAssignableWatch.html</anchorfile>
      <anchor>aa0d8ddf8e340589ce5a4ebdc1d5e070d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classomnetpp_1_1cGenericAssignableWatch.html</anchorfile>
      <anchor>ab03565c5009105e9a856bb7ed61f79c8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cGenericAssignableWatch.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>classomnetpp_1_1cGenericAssignableWatch.html</anchorfile>
      <anchor>aaa583a97235a93b8b1b170319d31709e</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cGenericReadonlyWatch</name>
    <filename>classomnetpp_1_1cGenericReadonlyWatch.html</filename>
    <templarg>T</templarg>
    <base>omnetpp::cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classomnetpp_1_1cGenericReadonlyWatch.html</anchorfile>
      <anchor>aa0d8ddf8e340589ce5a4ebdc1d5e070d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classomnetpp_1_1cGenericReadonlyWatch.html</anchorfile>
      <anchor>ab03565c5009105e9a856bb7ed61f79c8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cGenericReadonlyWatch.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cGeometric</name>
    <filename>classomnetpp_1_1cGeometric.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cGeometric *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cGeometric.html</anchorfile>
      <anchor>a20b3d56f4a6b118e7af4f09ee2825af5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cGeometric.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cGeometric.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGeometric *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cGeometric.html</anchorfile>
      <anchor>a20b3d56f4a6b118e7af4f09ee2825af5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cGeometric.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cGeometric.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cGlobalRegistrationList</name>
    <filename>classomnetpp_1_1cGlobalRegistrationList.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::cGroupFigure</name>
    <filename>classomnetpp_1_1cGroupFigure.html</filename>
    <base>omnetpp::cFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cGroupFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cGroupFigure.html</anchorfile>
      <anchor>ac863db10e2a6fe4e42e0681cb2a78294</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cGroupFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cGroupFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cGroupFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGroupFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cGroupFigure.html</anchorfile>
      <anchor>ac863db10e2a6fe4e42e0681cb2a78294</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cGroupFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cGroupFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cGroupFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cModule::ChannelIterator</name>
    <filename>classomnetpp_1_1cModule_1_1ChannelIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>ChannelIterator</name>
      <anchorfile>classomnetpp_1_1cModule_1_1ChannelIterator.html</anchorfile>
      <anchor>a9e5c67e1ab527bd7089556b75594b892</anchor>
      <arglist>(const cModule *parentModule)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classomnetpp_1_1cModule_1_1ChannelIterator.html</anchorfile>
      <anchor>ad61ef1f0a4662c2d7c6dcb24fe10dd39</anchor>
      <arglist>(const cModule *parentModule)</arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>operator*</name>
      <anchorfile>classomnetpp_1_1cModule_1_1ChannelIterator.html</anchorfile>
      <anchor>ab42c0397e8c56daa659994a4bcd4fc1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED cChannel *</type>
      <name>operator()</name>
      <anchorfile>classomnetpp_1_1cModule_1_1ChannelIterator.html</anchorfile>
      <anchor>a79fe77071b53e947970b1cc50d676fe1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>end</name>
      <anchorfile>classomnetpp_1_1cModule_1_1ChannelIterator.html</anchorfile>
      <anchor>af729c6dc6f0946ed62d77f891bc2ccbf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ChannelIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classomnetpp_1_1cModule_1_1ChannelIterator.html</anchorfile>
      <anchor>a7ba8b4efe9a0139ae36dac30f781a742</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ChannelIterator &amp;</type>
      <name>operator--</name>
      <anchorfile>classomnetpp_1_1cModule_1_1ChannelIterator.html</anchorfile>
      <anchor>a40a6286724aaf278d78ea04cea519711</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cHasher</name>
    <filename>classomnetpp_1_1cHasher.html</filename>
    <base protection="private">omnetpp::noncopyable</base>
    <member kind="function">
      <type></type>
      <name>cHasher</name>
      <anchorfile>classomnetpp_1_1cHasher.html</anchorfile>
      <anchor>a59aee1f6608f0ed413f53e9f5830ef2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getHash</name>
      <anchorfile>classomnetpp_1_1cHasher.html</anchorfile>
      <anchor>a02812a1da02ab42d9340b1caecd5c5ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cHasher.html</anchorfile>
      <anchor>a94e01f5e833e1031e3b4854a7b75622c</anchor>
      <arglist>(const char *hash) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>classomnetpp_1_1cHasher.html</anchorfile>
      <anchor>ab39cfce0df3609934644071f837cdb0c</anchor>
      <arglist>(const char *hash) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cHasher.html</anchorfile>
      <anchor>ae9b08fca99a89639cd78a91152a64d5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>getHash</name>
      <anchorfile>classomnetpp_1_1cHasher.html</anchorfile>
      <anchor>a02812a1da02ab42d9340b1caecd5c5ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cHasher.html</anchorfile>
      <anchor>a94e01f5e833e1031e3b4854a7b75622c</anchor>
      <arglist>(const char *hash) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>classomnetpp_1_1cHasher.html</anchorfile>
      <anchor>ab39cfce0df3609934644071f837cdb0c</anchor>
      <arglist>(const char *hash) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cHasher.html</anchorfile>
      <anchor>ae9b08fca99a89639cd78a91152a64d5f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cHistogram</name>
    <filename>classomnetpp_1_1cHistogram.html</filename>
    <base>omnetpp::cAbstractHistogram</base>
    <member kind="enumeration">
      <type></type>
      <name>Mode</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a46c8a310cf4c094f8c80e1cb8dc1f911</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cHistogram</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>afead0728413112e5ef854470e4da6dd3</anchor>
      <arglist>(const char *name=nullptr, bool weighted=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cHistogram</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a75c2eedf8c368c519d8fc7302e74e9fa</anchor>
      <arglist>(const char *name, int numBinsHint, bool weighted=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cHistogram</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>ac940cb54abe075e115ca5bf2b29d8b00</anchor>
      <arglist>(const char *name, cIHistogramStrategy *strategy, bool weighted=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cHistogram</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>aba7bd3ded7bee460fee4934eda192e88</anchor>
      <arglist>(const cHistogram &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>cHistogram &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a56a44d4b6efaa234c7273c71d1e4001e</anchor>
      <arglist>(const cHistogram &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cHistogram</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>ab8426c7bba04c35d29042d89df9018a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cHistogram *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>aebc58bde653b205f3ec02c103d9f0179</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a3b715fbb1b1a0b5079591510e4015d0b</anchor>
      <arglist>(double value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collectWeighted</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a26fb09e47da0aceac9ffdce8555864be</anchor>
      <arglist>(double value, double weight) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a8ab0745de7fefce72d67f99f3931a3e4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>aaf03e7f40162424d4ede5cade1d3e59d</anchor>
      <arglist>(FILE *f) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a50e654b111daab01ab081728bf8fc37f</anchor>
      <arglist>(FILE *f) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>acc50284181a512fdb51eeb9a6107f9f1</anchor>
      <arglist>(const cStatistic *other) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStrategy</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>ab5508a663b70e3de77d92eba8d999954</anchor>
      <arglist>(cIHistogramStrategy *strategy)</arglist>
    </member>
    <member kind="function">
      <type>cIHistogramStrategy *</type>
      <name>getStrategy</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a1d5e644aed9d2ebe5daa3a4fac00a1ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>binsAlreadySetUp</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a1924eced1f3b786555aaf856167213b2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUpBins</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>af163dfec64f493a3c41e445228529ae6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBinEdges</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>af4370fca7990c8c0583f9b7f6588981f</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;edges)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>createUniformBins</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>acd7c62c9f4dedf6fee03e03ef09b41ea</anchor>
      <arglist>(double lo, double hi, double step)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>prependBins</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a3179369fc903fa5911ab0f3aa1cfa573</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;edges)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>appendBins</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a9097c8c562c8cbda97e3c5d549a2c98a</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;edges)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>extendBinsTo</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a645c26678e9f1baacfca7cfc79d65258</anchor>
      <arglist>(double value, double step, int maxNumBins=INT_MAX)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mergeBins</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a1d508164d542317cd315303f52f68606</anchor>
      <arglist>(int groupSize)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>getBinEdges</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>ab7495d1e241b96c4a2fde3f1e93a920d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>getBinValues</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>affb0cb248f24fcc49a626076d7b8e6d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumBins</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a795fab464dcc5ad3f5f47e504706e7cc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBinEdge</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>ab15732fd2da197eb8a8cf8bedfb5395d</anchor>
      <arglist>(int k) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBinValue</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a1fe98eb162d14cdb1db0a0d73a1c154c</anchor>
      <arglist>(int k) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getUnderflowSumWeights</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a0aadee367197f4461d70917c0b15e3e2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getOverflowSumWeights</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a2cf6ac4d4338a05976c15204b2470f68</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>getNumUnderflows</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>aef97f9622a67fc3b68b665ab4635a407</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>getNumOverflows</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a1f358b32587e8b80daaf763d71102f0a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>getNumNegInfs</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a68cfd19fe440ea3509e3624af29b6cc5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>getNumPosInfs</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>aa5f7d9be59c29732ec1bd135620281a2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getNegInfSumWeights</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a1ba0018060615b00c0d2262b8e7842b8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPosInfSumWeights</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>afbecd2c35d874f5f5707d0386650d797</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMode</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a26cbdae0a3ecc937cc3ecef34b301806</anchor>
      <arglist>(Mode mode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRange</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a07e687881ca47e0f156741052a095e26</anchor>
      <arglist>(double lower, double upper)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumPrecollectedValues</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a2d0aa79a0d0d32bd66b305432a628213</anchor>
      <arglist>(int numPrecollect)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeExtensionFactor</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>abf263e5cc58482e32921132953826c51</anchor>
      <arglist>(double rangeExtensionFactor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAutoExtend</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>af15a75863c76fbb01af5dd2a484faf40</anchor>
      <arglist>(bool autoExtend)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumBinsHint</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>abfb5e2253f669d5b95f60dcad091d52f</anchor>
      <arglist>(int numCells)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBinSizeHint</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>ad4d51cfe2a27fd961c2b21fd86079a47</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED void</type>
      <name>setRangeAuto</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a26bab1ce458a48f20349d05eb43215da</anchor>
      <arglist>(int numPrecollect=100, double rangeExtensionFactor=2.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED void</type>
      <name>setRangeAutoLower</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>aa80da6a800e1381becb0c2add19311b2</anchor>
      <arglist>(double upper, int numPrecollect=100, double rangeExtensionFactor=2.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED void</type>
      <name>setRangeAutoUpper</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>af8ed6b7b0ea7c65c396b76e4bb51decf</anchor>
      <arglist>(double lower, int numPrecollect=100, double rangeExtensionFactor=2.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED void</type>
      <name>setNumCells</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>ac83736d341cee4192266f0cdeca9a1a6</anchor>
      <arglist>(int numCells) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED void</type>
      <name>setCellSize</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>af40931101a9c978a56b52b3f2230c58e</anchor>
      <arglist>(double d) final</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cHistogram</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>afead0728413112e5ef854470e4da6dd3</anchor>
      <arglist>(const char *name=nullptr, bool weighted=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cHistogram</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a75c2eedf8c368c519d8fc7302e74e9fa</anchor>
      <arglist>(const char *name, int numBinsHint, bool weighted=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cHistogram</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>ac940cb54abe075e115ca5bf2b29d8b00</anchor>
      <arglist>(const char *name, cIHistogramStrategy *strategy, bool weighted=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cHistogram</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>aba7bd3ded7bee460fee4934eda192e88</anchor>
      <arglist>(const cHistogram &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>cHistogram &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a56a44d4b6efaa234c7273c71d1e4001e</anchor>
      <arglist>(const cHistogram &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cHistogram</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>ab8426c7bba04c35d29042d89df9018a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cHistogram *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>aebc58bde653b205f3ec02c103d9f0179</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a3b715fbb1b1a0b5079591510e4015d0b</anchor>
      <arglist>(double value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collectWeighted</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a26fb09e47da0aceac9ffdce8555864be</anchor>
      <arglist>(double value, double weight) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a8ab0745de7fefce72d67f99f3931a3e4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>aaf03e7f40162424d4ede5cade1d3e59d</anchor>
      <arglist>(FILE *f) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a50e654b111daab01ab081728bf8fc37f</anchor>
      <arglist>(FILE *f) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>acc50284181a512fdb51eeb9a6107f9f1</anchor>
      <arglist>(const cStatistic *other) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStrategy</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>ab5508a663b70e3de77d92eba8d999954</anchor>
      <arglist>(cIHistogramStrategy *strategy)</arglist>
    </member>
    <member kind="function">
      <type>cIHistogramStrategy *</type>
      <name>getStrategy</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a1d5e644aed9d2ebe5daa3a4fac00a1ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>binsAlreadySetUp</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a1924eced1f3b786555aaf856167213b2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUpBins</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>af163dfec64f493a3c41e445228529ae6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBinEdges</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>af4370fca7990c8c0583f9b7f6588981f</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;edges)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>createUniformBins</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>acd7c62c9f4dedf6fee03e03ef09b41ea</anchor>
      <arglist>(double lo, double hi, double step)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>prependBins</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a3179369fc903fa5911ab0f3aa1cfa573</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;edges)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>appendBins</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a9097c8c562c8cbda97e3c5d549a2c98a</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;edges)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>extendBinsTo</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a645c26678e9f1baacfca7cfc79d65258</anchor>
      <arglist>(double value, double step, int maxNumBins=INT_MAX)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>mergeBins</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a1d508164d542317cd315303f52f68606</anchor>
      <arglist>(int groupSize)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>getBinEdges</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>ab7495d1e241b96c4a2fde3f1e93a920d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>getBinValues</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>affb0cb248f24fcc49a626076d7b8e6d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumBins</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a795fab464dcc5ad3f5f47e504706e7cc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBinEdge</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>ab15732fd2da197eb8a8cf8bedfb5395d</anchor>
      <arglist>(int k) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBinValue</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a1fe98eb162d14cdb1db0a0d73a1c154c</anchor>
      <arglist>(int k) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getUnderflowSumWeights</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a0aadee367197f4461d70917c0b15e3e2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getOverflowSumWeights</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a2cf6ac4d4338a05976c15204b2470f68</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>getNumUnderflows</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>aef97f9622a67fc3b68b665ab4635a407</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>getNumOverflows</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a1f358b32587e8b80daaf763d71102f0a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>getNumNegInfs</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a68cfd19fe440ea3509e3624af29b6cc5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>getNumPosInfs</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>aa5f7d9be59c29732ec1bd135620281a2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getNegInfSumWeights</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a1ba0018060615b00c0d2262b8e7842b8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPosInfSumWeights</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>afbecd2c35d874f5f5707d0386650d797</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMode</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a26cbdae0a3ecc937cc3ecef34b301806</anchor>
      <arglist>(Mode mode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRange</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a07e687881ca47e0f156741052a095e26</anchor>
      <arglist>(double lower, double upper)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumPrecollectedValues</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a2d0aa79a0d0d32bd66b305432a628213</anchor>
      <arglist>(int numPrecollect)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeExtensionFactor</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>abf263e5cc58482e32921132953826c51</anchor>
      <arglist>(double rangeExtensionFactor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setAutoExtend</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>af15a75863c76fbb01af5dd2a484faf40</anchor>
      <arglist>(bool autoExtend)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumBinsHint</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>abfb5e2253f669d5b95f60dcad091d52f</anchor>
      <arglist>(int numCells)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBinSizeHint</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>ad4d51cfe2a27fd961c2b21fd86079a47</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED void</type>
      <name>setRangeAuto</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>a26bab1ce458a48f20349d05eb43215da</anchor>
      <arglist>(int numPrecollect=100, double rangeExtensionFactor=2.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED void</type>
      <name>setRangeAutoLower</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>aa80da6a800e1381becb0c2add19311b2</anchor>
      <arglist>(double upper, int numPrecollect=100, double rangeExtensionFactor=2.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED void</type>
      <name>setRangeAutoUpper</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>af8ed6b7b0ea7c65c396b76e4bb51decf</anchor>
      <arglist>(double lower, int numPrecollect=100, double rangeExtensionFactor=2.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED void</type>
      <name>setNumCells</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>ac83736d341cee4192266f0cdeca9a1a6</anchor>
      <arglist>(int numCells) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED void</type>
      <name>setCellSize</name>
      <anchorfile>classomnetpp_1_1cHistogram.html</anchorfile>
      <anchor>af40931101a9c978a56b52b3f2230c58e</anchor>
      <arglist>(double d) final</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cIconFigure</name>
    <filename>classomnetpp_1_1cIconFigure.html</filename>
    <base>omnetpp::cImageFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cIconFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cIconFigure.html</anchorfile>
      <anchor>a7ff8dc66ff87f5f9ca49c184f92bc730</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cIconFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cIconFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cIconFigure.html</anchorfile>
      <anchor>a7ff8dc66ff87f5f9ca49c184f92bc730</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cIconFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cIdealChannel</name>
    <filename>classomnetpp_1_1cIdealChannel.html</filename>
    <base>omnetpp::cChannel</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processMessage</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>a4ef096427b3d225fd8e0a79518a104f2</anchor>
      <arglist>(cMessage *msg, simtime_t t, result_t &amp;result) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getNominalDatarate</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>a6fad550c580a37726765499db9a2ae93</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>af00039aa20dc0292c0aa7148ae37ed29</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>calculateDuration</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>a7a1412953d747f4e9c46b21c5f3842be</anchor>
      <arglist>(cMessage *msg) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>a2a33010b8eca90af45bf635604cf4d35</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBusy</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>a64caf29219b831820033c69abca25309</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forceTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>af861f779937974d90cd5ffc24cbb672c</anchor>
      <arglist>(simtime_t t) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cIdealChannel</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>ace2c4f6475dec208af7a603ebdc08646</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cIdealChannel</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>a914115f2a52bd81cb5cb2dfad139d952</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cIdealChannel *</type>
      <name>create</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>ad2c8afd7d6ed8d30cb3b8a0b3d04e5ea</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>processMessage</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>a4ef096427b3d225fd8e0a79518a104f2</anchor>
      <arglist>(cMessage *msg, simtime_t t, result_t &amp;result) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getNominalDatarate</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>a6fad550c580a37726765499db9a2ae93</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isTransmissionChannel</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>af00039aa20dc0292c0aa7148ae37ed29</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>calculateDuration</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>a7a1412953d747f4e9c46b21c5f3842be</anchor>
      <arglist>(cMessage *msg) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t</type>
      <name>getTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>a2a33010b8eca90af45bf635604cf4d35</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isBusy</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>a64caf29219b831820033c69abca25309</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forceTransmissionFinishTime</name>
      <anchorfile>classomnetpp_1_1cIdealChannel.html</anchorfile>
      <anchor>af861f779937974d90cd5ffc24cbb672c</anchor>
      <arglist>(simtime_t t) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cIEventlogManager</name>
    <filename>classomnetpp_1_1cIEventlogManager.html</filename>
    <base>omnetpp::cObject</base>
    <base protection="private">omnetpp::noncopyable</base>
    <member kind="function">
      <type></type>
      <name>cIEventlogManager</name>
      <anchorfile>classomnetpp_1_1cIEventlogManager.html</anchorfile>
      <anchor>a7ffcecc9bb64e5173a10cf6f70da5258</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cIEventlogManager</name>
      <anchorfile>classomnetpp_1_1cIEventlogManager.html</anchorfile>
      <anchor>a5dd948fc43922b2bde37f0441ea02d52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startRecording</name>
      <anchorfile>classomnetpp_1_1cIEventlogManager.html</anchorfile>
      <anchor>aab3b4fd12b67c81c79e75fcb6171dc47</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>stopRecording</name>
      <anchorfile>classomnetpp_1_1cIEventlogManager.html</anchorfile>
      <anchor>ad317961823d3cd6e0345e004a4831fea</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classomnetpp_1_1cIEventlogManager.html</anchorfile>
      <anchor>a50ab71f4bc571f6e246b20db4b3dd131</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFileName</name>
      <anchorfile>classomnetpp_1_1cIEventlogManager.html</anchorfile>
      <anchor>ae029375c4f36cc1abf4fb90e398d5831</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cIEventlogManager</name>
      <anchorfile>classomnetpp_1_1cIEventlogManager.html</anchorfile>
      <anchor>a7ffcecc9bb64e5173a10cf6f70da5258</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cIEventlogManager</name>
      <anchorfile>classomnetpp_1_1cIEventlogManager.html</anchorfile>
      <anchor>a5dd948fc43922b2bde37f0441ea02d52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startRecording</name>
      <anchorfile>classomnetpp_1_1cIEventlogManager.html</anchorfile>
      <anchor>aab3b4fd12b67c81c79e75fcb6171dc47</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>stopRecording</name>
      <anchorfile>classomnetpp_1_1cIEventlogManager.html</anchorfile>
      <anchor>ad317961823d3cd6e0345e004a4831fea</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classomnetpp_1_1cIEventlogManager.html</anchorfile>
      <anchor>a50ab71f4bc571f6e246b20db4b3dd131</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFileName</name>
      <anchorfile>classomnetpp_1_1cIEventlogManager.html</anchorfile>
      <anchor>ae029375c4f36cc1abf4fb90e398d5831</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cIHistogramStrategy</name>
    <filename>classomnetpp_1_1cIHistogramStrategy.html</filename>
    <base>omnetpp::cObject</base>
    <member kind="function">
      <type>void</type>
      <name>setHistogram</name>
      <anchorfile>classomnetpp_1_1cIHistogramStrategy.html</anchorfile>
      <anchor>a875b58887ad1d736bbe0f7f61de62fae</anchor>
      <arglist>(cHistogram *hist)</arglist>
    </member>
    <member kind="function">
      <type>cHistogram *</type>
      <name>getHistogram</name>
      <anchorfile>classomnetpp_1_1cIHistogramStrategy.html</anchorfile>
      <anchor>a820d1f255684165491ec0ee5c3315710</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cIHistogramStrategy.html</anchorfile>
      <anchor>a44ae7468613c0838407990d1a3255218</anchor>
      <arglist>(double value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>collectWeighted</name>
      <anchorfile>classomnetpp_1_1cIHistogramStrategy.html</anchorfile>
      <anchor>a8880f3428ddfcf38c035992115a13005</anchor>
      <arglist>(double value, double weight)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setUpBins</name>
      <anchorfile>classomnetpp_1_1cIHistogramStrategy.html</anchorfile>
      <anchor>af3ca6ebaae445281842053686d47f41c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cIHistogramStrategy.html</anchorfile>
      <anchor>a5eeb94d22b8366d1b68d0614384802fe</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setHistogram</name>
      <anchorfile>classomnetpp_1_1cIHistogramStrategy.html</anchorfile>
      <anchor>a875b58887ad1d736bbe0f7f61de62fae</anchor>
      <arglist>(cHistogram *hist)</arglist>
    </member>
    <member kind="function">
      <type>cHistogram *</type>
      <name>getHistogram</name>
      <anchorfile>classomnetpp_1_1cIHistogramStrategy.html</anchorfile>
      <anchor>a820d1f255684165491ec0ee5c3315710</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cIHistogramStrategy.html</anchorfile>
      <anchor>a44ae7468613c0838407990d1a3255218</anchor>
      <arglist>(double value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>collectWeighted</name>
      <anchorfile>classomnetpp_1_1cIHistogramStrategy.html</anchorfile>
      <anchor>a8880f3428ddfcf38c035992115a13005</anchor>
      <arglist>(double value, double weight)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setUpBins</name>
      <anchorfile>classomnetpp_1_1cIHistogramStrategy.html</anchorfile>
      <anchor>af3ca6ebaae445281842053686d47f41c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cIHistogramStrategy.html</anchorfile>
      <anchor>a5eeb94d22b8366d1b68d0614384802fe</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cIListener</name>
    <filename>classomnetpp_1_1cIListener.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cIListener.html</anchorfile>
      <anchor>a9202aa79acbe49d9482cda70d4fa52e2</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, bool b, cObject *details)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cIListener.html</anchorfile>
      <anchor>a9d6636d2c93be4f900d2f34ef7573d6c</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, long l, cObject *details)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cIListener.html</anchorfile>
      <anchor>ad82b98756b1af55e606a3708f3d3079c</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, unsigned long l, cObject *details)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cIListener.html</anchorfile>
      <anchor>ae943cf67eaa6c6f3a73c3ac0ad306f42</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, double d, cObject *details)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cIListener.html</anchorfile>
      <anchor>a3f4bb7e9f977e9f47ffd4dcf74bf7de1</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, const SimTime &amp;t, cObject *details)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cIListener.html</anchorfile>
      <anchor>a15bbca55a64d40d18148cfb22bd46bea</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, const char *s, cObject *details)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cIListener.html</anchorfile>
      <anchor>ac143f86dc3f306f5e784a8762fc7eafc</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj, cObject *details)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classomnetpp_1_1cIListener.html</anchorfile>
      <anchor>a4d9f3bfc96e4ec8a2bd8cf0617789008</anchor>
      <arglist>(cComponent *component, simsignal_t signalID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>subscribedTo</name>
      <anchorfile>classomnetpp_1_1cIListener.html</anchorfile>
      <anchor>a2d28c5d95d9df8964cd8bb941bf3011c</anchor>
      <arglist>(cComponent *component, simsignal_t signalID)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unsubscribedFrom</name>
      <anchorfile>classomnetpp_1_1cIListener.html</anchorfile>
      <anchor>a8ffe7a50835dc5a5d3976d8785a86c5c</anchor>
      <arglist>(cComponent *component, simsignal_t signalID)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSubscribeCount</name>
      <anchorfile>classomnetpp_1_1cIListener.html</anchorfile>
      <anchor>a4265c93a0b87a7901213c4c9c9aea996</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cImageFigure</name>
    <filename>classomnetpp_1_1cImageFigure.html</filename>
    <base>omnetpp::cAbstractImageFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cImageFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cImageFigure.html</anchorfile>
      <anchor>ab214aaa5c7cb9bf3e4b34a7731e61ff2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cImageFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cImageFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cImageFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getImageName</name>
      <anchorfile>classomnetpp_1_1cImageFigure.html</anchorfile>
      <anchor>a129cbec42d79e2b5da92200f69bbb570</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setImageName</name>
      <anchorfile>classomnetpp_1_1cImageFigure.html</anchorfile>
      <anchor>ab019544bea2f939e8a242ff6c9c76fba</anchor>
      <arglist>(const char *imageName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getImageNaturalWidth</name>
      <anchorfile>classomnetpp_1_1cImageFigure.html</anchorfile>
      <anchor>a29f3f0777df9a45e5cf58cf79207b594</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getImageNaturalHeight</name>
      <anchorfile>classomnetpp_1_1cImageFigure.html</anchorfile>
      <anchor>a1696d7e3c305ca88a7b108b635d3ce47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const char **</type>
      <name>getAllowedPropertyKeys</name>
      <anchorfile>classomnetpp_1_1cImageFigure.html</anchorfile>
      <anchor>a3cc500add699158ae5b2b138fdf6c2bd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cImageFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cImageFigure.html</anchorfile>
      <anchor>ab214aaa5c7cb9bf3e4b34a7731e61ff2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cImageFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cImageFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cImageFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getImageName</name>
      <anchorfile>classomnetpp_1_1cImageFigure.html</anchorfile>
      <anchor>a129cbec42d79e2b5da92200f69bbb570</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setImageName</name>
      <anchorfile>classomnetpp_1_1cImageFigure.html</anchorfile>
      <anchor>ab019544bea2f939e8a242ff6c9c76fba</anchor>
      <arglist>(const char *imageName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getImageNaturalWidth</name>
      <anchorfile>classomnetpp_1_1cImageFigure.html</anchorfile>
      <anchor>a29f3f0777df9a45e5cf58cf79207b594</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getImageNaturalHeight</name>
      <anchorfile>classomnetpp_1_1cImageFigure.html</anchorfile>
      <anchor>a1696d7e3c305ca88a7b108b635d3ce47</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cIntParImpl</name>
    <filename>classomnetpp_1_1cIntParImpl.html</filename>
    <base>omnetpp::cParImpl</base>
    <member kind="function">
      <type></type>
      <name>cIntParImpl</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>ae3508186c87bb5624eb1673cb4e8a2e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cIntParImpl</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>a7dc7acd56076910e52fc52bb5d6b696d</anchor>
      <arglist>(const cIntParImpl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cIntParImpl</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>acd023c1d5f0da39470d6b71c1fcdb03b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>a1cef3b59822bf4e9f4b978675dd76b3d</anchor>
      <arglist>(const cIntParImpl &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cIntParImpl *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>ab0f9fb69f3a6be0052d78dcfe7a18f88</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>ae6d272d4af05edaa7725ad60b1ec2104</anchor>
      <arglist>(bool b) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIntValue</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>a588e175407a2d81f79cec520e7044d20</anchor>
      <arglist>(intpar_t l) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>a45f547947e811beaeec71863a1675ba1</anchor>
      <arglist>(double d) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>a9e63a9930c4106d99ab35a8645698a27</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>a0abe99195e911d2173519bf8064f5af2</anchor>
      <arglist>(cXMLElement *node) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>a80af423d87336c25c28fe91e6bac674b</anchor>
      <arglist>(cExpression *e) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>aaed8a179966631fb8c64b1f963d0b685</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual intpar_t</type>
      <name>intValue</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>ac2b650859b0d6cc642bd26aa6af780ff</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>a3438e6138743a93a08dde61c9411c711</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>af3bb05e9109c2f97e71d71e60548a1e4</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>a7d0617a09188f05593e7036a73723857</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>a6b6dfe5cc802e0a3a971ed99d8908d95</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>a5f09bfa40706213278e1ea6a6e4a8d69</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>af4400fbe676882b9264a856cf952559c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>af862a39478bb95377b2734d86a30083b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>convertToConst</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>a57c1d4c81cdb80b4bc12201a1a804c53</anchor>
      <arglist>(cComponent *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>ac880f5e94434ade08fbe54634fe95378</anchor>
      <arglist>(const char *text) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>a9ed037b0e3f46f4d1d4d0f44041adf45</anchor>
      <arglist>(const cParImpl *other) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cIntParImpl</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>ae3508186c87bb5624eb1673cb4e8a2e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cIntParImpl</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>a7dc7acd56076910e52fc52bb5d6b696d</anchor>
      <arglist>(const cIntParImpl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cIntParImpl</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>acd023c1d5f0da39470d6b71c1fcdb03b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>a1cef3b59822bf4e9f4b978675dd76b3d</anchor>
      <arglist>(const cIntParImpl &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cIntParImpl *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>ab0f9fb69f3a6be0052d78dcfe7a18f88</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>ae6d272d4af05edaa7725ad60b1ec2104</anchor>
      <arglist>(bool b) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIntValue</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>a588e175407a2d81f79cec520e7044d20</anchor>
      <arglist>(intpar_t l) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>a45f547947e811beaeec71863a1675ba1</anchor>
      <arglist>(double d) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>a9e63a9930c4106d99ab35a8645698a27</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>a0abe99195e911d2173519bf8064f5af2</anchor>
      <arglist>(cXMLElement *node) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>a80af423d87336c25c28fe91e6bac674b</anchor>
      <arglist>(cExpression *e) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>aaed8a179966631fb8c64b1f963d0b685</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual intpar_t</type>
      <name>intValue</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>ac2b650859b0d6cc642bd26aa6af780ff</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>a3438e6138743a93a08dde61c9411c711</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>af3bb05e9109c2f97e71d71e60548a1e4</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>a7d0617a09188f05593e7036a73723857</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>a6b6dfe5cc802e0a3a971ed99d8908d95</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>a5f09bfa40706213278e1ea6a6e4a8d69</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>af4400fbe676882b9264a856cf952559c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>af862a39478bb95377b2734d86a30083b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>convertToConst</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>a57c1d4c81cdb80b4bc12201a1a804c53</anchor>
      <arglist>(cComponent *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>ac880f5e94434ade08fbe54634fe95378</anchor>
      <arglist>(const char *text) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cIntParImpl.html</anchorfile>
      <anchor>a9ed037b0e3f46f4d1d4d0f44041adf45</anchor>
      <arglist>(const cParImpl *other) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cIntUniform</name>
    <filename>classomnetpp_1_1cIntUniform.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cIntUniform *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cIntUniform.html</anchorfile>
      <anchor>a897b9d81dae0f7b4f4df97a435e05859</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cIntUniform.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cIntUniform.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cIntUniform *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cIntUniform.html</anchorfile>
      <anchor>a897b9d81dae0f7b4f4df97a435e05859</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cIntUniform.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cIntUniform.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cIntUniformExcl</name>
    <filename>classomnetpp_1_1cIntUniformExcl.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cIntUniformExcl *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cIntUniformExcl.html</anchorfile>
      <anchor>a31119dfe957269d20da52cedc0281fcd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cIntUniformExcl.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cIntUniformExcl.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cIntUniformExcl *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cIntUniformExcl.html</anchorfile>
      <anchor>a31119dfe957269d20da52cedc0281fcd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cIntUniformExcl.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cIntUniformExcl.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cIOutputScalarManager</name>
    <filename>classomnetpp_1_1cIOutputScalarManager.html</filename>
    <base>omnetpp::cObject</base>
    <base>omnetpp::cISimulationLifecycleListener</base>
    <base protection="private">omnetpp::noncopyable</base>
    <member kind="function">
      <type></type>
      <name>cIOutputScalarManager</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>acb3f358ec2ca20d58b0a6a3c3dce55ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cIOutputScalarManager</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>ab2ed6a81b443756f97c3212e8ff78bdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>a945f0ee7e688a845f6126df7fb3bbf1f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>afc14f15d79c65a7ac5dc13d4861f8845</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recordScalar</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>a146cd0fd58bf0c3b8229f8f1d9539754</anchor>
      <arglist>(cComponent *component, const char *name, double value, opp_string_map *attributes=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recordStatistic</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>adc729620384c00f93f3c3b6c030371b8</anchor>
      <arglist>(cComponent *component, const char *name, cStatistic *statistic, opp_string_map *attributes=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFileName</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>ae029375c4f36cc1abf4fb90e398d5831</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>a50ab71f4bc571f6e246b20db4b3dd131</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>lifecycleEvent</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>ac3f8273ae98126597b2235425d17ceb1</anchor>
      <arglist>(SimulationLifecycleEventType eventType, cObject *details) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cIOutputScalarManager</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>acb3f358ec2ca20d58b0a6a3c3dce55ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cIOutputScalarManager</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>ab2ed6a81b443756f97c3212e8ff78bdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>a945f0ee7e688a845f6126df7fb3bbf1f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>afc14f15d79c65a7ac5dc13d4861f8845</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recordScalar</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>a146cd0fd58bf0c3b8229f8f1d9539754</anchor>
      <arglist>(cComponent *component, const char *name, double value, opp_string_map *attributes=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recordStatistic</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>adc729620384c00f93f3c3b6c030371b8</anchor>
      <arglist>(cComponent *component, const char *name, cStatistic *statistic, opp_string_map *attributes=nullptr)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFileName</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>ae029375c4f36cc1abf4fb90e398d5831</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classomnetpp_1_1cIOutputScalarManager.html</anchorfile>
      <anchor>a50ab71f4bc571f6e246b20db4b3dd131</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cIOutputVectorManager</name>
    <filename>classomnetpp_1_1cIOutputVectorManager.html</filename>
    <base>omnetpp::cObject</base>
    <base>omnetpp::cISimulationLifecycleListener</base>
    <base protection="private">omnetpp::noncopyable</base>
    <member kind="function">
      <type></type>
      <name>cIOutputVectorManager</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>ab0a261b859d50450f1b53fdb78d3f213</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cIOutputVectorManager</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>ab8255275d2e87ff0e137c90a1232a5ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>a945f0ee7e688a845f6126df7fb3bbf1f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>afc14f15d79c65a7ac5dc13d4861f8845</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>registerVector</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>a23b45317f0bd3557f7e275408dffd52a</anchor>
      <arglist>(const char *modulename, const char *vectorname)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>deregisterVector</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>aed071088dc572c5ba80d42e8c2bd3865</anchor>
      <arglist>(void *vechandle)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setVectorAttribute</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>af32389e8e2d4b720a4b9849a5021f508</anchor>
      <arglist>(void *vechandle, const char *name, const char *value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>record</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>af7cf5246deaab8e821500bc496f84ddb</anchor>
      <arglist>(void *vechandle, simtime_t t, double value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFileName</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>ae029375c4f36cc1abf4fb90e398d5831</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>a50ab71f4bc571f6e246b20db4b3dd131</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>lifecycleEvent</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>ac3f8273ae98126597b2235425d17ceb1</anchor>
      <arglist>(SimulationLifecycleEventType eventType, cObject *details) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cIOutputVectorManager</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>ab0a261b859d50450f1b53fdb78d3f213</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cIOutputVectorManager</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>ab8255275d2e87ff0e137c90a1232a5ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>a945f0ee7e688a845f6126df7fb3bbf1f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>afc14f15d79c65a7ac5dc13d4861f8845</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void *</type>
      <name>registerVector</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>a23b45317f0bd3557f7e275408dffd52a</anchor>
      <arglist>(const char *modulename, const char *vectorname)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>deregisterVector</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>aed071088dc572c5ba80d42e8c2bd3865</anchor>
      <arglist>(void *vechandle)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setVectorAttribute</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>af32389e8e2d4b720a4b9849a5021f508</anchor>
      <arglist>(void *vechandle, const char *name, const char *value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>record</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>af7cf5246deaab8e821500bc496f84ddb</anchor>
      <arglist>(void *vechandle, simtime_t t, double value)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFileName</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>ae029375c4f36cc1abf4fb90e398d5831</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classomnetpp_1_1cIOutputVectorManager.html</anchorfile>
      <anchor>a50ab71f4bc571f6e246b20db4b3dd131</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cISimulationLifecycleListener</name>
    <filename>classomnetpp_1_1cISimulationLifecycleListener.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cISimulationLifecycleListener</name>
      <anchorfile>classomnetpp_1_1cISimulationLifecycleListener.html</anchorfile>
      <anchor>a444b1d88a2be1b1d48337ebdb4029848</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>lifecycleEvent</name>
      <anchorfile>classomnetpp_1_1cISimulationLifecycleListener.html</anchorfile>
      <anchor>a48eebdf97ccee9c03ddc732db16d7ed7</anchor>
      <arglist>(SimulationLifecycleEventType eventType, cObject *details)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>listenerAdded</name>
      <anchorfile>classomnetpp_1_1cISimulationLifecycleListener.html</anchorfile>
      <anchor>a391446431455b96e9f8df56df8d2b092</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>listenerRemoved</name>
      <anchorfile>classomnetpp_1_1cISimulationLifecycleListener.html</anchorfile>
      <anchor>a739aacad80f0410eebd9f7056d172950</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getSimulationLifecycleEventName</name>
      <anchorfile>classomnetpp_1_1cISimulationLifecycleListener.html</anchorfile>
      <anchor>a36ef52c425e731db35d72c9b225a8815</anchor>
      <arglist>(SimulationLifecycleEventType eventType)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cISnapshotManager</name>
    <filename>classomnetpp_1_1cISnapshotManager.html</filename>
    <base>omnetpp::cObject</base>
    <base>omnetpp::cISimulationLifecycleListener</base>
    <base protection="private">omnetpp::noncopyable</base>
    <member kind="function">
      <type></type>
      <name>cISnapshotManager</name>
      <anchorfile>classomnetpp_1_1cISnapshotManager.html</anchorfile>
      <anchor>a53e3a474845ffdf2941cb67d041cdb90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cISnapshotManager</name>
      <anchorfile>classomnetpp_1_1cISnapshotManager.html</anchorfile>
      <anchor>a1783e5f897a4ed548c8c64d47ea3d1c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classomnetpp_1_1cISnapshotManager.html</anchorfile>
      <anchor>a945f0ee7e688a845f6126df7fb3bbf1f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classomnetpp_1_1cISnapshotManager.html</anchorfile>
      <anchor>afc14f15d79c65a7ac5dc13d4861f8845</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::ostream *</type>
      <name>getStreamForSnapshot</name>
      <anchorfile>classomnetpp_1_1cISnapshotManager.html</anchorfile>
      <anchor>aa4a27a22e8c9b9e35912fd6e26b1fc55</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>releaseStreamForSnapshot</name>
      <anchorfile>classomnetpp_1_1cISnapshotManager.html</anchorfile>
      <anchor>aad78c37d423020e93ffc850e36c5182a</anchor>
      <arglist>(std::ostream *os)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFileName</name>
      <anchorfile>classomnetpp_1_1cISnapshotManager.html</anchorfile>
      <anchor>ae029375c4f36cc1abf4fb90e398d5831</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>lifecycleEvent</name>
      <anchorfile>classomnetpp_1_1cISnapshotManager.html</anchorfile>
      <anchor>ac3f8273ae98126597b2235425d17ceb1</anchor>
      <arglist>(SimulationLifecycleEventType eventType, cObject *details) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cISnapshotManager</name>
      <anchorfile>classomnetpp_1_1cISnapshotManager.html</anchorfile>
      <anchor>a53e3a474845ffdf2941cb67d041cdb90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cISnapshotManager</name>
      <anchorfile>classomnetpp_1_1cISnapshotManager.html</anchorfile>
      <anchor>a1783e5f897a4ed548c8c64d47ea3d1c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classomnetpp_1_1cISnapshotManager.html</anchorfile>
      <anchor>a945f0ee7e688a845f6126df7fb3bbf1f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classomnetpp_1_1cISnapshotManager.html</anchorfile>
      <anchor>afc14f15d79c65a7ac5dc13d4861f8845</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::ostream *</type>
      <name>getStreamForSnapshot</name>
      <anchorfile>classomnetpp_1_1cISnapshotManager.html</anchorfile>
      <anchor>aa4a27a22e8c9b9e35912fd6e26b1fc55</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>releaseStreamForSnapshot</name>
      <anchorfile>classomnetpp_1_1cISnapshotManager.html</anchorfile>
      <anchor>aad78c37d423020e93ffc850e36c5182a</anchor>
      <arglist>(std::ostream *os)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getFileName</name>
      <anchorfile>classomnetpp_1_1cISnapshotManager.html</anchorfile>
      <anchor>ae029375c4f36cc1abf4fb90e398d5831</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cITimestampedValue</name>
    <filename>classomnetpp_1_1cITimestampedValue.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cITimestampedValue</name>
      <anchorfile>classomnetpp_1_1cITimestampedValue.html</anchorfile>
      <anchor>a10a588e813d4b30dff99f65ec8dfef8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual simtime_t_cref</type>
      <name>getTimestamp</name>
      <anchorfile>classomnetpp_1_1cITimestampedValue.html</anchorfile>
      <anchor>a828ee2e4ea52cd863c799cad97a22214</anchor>
      <arglist>(simsignal_t signalID) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SimsignalType</type>
      <name>getValueType</name>
      <anchorfile>classomnetpp_1_1cITimestampedValue.html</anchorfile>
      <anchor>a770ea36524d7b36209ba33a9312d4fbb</anchor>
      <arglist>(simsignal_t signalID) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cKSplit</name>
    <filename>classomnetpp_1_1cKSplit.html</filename>
    <base>omnetpp::cPrecollectionBasedDensityEst</base>
    <class kind="struct">omnetpp::cKSplit::Grid</class>
    <class kind="class">omnetpp::cKSplit::Iterator</class>
    <member kind="typedef">
      <type>int(*</type>
      <name>CritFunc</name>
      <anchorfile>group__Statistics.html</anchorfile>
      <anchor>gaf380c0952190c3d595b7a1de8d43e5bc</anchor>
      <arglist>)(const cKSplit &amp;, cKSplit::Grid &amp;, int, double *)</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>DivFunc</name>
      <anchorfile>group__Statistics.html</anchorfile>
      <anchor>ga3da446f624c1d69471059b2c72031ab7</anchor>
      <arglist>)(const cKSplit &amp;, cKSplit::Grid &amp;, double, double *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cKSplit</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>aa4aa24ec878b159f78ad7b1d6b6a1416</anchor>
      <arglist>(const char *name=nullptr, bool weighted=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cKSplit</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a6647dc548ac1bc9a3711ad0ea99d84bc</anchor>
      <arglist>(const cKSplit &amp;r)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cKSplit</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>aec3155ff5e969838da7e4bae282f8ea7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cKSplit &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a5386c603951d05866a16417ce4f969a4</anchor>
      <arglist>(const cKSplit &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cKSplit *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a7fe2f3c99300f380312b243dede4d09a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUpBins</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>af163dfec64f493a3c41e445228529ae6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumBins</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a795fab464dcc5ad3f5f47e504706e7cc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBinEdge</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>ab15732fd2da197eb8a8cf8bedfb5395d</anchor>
      <arglist>(int k) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBinValue</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a1fe98eb162d14cdb1db0a0d73a1c154c</anchor>
      <arglist>(int k) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>acc50284181a512fdb51eeb9a6107f9f1</anchor>
      <arglist>(const cStatistic *other) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a8ab0745de7fefce72d67f99f3931a3e4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a01e6d44b83e335cfe73d46c676495711</anchor>
      <arglist>(FILE *) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a395dbbaaff2a5685b2b4b6633bda651f</anchor>
      <arglist>(FILE *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCritFunc</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>ad56b858b092960c5f9c626785740770c</anchor>
      <arglist>(CritFunc _critfunc, double *_critdata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDivFunc</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a08d9d6fc3fe8be5de65a80fca4b4132a</anchor>
      <arglist>(DivFunc _divfunc, double *_divdata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRangeExtension</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a112ce4e6e8a6fadde711199e25239302</anchor>
      <arglist>(bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTreeDepth</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a38df2184689a3d34f544f36b133eec82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTreeDepth</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>ab879d980ef69529e26ed43e8fb41a38b</anchor>
      <arglist>(Grid &amp;grid) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRealCellValue</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a68839f3039026f103b7a1c3d061149a6</anchor>
      <arglist>(Grid &amp;grid, int cell) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printGrids</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a3cb2f95660a226f6fd8eca3e27da12d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Grid &amp;</type>
      <name>getGrid</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a414d939e015bd6c8e551e6570244f0e2</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="function">
      <type>Grid &amp;</type>
      <name>getRootGrid</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>ab7c58aeb7eb29cd97f56d7f926bedb41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>collectIntoHistogram</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>acaeeea58fbcae0ee2e8e6e7e8ea6be52</anchor>
      <arglist>(double val) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>collectWeightedIntoHistogram</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a4e19de34d875a6e58311e395d0bea539</anchor>
      <arglist>(double value, double weight) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cKSplit</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>aa4aa24ec878b159f78ad7b1d6b6a1416</anchor>
      <arglist>(const char *name=nullptr, bool weighted=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cKSplit</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a6647dc548ac1bc9a3711ad0ea99d84bc</anchor>
      <arglist>(const cKSplit &amp;r)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cKSplit</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>aec3155ff5e969838da7e4bae282f8ea7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cKSplit &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a5386c603951d05866a16417ce4f969a4</anchor>
      <arglist>(const cKSplit &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cKSplit *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a7fe2f3c99300f380312b243dede4d09a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUpBins</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>af163dfec64f493a3c41e445228529ae6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumBins</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a795fab464dcc5ad3f5f47e504706e7cc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBinEdge</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>ab15732fd2da197eb8a8cf8bedfb5395d</anchor>
      <arglist>(int k) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBinValue</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a1fe98eb162d14cdb1db0a0d73a1c154c</anchor>
      <arglist>(int k) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>acc50284181a512fdb51eeb9a6107f9f1</anchor>
      <arglist>(const cStatistic *other) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a8ab0745de7fefce72d67f99f3931a3e4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a01e6d44b83e335cfe73d46c676495711</anchor>
      <arglist>(FILE *) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a395dbbaaff2a5685b2b4b6633bda651f</anchor>
      <arglist>(FILE *) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCritFunc</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>ad56b858b092960c5f9c626785740770c</anchor>
      <arglist>(CritFunc _critfunc, double *_critdata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDivFunc</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a08d9d6fc3fe8be5de65a80fca4b4132a</anchor>
      <arglist>(DivFunc _divfunc, double *_divdata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRangeExtension</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a112ce4e6e8a6fadde711199e25239302</anchor>
      <arglist>(bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTreeDepth</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a38df2184689a3d34f544f36b133eec82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getTreeDepth</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>ab879d980ef69529e26ed43e8fb41a38b</anchor>
      <arglist>(Grid &amp;grid) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getRealCellValue</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a68839f3039026f103b7a1c3d061149a6</anchor>
      <arglist>(Grid &amp;grid, int cell) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printGrids</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a3cb2f95660a226f6fd8eca3e27da12d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Grid &amp;</type>
      <name>getGrid</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>a414d939e015bd6c8e551e6570244f0e2</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="function">
      <type>Grid &amp;</type>
      <name>getRootGrid</name>
      <anchorfile>classomnetpp_1_1cKSplit.html</anchorfile>
      <anchor>ab7c58aeb7eb29cd97f56d7f926bedb41</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cLabelFigure</name>
    <filename>classomnetpp_1_1cLabelFigure.html</filename>
    <base>omnetpp::cAbstractTextFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cLabelFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cLabelFigure.html</anchorfile>
      <anchor>a2a47391742ebb739de80898903cc1bcf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cLabelFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cLabelFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const char **</type>
      <name>getAllowedPropertyKeys</name>
      <anchorfile>classomnetpp_1_1cLabelFigure.html</anchorfile>
      <anchor>a3cc500add699158ae5b2b138fdf6c2bd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cLabelFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cLabelFigure.html</anchorfile>
      <anchor>a2a47391742ebb739de80898903cc1bcf</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cLabelFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cLabelFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cLCG32</name>
    <filename>classomnetpp_1_1cLCG32.html</filename>
    <base>omnetpp::cRNG</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classomnetpp_1_1cLCG32.html</anchorfile>
      <anchor>a97d0cf80d1a11c6270b92ae548fae74f</anchor>
      <arglist>(int seedSet, int rngId, int numRngs, int parsimProcId, int parsimNumPartitions, cConfiguration *cfg) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selfTest</name>
      <anchorfile>classomnetpp_1_1cLCG32.html</anchorfile>
      <anchor>ab3e4dab712a67d9c1c24e336eb5a6609</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>intRand</name>
      <anchorfile>classomnetpp_1_1cLCG32.html</anchorfile>
      <anchor>acd6a60c2b1ea304b32a3272ca5158c27</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>intRandMax</name>
      <anchorfile>classomnetpp_1_1cLCG32.html</anchorfile>
      <anchor>a54c19a6c552efcfe69fe38c5b16d8ba0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>intRand</name>
      <anchorfile>classomnetpp_1_1cLCG32.html</anchorfile>
      <anchor>a1b57a3dd02eaa642a0a19b191d496f23</anchor>
      <arglist>(unsigned long n) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleRand</name>
      <anchorfile>classomnetpp_1_1cLCG32.html</anchorfile>
      <anchor>af47475884a1eb5d04f71bdf216bfd6ac</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleRandNonz</name>
      <anchorfile>classomnetpp_1_1cLCG32.html</anchorfile>
      <anchor>afa34031c0bae20ca8f63aa3d5429b8d5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleRandIncl1</name>
      <anchorfile>classomnetpp_1_1cLCG32.html</anchorfile>
      <anchor>a623300784c4501c0a764711cf17f5501</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cLegacyHistogram</name>
    <filename>classomnetpp_1_1cLegacyHistogram.html</filename>
    <base>omnetpp::cLegacyHistogramBase</base>
    <member kind="function">
      <type></type>
      <name>cLegacyHistogram</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>af37f2efc80ebe538fee73f2645c89cdc</anchor>
      <arglist>(const cLegacyHistogram &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cLegacyHistogram</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>a1bfa41ffd0104182b072470bb964f7c5</anchor>
      <arglist>(const char *name=nullptr, int numcells=-1, Mode mode=MODE_AUTO, bool weighted=false)</arglist>
    </member>
    <member kind="function">
      <type>cLegacyHistogram &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>a12d0bbc72e70bd67ead7c27452b5f502</anchor>
      <arglist>(const cLegacyHistogram &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBinEdge</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>ab15732fd2da197eb8a8cf8bedfb5395d</anchor>
      <arglist>(int k) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBinValue</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>a1fe98eb162d14cdb1db0a0d73a1c154c</anchor>
      <arglist>(int k) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPDF</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>af219a8cbd290e37ca09d228ba634486c</anchor>
      <arglist>(double x) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCDF</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>acc18779cac5cfcefbc3a539c759dc917</anchor>
      <arglist>(double x) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>a01e6d44b83e335cfe73d46c676495711</anchor>
      <arglist>(FILE *) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>a395dbbaaff2a5685b2b4b6633bda651f</anchor>
      <arglist>(FILE *) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMode</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>a26cbdae0a3ecc937cc3ecef34b301806</anchor>
      <arglist>(Mode mode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mode</type>
      <name>getMode</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>a9d7a3b03c2067517da18659b5da6cc16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCellSize</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>a99284643a305d5cd0604886c5d8b3578</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCellSize</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>aeaf67e4458bfaa37d1b02333380916f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>collectIntoHistogram</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>a26eb19230615e43a7f8e0f4dc0c83612</anchor>
      <arglist>(double value) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>collectWeightedIntoHistogram</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>a4e19de34d875a6e58311e395d0bea539</anchor>
      <arglist>(double value, double weight) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setupRange</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>a5c8575332a1945fdc0ed190ca820619c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cLegacyHistogram</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>af37f2efc80ebe538fee73f2645c89cdc</anchor>
      <arglist>(const cLegacyHistogram &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cLegacyHistogram</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>a1bfa41ffd0104182b072470bb964f7c5</anchor>
      <arglist>(const char *name=nullptr, int numcells=-1, Mode mode=MODE_AUTO, bool weighted=false)</arglist>
    </member>
    <member kind="function">
      <type>cLegacyHistogram &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>a12d0bbc72e70bd67ead7c27452b5f502</anchor>
      <arglist>(const cLegacyHistogram &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBinEdge</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>ab15732fd2da197eb8a8cf8bedfb5395d</anchor>
      <arglist>(int k) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBinValue</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>a1fe98eb162d14cdb1db0a0d73a1c154c</anchor>
      <arglist>(int k) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPDF</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>af219a8cbd290e37ca09d228ba634486c</anchor>
      <arglist>(double x) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCDF</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>acc18779cac5cfcefbc3a539c759dc917</anchor>
      <arglist>(double x) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>a01e6d44b83e335cfe73d46c676495711</anchor>
      <arglist>(FILE *) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>a395dbbaaff2a5685b2b4b6633bda651f</anchor>
      <arglist>(FILE *) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMode</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>a26cbdae0a3ecc937cc3ecef34b301806</anchor>
      <arglist>(Mode mode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Mode</type>
      <name>getMode</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>a9d7a3b03c2067517da18659b5da6cc16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCellSize</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>a99284643a305d5cd0604886c5d8b3578</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCellSize</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogram.html</anchorfile>
      <anchor>aeaf67e4458bfaa37d1b02333380916f9</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cLegacyHistogramBase</name>
    <filename>classomnetpp_1_1cLegacyHistogramBase.html</filename>
    <base>omnetpp::cPrecollectionBasedDensityEst</base>
    <member kind="function">
      <type></type>
      <name>cLegacyHistogramBase</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogramBase.html</anchorfile>
      <anchor>a86dd04256e9363f3d56f5060bf0bb2d3</anchor>
      <arglist>(const cLegacyHistogramBase &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cLegacyHistogramBase</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogramBase.html</anchorfile>
      <anchor>a95a8f0e887662738dfdce02cbbd35f74</anchor>
      <arglist>(const char *name, int numcells, bool weighted=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cLegacyHistogramBase</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogramBase.html</anchorfile>
      <anchor>ab5c9633b1ab1bec427bf63bc0f5e5cdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cLegacyHistogramBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogramBase.html</anchorfile>
      <anchor>a1d02ffacb8e86792a54cb35553067431</anchor>
      <arglist>(const cLegacyHistogramBase &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogramBase.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogramBase.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogramBase.html</anchorfile>
      <anchor>a8ab0745de7fefce72d67f99f3931a3e4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUpBins</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogramBase.html</anchorfile>
      <anchor>af163dfec64f493a3c41e445228529ae6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumBins</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogramBase.html</anchorfile>
      <anchor>a795fab464dcc5ad3f5f47e504706e7cc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogramBase.html</anchorfile>
      <anchor>a01e6d44b83e335cfe73d46c676495711</anchor>
      <arglist>(FILE *) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogramBase.html</anchorfile>
      <anchor>a395dbbaaff2a5685b2b4b6633bda651f</anchor>
      <arglist>(FILE *) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumCells</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogramBase.html</anchorfile>
      <anchor>a0b9a373f4c0998bc94f499096afc43c8</anchor>
      <arglist>(int numcells)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cLegacyHistogramBase</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogramBase.html</anchorfile>
      <anchor>a86dd04256e9363f3d56f5060bf0bb2d3</anchor>
      <arglist>(const cLegacyHistogramBase &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cLegacyHistogramBase</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogramBase.html</anchorfile>
      <anchor>a95a8f0e887662738dfdce02cbbd35f74</anchor>
      <arglist>(const char *name, int numcells, bool weighted=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cLegacyHistogramBase</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogramBase.html</anchorfile>
      <anchor>ab5c9633b1ab1bec427bf63bc0f5e5cdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cLegacyHistogramBase &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogramBase.html</anchorfile>
      <anchor>a1d02ffacb8e86792a54cb35553067431</anchor>
      <arglist>(const cLegacyHistogramBase &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogramBase.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogramBase.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogramBase.html</anchorfile>
      <anchor>a8ab0745de7fefce72d67f99f3931a3e4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUpBins</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogramBase.html</anchorfile>
      <anchor>af163dfec64f493a3c41e445228529ae6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumBins</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogramBase.html</anchorfile>
      <anchor>a795fab464dcc5ad3f5f47e504706e7cc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogramBase.html</anchorfile>
      <anchor>a01e6d44b83e335cfe73d46c676495711</anchor>
      <arglist>(FILE *) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogramBase.html</anchorfile>
      <anchor>a395dbbaaff2a5685b2b4b6633bda651f</anchor>
      <arglist>(FILE *) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumCells</name>
      <anchorfile>classomnetpp_1_1cLegacyHistogramBase.html</anchorfile>
      <anchor>a0b9a373f4c0998bc94f499096afc43c8</anchor>
      <arglist>(int numcells)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cLineFigure</name>
    <filename>classomnetpp_1_1cLineFigure.html</filename>
    <base>omnetpp::cAbstractLineFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cLineFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cLineFigure.html</anchorfile>
      <anchor>ac491bbf13c3848f78305560529657082</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cLineFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cLineFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cLineFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cLineFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Point &amp;</type>
      <name>getStart</name>
      <anchorfile>classomnetpp_1_1cLineFigure.html</anchorfile>
      <anchor>aa7fc8e047985034ea4d00c9ffa3912bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStart</name>
      <anchorfile>classomnetpp_1_1cLineFigure.html</anchorfile>
      <anchor>ae813fa490696d4984ebd77ffc19aa9a3</anchor>
      <arglist>(const Point &amp;start)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Point &amp;</type>
      <name>getEnd</name>
      <anchorfile>classomnetpp_1_1cLineFigure.html</anchorfile>
      <anchor>af94819d71dbdb99ac66a2f8bed5e097c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEnd</name>
      <anchorfile>classomnetpp_1_1cLineFigure.html</anchorfile>
      <anchor>ac4eecd0d5b5739b00edd5192c680288d</anchor>
      <arglist>(const Point &amp;end)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const char **</type>
      <name>getAllowedPropertyKeys</name>
      <anchorfile>classomnetpp_1_1cLineFigure.html</anchorfile>
      <anchor>a3cc500add699158ae5b2b138fdf6c2bd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cLineFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cLineFigure.html</anchorfile>
      <anchor>ac491bbf13c3848f78305560529657082</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cLineFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cLineFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cLineFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cLineFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Point &amp;</type>
      <name>getStart</name>
      <anchorfile>classomnetpp_1_1cLineFigure.html</anchorfile>
      <anchor>aa7fc8e047985034ea4d00c9ffa3912bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStart</name>
      <anchorfile>classomnetpp_1_1cLineFigure.html</anchorfile>
      <anchor>ae813fa490696d4984ebd77ffc19aa9a3</anchor>
      <arglist>(const Point &amp;start)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Point &amp;</type>
      <name>getEnd</name>
      <anchorfile>classomnetpp_1_1cLineFigure.html</anchorfile>
      <anchor>af94819d71dbdb99ac66a2f8bed5e097c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEnd</name>
      <anchorfile>classomnetpp_1_1cLineFigure.html</anchorfile>
      <anchor>ac4eecd0d5b5739b00edd5192c680288d</anchor>
      <arglist>(const Point &amp;end)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cListener</name>
    <filename>classomnetpp_1_1cListener.html</filename>
    <base>omnetpp::cIListener</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cListener.html</anchorfile>
      <anchor>ac29d2f941ddc13062ed6566d67896d13</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, bool b, cObject *details) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cListener.html</anchorfile>
      <anchor>ad7eeef91300cda697657332f42de5ed9</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, long l, cObject *details) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cListener.html</anchorfile>
      <anchor>a6b66fcb9e86ec6f74615a7c78183433d</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, unsigned long l, cObject *details) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cListener.html</anchorfile>
      <anchor>a7069e1fa04e58faa57ad63912f665f9f</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, double d, cObject *details) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cListener.html</anchorfile>
      <anchor>a40fd422e510d42f547638442fa362404</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, const SimTime &amp;t, cObject *details) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cListener.html</anchorfile>
      <anchor>ae297a106431baec4417a7be954a4b65f</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, const char *s, cObject *details) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cListener.html</anchorfile>
      <anchor>a16748135bffb8ab012820fd72c5ac516</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj, cObject *details) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>unsupportedType</name>
      <anchorfile>classomnetpp_1_1cListener.html</anchorfile>
      <anchor>a4619acf63a173a52465b3fccea522ada</anchor>
      <arglist>(simsignal_t signalID, const char *dataType)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cLog</name>
    <filename>classomnetpp_1_1cLog.html</filename>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getLogLevelName</name>
      <anchorfile>classomnetpp_1_1cLog.html</anchorfile>
      <anchor>ac1afc6d8dd67b9ad6cd97f154c8f509a</anchor>
      <arglist>(LogLevel logLevel)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LogLevel</type>
      <name>resolveLogLevel</name>
      <anchorfile>classomnetpp_1_1cLog.html</anchorfile>
      <anchor>a86b06865ab1f9ef65ffc84c41087fcd0</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static LogLevel</type>
      <name>logLevel</name>
      <anchorfile>classomnetpp_1_1cLog.html</anchorfile>
      <anchor>a459a731406775aecba537a713747b5ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static NoncomponentLogPredicate</type>
      <name>noncomponentLogPredicate</name>
      <anchorfile>classomnetpp_1_1cLog.html</anchorfile>
      <anchor>aca3b622f98b7a26a047ccc7b66bfb9bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static ComponentLogPredicate</type>
      <name>componentLogPredicate</name>
      <anchorfile>classomnetpp_1_1cLog.html</anchorfile>
      <anchor>a067919070048057e5bb40a849561e55a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cLogEntry</name>
    <filename>classomnetpp_1_1cLogEntry.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::cLongHistogram</name>
    <filename>classomnetpp_1_1cLongHistogram.html</filename>
    <base>omnetpp::cLegacyHistogram</base>
    <member kind="function">
      <type></type>
      <name>cLongHistogram</name>
      <anchorfile>classomnetpp_1_1cLongHistogram.html</anchorfile>
      <anchor>a4304c443ff9bab82652547534b44d412</anchor>
      <arglist>(const cLongHistogram &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cLongHistogram</name>
      <anchorfile>classomnetpp_1_1cLongHistogram.html</anchorfile>
      <anchor>a9445f0ea30216c9e0f60bc8b606447bc</anchor>
      <arglist>(const char *name=nullptr, int numcells=-1, bool weighted=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cLongHistogram</name>
      <anchorfile>classomnetpp_1_1cLongHistogram.html</anchorfile>
      <anchor>a87c474d62b31b5fb6b1586df1d9c7a1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cLongHistogram &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cLongHistogram.html</anchorfile>
      <anchor>a57d56352383995b25c3b0b60c89ddeec</anchor>
      <arglist>(const cLongHistogram &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cLongHistogram *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cLongHistogram.html</anchorfile>
      <anchor>afd2179d9152185fb656c12d2bf11476a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cLongHistogram.html</anchorfile>
      <anchor>a3b715fbb1b1a0b5079591510e4015d0b</anchor>
      <arglist>(double value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cLongHistogram.html</anchorfile>
      <anchor>afd855856388189954b0188141d9888a8</anchor>
      <arglist>(SimTime value) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cLongHistogram</name>
      <anchorfile>classomnetpp_1_1cLongHistogram.html</anchorfile>
      <anchor>a4304c443ff9bab82652547534b44d412</anchor>
      <arglist>(const cLongHistogram &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cLongHistogram</name>
      <anchorfile>classomnetpp_1_1cLongHistogram.html</anchorfile>
      <anchor>a9445f0ea30216c9e0f60bc8b606447bc</anchor>
      <arglist>(const char *name=nullptr, int numcells=-1, bool weighted=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cLongHistogram</name>
      <anchorfile>classomnetpp_1_1cLongHistogram.html</anchorfile>
      <anchor>a87c474d62b31b5fb6b1586df1d9c7a1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cLongHistogram &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cLongHistogram.html</anchorfile>
      <anchor>a57d56352383995b25c3b0b60c89ddeec</anchor>
      <arglist>(const cLongHistogram &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cLongHistogram *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cLongHistogram.html</anchorfile>
      <anchor>afd2179d9152185fb656c12d2bf11476a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cLongHistogram.html</anchorfile>
      <anchor>a3b715fbb1b1a0b5079591510e4015d0b</anchor>
      <arglist>(double value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cLongHistogram.html</anchorfile>
      <anchor>afd855856388189954b0188141d9888a8</anchor>
      <arglist>(SimTime value) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cPathFigure::ClosePath</name>
    <filename>structomnetpp_1_1cPathFigure_1_1ClosePath.html</filename>
    <base>omnetpp::cPathFigure::PathItem</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::cMatchableString</name>
    <filename>classomnetpp_1_1cMatchableString.html</filename>
    <base>omnetpp::cMatchExpression::Matchable</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAsString</name>
      <anchorfile>classomnetpp_1_1cMatchableString.html</anchorfile>
      <anchor>a4a1d681ca4309cec70d84bf76db3513a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAsString</name>
      <anchorfile>classomnetpp_1_1cMatchableString.html</anchorfile>
      <anchor>a0e83a935836ab517dc82d9bc0274325c</anchor>
      <arglist>(const char *attribute) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cMatchExpression</name>
    <filename>classomnetpp_1_1cMatchExpression.html</filename>
    <class kind="class">omnetpp::cMatchExpression::Matchable</class>
    <member kind="function">
      <type></type>
      <name>cMatchExpression</name>
      <anchorfile>classomnetpp_1_1cMatchExpression.html</anchorfile>
      <anchor>af55f89081719676193f682b07d2b7907</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMatchExpression</name>
      <anchorfile>classomnetpp_1_1cMatchExpression.html</anchorfile>
      <anchor>abf71d13082028b4675f160814aa87a28</anchor>
      <arglist>(const char *pattern, bool dottedpath, bool fullstring, bool casesensitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cMatchExpression</name>
      <anchorfile>classomnetpp_1_1cMatchExpression.html</anchorfile>
      <anchor>a6c78e7298451994378f4ea6f8e9e2901</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPattern</name>
      <anchorfile>classomnetpp_1_1cMatchExpression.html</anchorfile>
      <anchor>a928a43596a234d42196aee3d75078410</anchor>
      <arglist>(const char *pattern, bool dottedpath, bool fullstring, bool casesensitive)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matches</name>
      <anchorfile>classomnetpp_1_1cMatchExpression.html</anchorfile>
      <anchor>a0e05a3b5a602ad3e60c5d809f8b9f2f1</anchor>
      <arglist>(const Matchable *object)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cMersenneTwister</name>
    <filename>classomnetpp_1_1cMersenneTwister.html</filename>
    <base>omnetpp::cRNG</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classomnetpp_1_1cMersenneTwister.html</anchorfile>
      <anchor>a97d0cf80d1a11c6270b92ae548fae74f</anchor>
      <arglist>(int seedSet, int rngId, int numRngs, int parsimProcId, int parsimNumPartitions, cConfiguration *cfg) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>selfTest</name>
      <anchorfile>classomnetpp_1_1cMersenneTwister.html</anchorfile>
      <anchor>ab3e4dab712a67d9c1c24e336eb5a6609</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>intRand</name>
      <anchorfile>classomnetpp_1_1cMersenneTwister.html</anchorfile>
      <anchor>acd6a60c2b1ea304b32a3272ca5158c27</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>intRandMax</name>
      <anchorfile>classomnetpp_1_1cMersenneTwister.html</anchorfile>
      <anchor>a54c19a6c552efcfe69fe38c5b16d8ba0</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>intRand</name>
      <anchorfile>classomnetpp_1_1cMersenneTwister.html</anchorfile>
      <anchor>a1b57a3dd02eaa642a0a19b191d496f23</anchor>
      <arglist>(unsigned long n) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleRand</name>
      <anchorfile>classomnetpp_1_1cMersenneTwister.html</anchorfile>
      <anchor>af47475884a1eb5d04f71bdf216bfd6ac</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleRandNonz</name>
      <anchorfile>classomnetpp_1_1cMersenneTwister.html</anchorfile>
      <anchor>afa34031c0bae20ca8f63aa3d5429b8d5</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleRandIncl1</name>
      <anchorfile>classomnetpp_1_1cMersenneTwister.html</anchorfile>
      <anchor>a623300784c4501c0a764711cf17f5501</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cMessage</name>
    <filename>classomnetpp_1_1cMessage.html</filename>
    <base>omnetpp::cEvent</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPacket</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a77c2efdf507fec6092fb55642b35e3d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMessage</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a7b0d9c4f844ad6792b13540d3bd27cf3</anchor>
      <arglist>(const cMessage &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMessage</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a6f9c89dc38ff0d8b209d626d89d3900c</anchor>
      <arglist>(const char *name=nullptr, short kind=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cMessage</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a0faacd30cb4bc6500f7c8eedb339f2fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a37a9fec30e6e991ef763e316f9944b6d</anchor>
      <arglist>(const cMessage &amp;msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a1beee930c579c122b7235deee9584386</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKind</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ab9173c19d363e874d88c1b8b27937e2d</anchor>
      <arglist>(short k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimestamp</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a9e9819a8fa478afaff43fcf38c1d731b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimestamp</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a1de606f342ed492e3f05c3d05d67753f</anchor>
      <arglist>(simtime_t t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContextPointer</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a27f690b788cd980f740f6cbae40516f4</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setControlInfo</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a3754f992a984595397cb4e76eb23b3b0</anchor>
      <arglist>(cObject *p)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>removeControlInfo</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ad4a64790b42d60c544749bd5a605f71f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>getKind</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ad01c4dbb88f6e2d1931c17af1e5f4281</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getTimestamp</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a4cfcb3b7d813760f804ab63f89a28bbb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getContextPointer</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a8890d288f42f7c13bc2c861c173881de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>getControlInfo</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a01a5b672f6044b3dd86abf5ff9f1dfbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cArray &amp;</type>
      <name>getParList</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a9bc950d36aacf9c4e7afe9cc194aab96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMsgPar &amp;</type>
      <name>addPar</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ac0969ebc4fa6a06f845e83ca36248152</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMsgPar &amp;</type>
      <name>addPar</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>aa55e1570e48af898e2c460fb16e9d8b5</anchor>
      <arglist>(cMsgPar *par)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMsgPar &amp;</type>
      <name>par</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a2f9a003e99d69a0201fcbd73f2cb13b8</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMsgPar &amp;</type>
      <name>par</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a6c40b8851c9da933155a4638e6e309bc</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findPar</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ace6d3f4e757115d85a267236f1556ba2</anchor>
      <arglist>(const char *name) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasPar</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a7f8438104b539e911c3b8f76aaf865b0</anchor>
      <arglist>(const char *name) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>addObject</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a36d1bcf966f3117a6df0e4d9b1034268</anchor>
      <arglist>(cObject *par)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>getObject</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ac58ba4e553d3558d98e17609105979aa</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasObject</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a0d9cb4f5ff4b87a289129bf335909168</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>removeObject</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>aa9b65ee88af8d9ee61a576450808f5a7</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>removeObject</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a93b289901ceadeabd25bba862d0a4440</anchor>
      <arglist>(cObject *par)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSelfMessage</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ad0a6ef65ee891c10fc9ad126768b3941</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getSenderModule</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>abe41fc30c48a886c640fb6fcd68baa64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getSenderGate</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a51e395ec899b516848491bb267b273bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getArrivalModule</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a187dd61f21fdab771d761d906320d3f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getArrivalGate</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a6980409d333e9770e3157a6b68153b52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSenderModuleId</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ae2913ef6e29f4e54107f0a01cf93d82d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSenderGateId</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>aad4a62b9f5a830014862210120729d9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getArrivalModuleId</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a8d023f81b8e1e32652a2ee96fbd3e47a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getArrivalGateId</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ac8a15c06811a2422a6e85b842980e5e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getCreationTime</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a9a5a8d5897e4f7b5d9e2f09ccdffa849</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getSendingTime</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>adc5dd9ee0059c1bd406fa536d92667e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getArrivalTime</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a63c064f2bd21bdca420aaa847c884ba9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>arrivedOn</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a3cac2181e738e1067fb3e941b0ccd282</anchor>
      <arglist>(int gateId) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>arrivedOn</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ab184334dedcf4e550e96c5ee9ffa0b1a</anchor>
      <arglist>(const char *gateName) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>arrivedOn</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a42c40bdca3a322c5f033834a699813dd</anchor>
      <arglist>(const char *gateName, int gateIndex) const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getId</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a857b56974c6c33b3977986ea0a217f94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getTreeId</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a72dc29282125e390cdbe366f252f0b53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getDisplayString</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>aca22dc8e5945f69f69fc03ae64464653</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArrival</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>afc5770bbf53eed08ce9da8193ec18422</anchor>
      <arglist>(int moduleId, int gateId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArrival</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a5bc4b36b360e9211ede0a6d5abd145e8</anchor>
      <arglist>(int moduleId, int gateId, simtime_t_cref t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getTotalMessageCount</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>afea26c76a4b7c5b59d84e4ae878bcc3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getLiveMessageCount</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>abf8c8160afe4717902f86a44ba180e23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resetMessageCounters</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a2c9661a900c7a2ad3ad4552010e37c7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMessage</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a7b0d9c4f844ad6792b13540d3bd27cf3</anchor>
      <arglist>(const cMessage &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMessage</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a6f9c89dc38ff0d8b209d626d89d3900c</anchor>
      <arglist>(const char *name=nullptr, short kind=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cMessage</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a0faacd30cb4bc6500f7c8eedb339f2fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cMessage &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a37a9fec30e6e991ef763e316f9944b6d</anchor>
      <arglist>(const cMessage &amp;msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a1beee930c579c122b7235deee9584386</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setKind</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ab9173c19d363e874d88c1b8b27937e2d</anchor>
      <arglist>(short k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimestamp</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a9e9819a8fa478afaff43fcf38c1d731b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimestamp</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a1de606f342ed492e3f05c3d05d67753f</anchor>
      <arglist>(simtime_t t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContextPointer</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a27f690b788cd980f740f6cbae40516f4</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setControlInfo</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a3754f992a984595397cb4e76eb23b3b0</anchor>
      <arglist>(cObject *p)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>removeControlInfo</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ad4a64790b42d60c544749bd5a605f71f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>short</type>
      <name>getKind</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ad01c4dbb88f6e2d1931c17af1e5f4281</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getTimestamp</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a4cfcb3b7d813760f804ab63f89a28bbb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getContextPointer</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a8890d288f42f7c13bc2c861c173881de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>getControlInfo</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a01a5b672f6044b3dd86abf5ff9f1dfbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cArray &amp;</type>
      <name>getParList</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a9bc950d36aacf9c4e7afe9cc194aab96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMsgPar &amp;</type>
      <name>addPar</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ac0969ebc4fa6a06f845e83ca36248152</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMsgPar &amp;</type>
      <name>addPar</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>aa55e1570e48af898e2c460fb16e9d8b5</anchor>
      <arglist>(cMsgPar *par)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMsgPar &amp;</type>
      <name>par</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a2f9a003e99d69a0201fcbd73f2cb13b8</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMsgPar &amp;</type>
      <name>par</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a6c40b8851c9da933155a4638e6e309bc</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findPar</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ace6d3f4e757115d85a267236f1556ba2</anchor>
      <arglist>(const char *name) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasPar</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a7f8438104b539e911c3b8f76aaf865b0</anchor>
      <arglist>(const char *name) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>addObject</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a36d1bcf966f3117a6df0e4d9b1034268</anchor>
      <arglist>(cObject *par)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>getObject</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ac58ba4e553d3558d98e17609105979aa</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasObject</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a0d9cb4f5ff4b87a289129bf335909168</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>removeObject</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>aa9b65ee88af8d9ee61a576450808f5a7</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>removeObject</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a93b289901ceadeabd25bba862d0a4440</anchor>
      <arglist>(cObject *par)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSelfMessage</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ad0a6ef65ee891c10fc9ad126768b3941</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getSenderModule</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>abe41fc30c48a886c640fb6fcd68baa64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getSenderGate</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a51e395ec899b516848491bb267b273bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getArrivalModule</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a187dd61f21fdab771d761d906320d3f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getArrivalGate</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a6980409d333e9770e3157a6b68153b52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSenderModuleId</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ae2913ef6e29f4e54107f0a01cf93d82d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSenderGateId</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>aad4a62b9f5a830014862210120729d9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getArrivalModuleId</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a8d023f81b8e1e32652a2ee96fbd3e47a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getArrivalGateId</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ac8a15c06811a2422a6e85b842980e5e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getCreationTime</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a9a5a8d5897e4f7b5d9e2f09ccdffa849</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getSendingTime</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>adc5dd9ee0059c1bd406fa536d92667e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getArrivalTime</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a63c064f2bd21bdca420aaa847c884ba9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>arrivedOn</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a3cac2181e738e1067fb3e941b0ccd282</anchor>
      <arglist>(int gateId) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>arrivedOn</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>ab184334dedcf4e550e96c5ee9ffa0b1a</anchor>
      <arglist>(const char *gateName) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>arrivedOn</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a42c40bdca3a322c5f033834a699813dd</anchor>
      <arglist>(const char *gateName, int gateIndex) const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getId</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a857b56974c6c33b3977986ea0a217f94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getTreeId</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a72dc29282125e390cdbe366f252f0b53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getDisplayString</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>aca22dc8e5945f69f69fc03ae64464653</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArrival</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>afc5770bbf53eed08ce9da8193ec18422</anchor>
      <arglist>(int moduleId, int gateId)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArrival</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a5bc4b36b360e9211ede0a6d5abd145e8</anchor>
      <arglist>(int moduleId, int gateId, simtime_t_cref t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getTotalMessageCount</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>afea26c76a4b7c5b59d84e4ae878bcc3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getLiveMessageCount</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>abf8c8160afe4717902f86a44ba180e23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resetMessageCounters</name>
      <anchorfile>classomnetpp_1_1cMessage.html</anchorfile>
      <anchor>a2c9661a900c7a2ad3ad4552010e37c7a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cMessagePrinter</name>
    <filename>classomnetpp_1_1cMessagePrinter.html</filename>
    <base>omnetpp::cNoncopyableOwnedObject</base>
    <class kind="struct">omnetpp::cMessagePrinter::Options</class>
    <member kind="function">
      <type></type>
      <name>cMessagePrinter</name>
      <anchorfile>classomnetpp_1_1cMessagePrinter.html</anchorfile>
      <anchor>ade045b58c8c52298bc240eecd9ecf9e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cMessagePrinter</name>
      <anchorfile>classomnetpp_1_1cMessagePrinter.html</anchorfile>
      <anchor>ac68f6b1ba4d533c7f981ba9470bafe6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getScoreFor</name>
      <anchorfile>classomnetpp_1_1cMessagePrinter.html</anchorfile>
      <anchor>a1a8bc756cffe741c4c4e98da122fcc64</anchor>
      <arglist>(cMessage *msg) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::set&lt; std::string &gt;</type>
      <name>getSupportedTags</name>
      <anchorfile>classomnetpp_1_1cMessagePrinter.html</anchorfile>
      <anchor>a93972459ce8c81d416b4b62365605d9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::set&lt; std::string &gt;</type>
      <name>getDefaultEnabledTags</name>
      <anchorfile>classomnetpp_1_1cMessagePrinter.html</anchorfile>
      <anchor>a1a3cd3ca3aa7f4d4e3b9b1827b94fa10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; std::string &gt;</type>
      <name>getColumnNames</name>
      <anchorfile>classomnetpp_1_1cMessagePrinter.html</anchorfile>
      <anchor>a4efc5f0adcc57ebbf75e78ff550390a0</anchor>
      <arglist>(const Options *options) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>printMessage</name>
      <anchorfile>classomnetpp_1_1cMessagePrinter.html</anchorfile>
      <anchor>a5c8ea218923d2933c3088fe617646acb</anchor>
      <arglist>(std::ostream &amp;os, cMessage *msg, const Options *options) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cMethodCallContextSwitcher</name>
    <filename>classomnetpp_1_1cMethodCallContextSwitcher.html</filename>
    <base>omnetpp::cContextSwitcher</base>
    <member kind="function">
      <type></type>
      <name>cMethodCallContextSwitcher</name>
      <anchorfile>classomnetpp_1_1cMethodCallContextSwitcher.html</anchorfile>
      <anchor>a89dd67ff310e17c2e68a8d500964c709</anchor>
      <arglist>(const cComponent *newContext)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cMethodCallContextSwitcher</name>
      <anchorfile>classomnetpp_1_1cMethodCallContextSwitcher.html</anchorfile>
      <anchor>a05a7c80858a24236b585fb223d987279</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>methodCall</name>
      <anchorfile>classomnetpp_1_1cMethodCallContextSwitcher.html</anchorfile>
      <anchor>a45e3372ab1817bdabec36568e171e247</anchor>
      <arglist>(const char *methodFmt,...)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getDepth</name>
      <anchorfile>classomnetpp_1_1cMethodCallContextSwitcher.html</anchorfile>
      <anchor>ab275726b46a696f8b20c4a23113230d9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cModelChangeNotification</name>
    <filename>classomnetpp_1_1cModelChangeNotification.html</filename>
    <base>omnetpp::cObject</base>
    <base protection="private">omnetpp::noncopyable</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::cModule</name>
    <filename>classomnetpp_1_1cModule.html</filename>
    <base>omnetpp::cComponent</base>
    <class kind="class">omnetpp::cModule::ChannelIterator</class>
    <class kind="class">omnetpp::cModule::GateIterator</class>
    <class kind="class">omnetpp::cModule::SubmoduleIterator</class>
    <member kind="function">
      <type></type>
      <name>cModule</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>aa536977bf4b94ed900f22f724ffa09a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cModule</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a46d8700e728ab4f8b9227e539308d012</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ab5789d4642b82c586b11f47af734e89e</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ac8c2df3a4b90f890270bda7b2d7c1bec</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getFullPath</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>abebbca7333a87d91fe5274e9879c5532</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate *</type>
      <name>addGate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a330386002a1b76ad332e62df891f0d65</anchor>
      <arglist>(const char *gatename, cGate::Type type, bool isvector=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGateSize</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a016b66e74af85c54540a93cd57b26eff</anchor>
      <arglist>(const char *gatename, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate *</type>
      <name>getOrCreateFirstUnconnectedGate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>aa130e951651c40f55a61e67fda458c4d</anchor>
      <arglist>(const char *gatename, char suffix, bool inside, bool expand)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getOrCreateFirstUnconnectedGatePair</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a6aac62a91fc2c620f2049549df0aaa69</anchor>
      <arglist>(const char *gatename, bool inside, bool expand, cGate *&amp;gatein, cGate *&amp;gateout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finalizeParameters</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a6053b9448540706eaaa8bc7071562100</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildInside</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a82a683b1e7836c86dda094a517a258e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSimple</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a050849586532e6270c52ed51c35b1615</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ComponentKind</type>
      <name>getComponentKind</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>afc9caed92f155dabde94f8cf2f0b66ce</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPlaceholder</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a762894a61a3a6591154e6fb6d66adad9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getParentModule</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a6273eb514331e0e44130844d637b8b4c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>cModuleType *</type>
      <name>getModuleType</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>aa7d5fedf36e754be2a21f50e5641b26d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cProperties *</type>
      <name>getProperties</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a6eaf39f9644d7ec7ced2485ae9d558de</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a434d8fdd91756a54ea935ba21de4f4f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndex</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a1678b8fbb78027fe25fd31e6b4001f0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getVectorSize</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a494de372234f171012b13610c6aad096</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED int</type>
      <name>size</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a313a4a0fc090baecff881d05b665b5ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasSubmodules</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a8e9063ab8f8a840072a9be192ba10182</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findSubmodule</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ab1d7a26957b329253b5a1a0275d4b57e</anchor>
      <arglist>(const char *name, int index=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getSubmodule</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a7f808467ff5bcd78475cae2d912bb291</anchor>
      <arglist>(const char *name, int index=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getModuleByPath</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>aeee781c3f644b6af1239f14ab835b8ff</anchor>
      <arglist>(const char *path) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsModule</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ace9d86a55660b2eedff0f1390448506a</anchor>
      <arglist>(cModule *module) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate *</type>
      <name>gate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a527d7dc0912da702a9bdaaf2bf3c067a</anchor>
      <arglist>(const char *gatename, int index=-1)</arglist>
    </member>
    <member kind="function">
      <type>const cGate *</type>
      <name>gate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a7db80a4f88808d7c5072707bdad09233</anchor>
      <arglist>(const char *gatename, int index=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate *</type>
      <name>gateHalf</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>adc2f899b85daa1a272e6484c3941d5df</anchor>
      <arglist>(const char *gatename, cGate::Type type, int index=-1)</arglist>
    </member>
    <member kind="function">
      <type>const cGate *</type>
      <name>gateHalf</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a3ede4c3c433e283ef335e4b6f0fa6a5f</anchor>
      <arglist>(const char *gatename, cGate::Type type, int index=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasGate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a3447df05d8f46e68f8cd041a9e43dbbd</anchor>
      <arglist>(const char *gatename, int index=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findGate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ac3fb15627307af6b9cdbf3732fd4eea6</anchor>
      <arglist>(const char *gatename, int index=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate *</type>
      <name>gate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ad56266e67bc89ac6774d40de3ebebfd2</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>const cGate *</type>
      <name>gate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>adc0639b3d5303625616fafb3ff9b4cb2</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteGate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a1ba5523eb4fe43401f83bcc6480612d3</anchor>
      <arglist>(const char *gatename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getGateNames</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a254b18b7186d20de81afff7a20fb99fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate::Type</type>
      <name>gateType</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a2ff8448cc51732766ef11a5f1d1b9f23</anchor>
      <arglist>(const char *gatename) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isGateVector</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a0512f3ba09841d24db5f223e264f18bf</anchor>
      <arglist>(const char *gatename) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>gateSize</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a05388799f08c07bd66b2c362ae70653e</anchor>
      <arglist>(const char *gatename) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>gateBaseId</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a6e8f06527e72a52990bb4a54fd91d58e</anchor>
      <arglist>(const char *gatename) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkInternalConnections</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a29de3beee45b89e9d93496af9f7763cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>arrived</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a5de5f959f27587a8102aaf52f5259eb9</anchor>
      <arglist>(cMessage *msg, cGate *ongate, simtime_t t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPar &amp;</type>
      <name>getAncestorPar</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a2d1f0430275913dafd40def83ff23b5c</anchor>
      <arglist>(const char *parname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cCanvas *</type>
      <name>getCanvas</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ac020b218ef95880637922aeb12b75cdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cOsgCanvas *</type>
      <name>getOsgCanvas</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a1de0bc89d86952073fbccf48e5cb4338</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBuiltinAnimationsAllowed</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>aeb7ac355bb3f999325097e1ea19a67fd</anchor>
      <arglist>(bool enabled)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getBuiltinAnimationsAllowed</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a28f58e16eb0ac701b63a46820faa68b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callInitialize</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ae17272aee328900c96b8111d642dabf2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>callInitialize</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>abb973abd34144b0ea340df8d2de60ffc</anchor>
      <arglist>(int stage) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callFinish</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a6ffefcbcab94d22d6712d7ded08ea5e3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleStart</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a0f4bdc4664d1d895715e31965f4c1218</anchor>
      <arglist>(simtime_t t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteModule</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a1ee158eec753e304a76f17bc38289801</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>changeParentTo</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a7017c0881e4ba412cda2e2f65e6d1aeb</anchor>
      <arglist>(cModule *mod)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cModule</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>aa536977bf4b94ed900f22f724ffa09a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cModule</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a46d8700e728ab4f8b9227e539308d012</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ab5789d4642b82c586b11f47af734e89e</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ac8c2df3a4b90f890270bda7b2d7c1bec</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getFullPath</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>abebbca7333a87d91fe5274e9879c5532</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate *</type>
      <name>addGate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a330386002a1b76ad332e62df891f0d65</anchor>
      <arglist>(const char *gatename, cGate::Type type, bool isvector=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setGateSize</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a016b66e74af85c54540a93cd57b26eff</anchor>
      <arglist>(const char *gatename, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate *</type>
      <name>getOrCreateFirstUnconnectedGate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>aa130e951651c40f55a61e67fda458c4d</anchor>
      <arglist>(const char *gatename, char suffix, bool inside, bool expand)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getOrCreateFirstUnconnectedGatePair</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a6aac62a91fc2c620f2049549df0aaa69</anchor>
      <arglist>(const char *gatename, bool inside, bool expand, cGate *&amp;gatein, cGate *&amp;gateout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>finalizeParameters</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a6053b9448540706eaaa8bc7071562100</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildInside</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a82a683b1e7836c86dda094a517a258e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSimple</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a050849586532e6270c52ed51c35b1615</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ComponentKind</type>
      <name>getComponentKind</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>afc9caed92f155dabde94f8cf2f0b66ce</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPlaceholder</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a762894a61a3a6591154e6fb6d66adad9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getParentModule</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a6273eb514331e0e44130844d637b8b4c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>cModuleType *</type>
      <name>getModuleType</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>aa7d5fedf36e754be2a21f50e5641b26d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cProperties *</type>
      <name>getProperties</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a6eaf39f9644d7ec7ced2485ae9d558de</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a434d8fdd91756a54ea935ba21de4f4f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getIndex</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a1678b8fbb78027fe25fd31e6b4001f0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getVectorSize</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a494de372234f171012b13610c6aad096</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED int</type>
      <name>size</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a313a4a0fc090baecff881d05b665b5ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasSubmodules</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a8e9063ab8f8a840072a9be192ba10182</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findSubmodule</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ab1d7a26957b329253b5a1a0275d4b57e</anchor>
      <arglist>(const char *name, int index=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getSubmodule</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a7f808467ff5bcd78475cae2d912bb291</anchor>
      <arglist>(const char *name, int index=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>getModuleByPath</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>aeee781c3f644b6af1239f14ab835b8ff</anchor>
      <arglist>(const char *path) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsModule</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ace9d86a55660b2eedff0f1390448506a</anchor>
      <arglist>(cModule *module) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate *</type>
      <name>gate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a527d7dc0912da702a9bdaaf2bf3c067a</anchor>
      <arglist>(const char *gatename, int index=-1)</arglist>
    </member>
    <member kind="function">
      <type>const cGate *</type>
      <name>gate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a7db80a4f88808d7c5072707bdad09233</anchor>
      <arglist>(const char *gatename, int index=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate *</type>
      <name>gateHalf</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>adc2f899b85daa1a272e6484c3941d5df</anchor>
      <arglist>(const char *gatename, cGate::Type type, int index=-1)</arglist>
    </member>
    <member kind="function">
      <type>const cGate *</type>
      <name>gateHalf</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a3ede4c3c433e283ef335e4b6f0fa6a5f</anchor>
      <arglist>(const char *gatename, cGate::Type type, int index=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasGate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a3447df05d8f46e68f8cd041a9e43dbbd</anchor>
      <arglist>(const char *gatename, int index=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>findGate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ac3fb15627307af6b9cdbf3732fd4eea6</anchor>
      <arglist>(const char *gatename, int index=-1) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate *</type>
      <name>gate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ad56266e67bc89ac6774d40de3ebebfd2</anchor>
      <arglist>(int id)</arglist>
    </member>
    <member kind="function">
      <type>const cGate *</type>
      <name>gate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>adc0639b3d5303625616fafb3ff9b4cb2</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteGate</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a1ba5523eb4fe43401f83bcc6480612d3</anchor>
      <arglist>(const char *gatename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getGateNames</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a254b18b7186d20de81afff7a20fb99fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cGate::Type</type>
      <name>gateType</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a2ff8448cc51732766ef11a5f1d1b9f23</anchor>
      <arglist>(const char *gatename) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isGateVector</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a0512f3ba09841d24db5f223e264f18bf</anchor>
      <arglist>(const char *gatename) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>gateSize</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a05388799f08c07bd66b2c362ae70653e</anchor>
      <arglist>(const char *gatename) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>gateBaseId</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a6e8f06527e72a52990bb4a54fd91d58e</anchor>
      <arglist>(const char *gatename) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkInternalConnections</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a29de3beee45b89e9d93496af9f7763cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>arrived</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a5de5f959f27587a8102aaf52f5259eb9</anchor>
      <arglist>(cMessage *msg, cGate *ongate, simtime_t t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPar &amp;</type>
      <name>getAncestorPar</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a2d1f0430275913dafd40def83ff23b5c</anchor>
      <arglist>(const char *parname)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cCanvas *</type>
      <name>getCanvas</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ac020b218ef95880637922aeb12b75cdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cOsgCanvas *</type>
      <name>getOsgCanvas</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a1de0bc89d86952073fbccf48e5cb4338</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBuiltinAnimationsAllowed</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>aeb7ac355bb3f999325097e1ea19a67fd</anchor>
      <arglist>(bool enabled)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getBuiltinAnimationsAllowed</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a28f58e16eb0ac701b63a46820faa68b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callInitialize</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>ae17272aee328900c96b8111d642dabf2</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>callInitialize</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>abb973abd34144b0ea340df8d2de60ffc</anchor>
      <arglist>(int stage) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>callFinish</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a6ffefcbcab94d22d6712d7ded08ea5e3</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleStart</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a0f4bdc4664d1d895715e31965f4c1218</anchor>
      <arglist>(simtime_t t)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteModule</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a1ee158eec753e304a76f17bc38289801</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>changeParentTo</name>
      <anchorfile>classomnetpp_1_1cModule.html</anchorfile>
      <anchor>a7017c0881e4ba412cda2e2f65e6d1aeb</anchor>
      <arglist>(cModule *mod)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cModuleType</name>
    <filename>classomnetpp_1_1cModuleType.html</filename>
    <base>omnetpp::cComponentType</base>
    <member kind="function">
      <type></type>
      <name>cModuleType</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>aaf4596066785ab64d7b4c19184d56bcc</anchor>
      <arglist>(const char *qname=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isNetwork</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>a54d0b5e7d4fc4072678dadaf4dfc8eb0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isSimple</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>a7bde809f50713d501157c6566fd823a1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>create</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>ad434108215d1bfa42e6b8d9ac3f36c5d</anchor>
      <arglist>(const char *name, cModule *parentmod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>create</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>a595519523ccac6de560e2a2952fd42b3</anchor>
      <arglist>(const char *name, cModule *parentmod, int vectorsize, int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>createScheduleInit</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>a3e4cde603a30767d3d9c7b44e0381111</anchor>
      <arglist>(const char *name, cModule *parentmod)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cModuleType *</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>af500e537900eea8993f5024e44e38203</anchor>
      <arglist>(const char *qname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cModuleType *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>aa20627e25fc3c30b38939669539bc011</anchor>
      <arglist>(const char *qname)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual cModule *</type>
      <name>createModuleObject</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>aa1c70582b0eb8d045769966beecf400f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>addParametersAndGatesTo</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>a89ba0411cdde74f69c3f37dd48ad8670</anchor>
      <arglist>(cModule *mod)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>setupGateVectors</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>af99f6a658ad3e2c6b00c0a1f4f947567</anchor>
      <arglist>(cModule *mod)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>buildInside</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>a590e345f8033910ad4bb2ace360579bc</anchor>
      <arglist>(cModule *mod)=0</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>cModule *</type>
      <name>instantiateModuleClass</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>a174701e9f6b0a9e2921ec5f2f21548b6</anchor>
      <arglist>(const char *classname)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cModuleType</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>aaf4596066785ab64d7b4c19184d56bcc</anchor>
      <arglist>(const char *qname=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isNetwork</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>a54d0b5e7d4fc4072678dadaf4dfc8eb0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isSimple</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>a7bde809f50713d501157c6566fd823a1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>create</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>ad434108215d1bfa42e6b8d9ac3f36c5d</anchor>
      <arglist>(const char *name, cModule *parentmod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>create</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>a595519523ccac6de560e2a2952fd42b3</anchor>
      <arglist>(const char *name, cModule *parentmod, int vectorsize, int index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cModule *</type>
      <name>createScheduleInit</name>
      <anchorfile>classomnetpp_1_1cModuleType.html</anchorfile>
      <anchor>a3e4cde603a30767d3d9c7b44e0381111</anchor>
      <arglist>(const char *name, cModule *parentmod)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cMsgPar</name>
    <filename>classomnetpp_1_1cMsgPar.html</filename>
    <base>omnetpp::cOwnedObject</base>
    <member kind="typedef">
      <type>void(*</type>
      <name>VoidDelFunc</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a04897f0907c45b913bba5aeea93a8e83</anchor>
      <arglist>)(void *)</arglist>
    </member>
    <member kind="typedef">
      <type>void *(*</type>
      <name>VoidDupFunc</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a86a790616d0e738e0953ffce7e86eb41</anchor>
      <arglist>)(void *)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMsgPar</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ae99808032eb440f1e88fa13aded2b4ac</anchor>
      <arglist>(const cMsgPar &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMsgPar</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>af7de3af4d9207d0793ca72ebe42efe0f</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMsgPar</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aafd7fe48a32b8e636574788799f2f0eb</anchor>
      <arglist>(const char *name, cMsgPar &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cMsgPar</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ad16bd82d87b7a46823f27768b913e6b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a853b583da1969855f4224b75c469d2bb</anchor>
      <arglist>(const cMsgPar &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMsgPar *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ac59b77813c6181f61fde2272573ffb41</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ad1fb086f013492292495a594e7f5d13e</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setLongValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a1270569d9e42c6c7903a932d54d19005</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a8bc8fd098498723a2c61b4ac26f5eb67</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aa785f60fb038c8b40b863d6165a55c59</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a5902c662b726f78c11fde5aba8657436</anchor>
      <arglist>(cStatistic *res)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a0c88a6947d600f7cbf38d80756651f8a</anchor>
      <arglist>(MathFuncNoArg f)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a03683d5006f8e195e66268eab90b858e</anchor>
      <arglist>(MathFunc1Arg f, double p1)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a9b7676e4896d026da2c6edfbe32da8f1</anchor>
      <arglist>(MathFunc2Args f, double p1, double p2)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a0b4c92e9886d9f7cbc7fcfd3b20deff6</anchor>
      <arglist>(MathFunc3Args f, double p1, double p2, double p3)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a70a28ac015229ccb19cc27443d0a50d3</anchor>
      <arglist>(MathFunc4Args f, double p1, double p2, double p3, double p4)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setPointerValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>adc09683b4209271c82875b33e6df2237</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setObjectValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ad52429c66ebe66485a3e9e5dc006024c</anchor>
      <arglist>(cOwnedObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aca34e7878317b36d4bf93f993be39b3a</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configPointer</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a9b6294b552f7b95f76b6699e1b35c208</anchor>
      <arglist>(VoidDelFunc delfunc, VoidDupFunc dupfunc, size_t itemsize=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTakeOwnership</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a205b5531f3aa081aef4f053e8ef2a768</anchor>
      <arglist>(bool tk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTakeOwnership</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ac43e9a5a4f94023dbcaaa81d0ff0fd3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ae9ab4772626e62e20eb02cd8534068a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>longValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ab77a11563a3d4811d753bcbf8808de9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>abdc847d0964aaf66aa186a2a09a3af7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aad7c86e3a7c4753efa88b5c659496c05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>pointerValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a122f3f2460ad27f9605da27f9efe7579</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cOwnedObject *</type>
      <name>getObjectValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a1a749f3face2b41ccce95a583015ab50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ab0b1c0b380f882296ed44884603e47e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ab5de10c93fc1d48dcb9c2b1e173b3c57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a345b371a0aef782ab74b4a8aa0f5eff2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConstant</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a501ffff12d420aed14f29c8f64d354cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasChanged</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a99ffce0bf81ea5eaeb35babf2a50d1e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertToConst</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a8c299d6abd1d7d06b9ad3d57e61b1045</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalsTo</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a2042ccab7e563c77799cf2d45ab3b146</anchor>
      <arglist>(cMsgPar *par)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>abcf010d7150b7f050186921cf4082f8f</anchor>
      <arglist>(const char *text, char type=&apos;?&apos;)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a6d99ba4a1efa2886652f65ad26c432e5</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a9331c3cdb698999edbb0431a48286efb</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a7599107b9d5b5b46d901a7b1caef76b8</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a6dea310dfb660f79d1c93b56e89255cd</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>adb872043f8edaa4777da4b4a4b3dce1d</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aed81375abf31af016cf7a69409f284c8</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ad07ff2083d90d4036915d8ee30175dd6</anchor>
      <arglist>(short i)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aaddee1f80b2d78295a11d7858ed12e46</anchor>
      <arglist>(unsigned short i)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a8509cc19354d45892cb025a493a203fa</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aa5f1168220075dca0c96ebd15c5e55eb</anchor>
      <arglist>(unsigned long l)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a63d5d8671ae95339a7100743f323d674</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aa10b8b1d63a2b329eedf5bf9731c91a3</anchor>
      <arglist>(long double d)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aa6e68d01309b477dbff200b35eee7a7b</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aabae388199abe5cc023b5323ec6bc9ad</anchor>
      <arglist>(cOwnedObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ae195601f7fdc314fddf388cbfa231e28</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a9b3baad8c612d81b96e46f84d7e97580</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ab75164b28454722bdf29710c208f0736</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator char</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ac77ce1bd678ab2a2822337cf2aa2d7c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned char</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ac2f36c2d09514eb6ee1aa262bc4b31a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a4f4ea421e40bda08a2deca657f640fea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned int</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>afdd42698216921270c2a7b5f9996579c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator short</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a5c5e6c29336647e95ec25388301710ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned short</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>acec270392f32ff5627360daa1de7e66d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a27a7be0e2f8d707cdd0f15e50eb0d9b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned long</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a2ece9436743e010a3eff90abc3a5778c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aabab268504345fcb036094bc7b5c4438</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long double</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a14f233e4256bdb5ccdc02f4aee842f52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator void *</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a0b32021b12206ef34495c688760c44bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator cOwnedObject *</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a5382f2360a00fcbc9979e4880f887af1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator cXMLElement *</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a1b3d533016410521e53cbe92b1f459cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beforeChange</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a1aee57457aa1ae56e18c48732b6f9f09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>afterChange</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a814385b4b7651b9b57124e3f749ab4d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>beforeChange</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a1aee57457aa1ae56e18c48732b6f9f09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>afterChange</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a814385b4b7651b9b57124e3f749ab4d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMsgPar</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ae99808032eb440f1e88fa13aded2b4ac</anchor>
      <arglist>(const cMsgPar &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMsgPar</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>af7de3af4d9207d0793ca72ebe42efe0f</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cMsgPar</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aafd7fe48a32b8e636574788799f2f0eb</anchor>
      <arglist>(const char *name, cMsgPar &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cMsgPar</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ad16bd82d87b7a46823f27768b913e6b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a853b583da1969855f4224b75c469d2bb</anchor>
      <arglist>(const cMsgPar &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMsgPar *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ac59b77813c6181f61fde2272573ffb41</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ad1fb086f013492292495a594e7f5d13e</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setLongValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a1270569d9e42c6c7903a932d54d19005</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a8bc8fd098498723a2c61b4ac26f5eb67</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aa785f60fb038c8b40b863d6165a55c59</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a5902c662b726f78c11fde5aba8657436</anchor>
      <arglist>(cStatistic *res)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a0c88a6947d600f7cbf38d80756651f8a</anchor>
      <arglist>(MathFuncNoArg f)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a03683d5006f8e195e66268eab90b858e</anchor>
      <arglist>(MathFunc1Arg f, double p1)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a9b7676e4896d026da2c6edfbe32da8f1</anchor>
      <arglist>(MathFunc2Args f, double p1, double p2)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a0b4c92e9886d9f7cbc7fcfd3b20deff6</anchor>
      <arglist>(MathFunc3Args f, double p1, double p2, double p3)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a70a28ac015229ccb19cc27443d0a50d3</anchor>
      <arglist>(MathFunc4Args f, double p1, double p2, double p3, double p4)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setPointerValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>adc09683b4209271c82875b33e6df2237</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setObjectValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ad52429c66ebe66485a3e9e5dc006024c</anchor>
      <arglist>(cOwnedObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aca34e7878317b36d4bf93f993be39b3a</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>configPointer</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a9b6294b552f7b95f76b6699e1b35c208</anchor>
      <arglist>(VoidDelFunc delfunc, VoidDupFunc dupfunc, size_t itemsize=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTakeOwnership</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a205b5531f3aa081aef4f053e8ef2a768</anchor>
      <arglist>(bool tk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTakeOwnership</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ac43e9a5a4f94023dbcaaa81d0ff0fd3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ae9ab4772626e62e20eb02cd8534068a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>longValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ab77a11563a3d4811d753bcbf8808de9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>abdc847d0964aaf66aa186a2a09a3af7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aad7c86e3a7c4753efa88b5c659496c05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>pointerValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a122f3f2460ad27f9605da27f9efe7579</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cOwnedObject *</type>
      <name>getObjectValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a1a749f3face2b41ccce95a583015ab50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ab0b1c0b380f882296ed44884603e47e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ab5de10c93fc1d48dcb9c2b1e173b3c57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a345b371a0aef782ab74b4a8aa0f5eff2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConstant</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a501ffff12d420aed14f29c8f64d354cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasChanged</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a99ffce0bf81ea5eaeb35babf2a50d1e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertToConst</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a8c299d6abd1d7d06b9ad3d57e61b1045</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equalsTo</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a2042ccab7e563c77799cf2d45ab3b146</anchor>
      <arglist>(cMsgPar *par)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>abcf010d7150b7f050186921cf4082f8f</anchor>
      <arglist>(const char *text, char type=&apos;?&apos;)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a6d99ba4a1efa2886652f65ad26c432e5</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a9331c3cdb698999edbb0431a48286efb</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a7599107b9d5b5b46d901a7b1caef76b8</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a6dea310dfb660f79d1c93b56e89255cd</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>adb872043f8edaa4777da4b4a4b3dce1d</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aed81375abf31af016cf7a69409f284c8</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ad07ff2083d90d4036915d8ee30175dd6</anchor>
      <arglist>(short i)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aaddee1f80b2d78295a11d7858ed12e46</anchor>
      <arglist>(unsigned short i)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a8509cc19354d45892cb025a493a203fa</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aa5f1168220075dca0c96ebd15c5e55eb</anchor>
      <arglist>(unsigned long l)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a63d5d8671ae95339a7100743f323d674</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aa10b8b1d63a2b329eedf5bf9731c91a3</anchor>
      <arglist>(long double d)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aa6e68d01309b477dbff200b35eee7a7b</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aabae388199abe5cc023b5323ec6bc9ad</anchor>
      <arglist>(cOwnedObject *obj)</arglist>
    </member>
    <member kind="function">
      <type>cMsgPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ae195601f7fdc314fddf388cbfa231e28</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a9b3baad8c612d81b96e46f84d7e97580</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ab75164b28454722bdf29710c208f0736</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator char</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ac77ce1bd678ab2a2822337cf2aa2d7c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned char</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>ac2f36c2d09514eb6ee1aa262bc4b31a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a4f4ea421e40bda08a2deca657f640fea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned int</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>afdd42698216921270c2a7b5f9996579c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator short</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a5c5e6c29336647e95ec25388301710ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned short</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>acec270392f32ff5627360daa1de7e66d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a27a7be0e2f8d707cdd0f15e50eb0d9b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned long</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a2ece9436743e010a3eff90abc3a5778c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>aabab268504345fcb036094bc7b5c4438</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long double</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a14f233e4256bdb5ccdc02f4aee842f52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator void *</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a0b32021b12206ef34495c688760c44bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator cOwnedObject *</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a5382f2360a00fcbc9979e4880f887af1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator cXMLElement *</name>
      <anchorfile>classomnetpp_1_1cMsgPar.html</anchorfile>
      <anchor>a1b3d533016410521e53cbe92b1f459cb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cMultiFingerprintCalculator</name>
    <filename>classomnetpp_1_1cMultiFingerprintCalculator.html</filename>
    <base>omnetpp::cFingerprintCalculator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cMultiFingerprintCalculator *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cMultiFingerprintCalculator.html</anchorfile>
      <anchor>ab859cc7662c8e8e7f15523231e06ba71</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cMultiFingerprintCalculator.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classomnetpp_1_1cMultiFingerprintCalculator.html</anchorfile>
      <anchor>ab54515c9f3e8197ec1f43d1be8707320</anchor>
      <arglist>(const char *expectedFingerprints, cConfiguration *cfg, int index=-1) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkFingerprint</name>
      <anchorfile>classomnetpp_1_1cMultiFingerprintCalculator.html</anchorfile>
      <anchor>a69c20e27513e7f88c5ad35a1eb603e0d</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cNamedObject</name>
    <filename>classomnetpp_1_1cNamedObject.html</filename>
    <base>omnetpp::cObject</base>
    <member kind="function">
      <type></type>
      <name>cNamedObject</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>adfe987f95b37871810f3981267219bb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNamedObject</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>abf107f14a5685d87c6fbb774d06bfc74</anchor>
      <arglist>(const char *name, bool namepooling=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNamedObject</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>adc562ba91fc815b60bdd58dc3a38e363</anchor>
      <arglist>(const cNamedObject &amp;obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cNamedObject</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>a95ee2931a2a23cb0488f89b9843d6a19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cNamedObject &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>a31ac852f8aef7f9c9a1f416987840fbf</anchor>
      <arglist>(const cNamedObject &amp;o)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>ac370b8ddf4a1e0dba92a85fc1c04bc9b</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>a83be907353bc2510cac6212277a77777</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNamePooling</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>a74bd09deef892d5e2f59c09b422404b4</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getNamePooling</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>a0d90efb3c4174b920e54339ee8912db5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNamedObject</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>adfe987f95b37871810f3981267219bb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNamedObject</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>abf107f14a5685d87c6fbb774d06bfc74</anchor>
      <arglist>(const char *name, bool namepooling=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNamedObject</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>adc562ba91fc815b60bdd58dc3a38e363</anchor>
      <arglist>(const cNamedObject &amp;obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cNamedObject</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>a95ee2931a2a23cb0488f89b9843d6a19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cNamedObject &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>a31ac852f8aef7f9c9a1f416987840fbf</anchor>
      <arglist>(const cNamedObject &amp;o)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>ac370b8ddf4a1e0dba92a85fc1c04bc9b</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>a83be907353bc2510cac6212277a77777</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNamePooling</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>a74bd09deef892d5e2f59c09b422404b4</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getNamePooling</name>
      <anchorfile>classomnetpp_1_1cNamedObject.html</anchorfile>
      <anchor>a0d90efb3c4174b920e54339ee8912db5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cNedFunction</name>
    <filename>classomnetpp_1_1cNedFunction.html</filename>
    <base>omnetpp::cNoncopyableOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cNedFunction</name>
      <anchorfile>classomnetpp_1_1cNedFunction.html</anchorfile>
      <anchor>a21bc2080dc5a0322dc4fadc2ce4acd61</anchor>
      <arglist>(NedFunction f, const char *signature, const char *category=nullptr, const char *description=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cNedFunction</name>
      <anchorfile>classomnetpp_1_1cNedFunction.html</anchorfile>
      <anchor>a9ba9e414486a3cd39ad0972a245e1498</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cNedFunction.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>cNedValue</type>
      <name>invoke</name>
      <anchorfile>classomnetpp_1_1cNedFunction.html</anchorfile>
      <anchor>ac70222b332e191477fee8517495fdd15</anchor>
      <arglist>(cComponent *context, cNedValue argv[], int argc)</arglist>
    </member>
    <member kind="function">
      <type>NedFunction</type>
      <name>getFunctionPointer</name>
      <anchorfile>classomnetpp_1_1cNedFunction.html</anchorfile>
      <anchor>aae42639a743f598779e42099fdbebb52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSignature</name>
      <anchorfile>classomnetpp_1_1cNedFunction.html</anchorfile>
      <anchor>a71192cedd1e290e14ba2c9eab9064405</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getReturnType</name>
      <anchorfile>classomnetpp_1_1cNedFunction.html</anchorfile>
      <anchor>a374874114406f75a651d9ec80b7f3fee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getArgType</name>
      <anchorfile>classomnetpp_1_1cNedFunction.html</anchorfile>
      <anchor>a2d862cd66dcfba5732a2a5cd85693d5c</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMinArgs</name>
      <anchorfile>classomnetpp_1_1cNedFunction.html</anchorfile>
      <anchor>a900933ee3a4043841248d88a4db64ab9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxArgs</name>
      <anchorfile>classomnetpp_1_1cNedFunction.html</anchorfile>
      <anchor>ad1f92a1d60eef0b4b0fa7ea19759f063</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasVarArgs</name>
      <anchorfile>classomnetpp_1_1cNedFunction.html</anchorfile>
      <anchor>a1f01635641cc062108b5cb42f6db9b57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getCategory</name>
      <anchorfile>classomnetpp_1_1cNedFunction.html</anchorfile>
      <anchor>a23f7e22a06b055202efa5e417c202fec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDescription</name>
      <anchorfile>classomnetpp_1_1cNedFunction.html</anchorfile>
      <anchor>a7e04381ec22454e831a3db7b063c35c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cNedFunction *</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cNedFunction.html</anchorfile>
      <anchor>a433371a6f418c076622053ae521f9b7a</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cNedFunction *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cNedFunction.html</anchorfile>
      <anchor>a12522e0d130594622aaeef62c0dfea57</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cNedFunction *</type>
      <name>findByPointer</name>
      <anchorfile>classomnetpp_1_1cNedFunction.html</anchorfile>
      <anchor>af5d6c67f76f57da39a5c9a33ae522623</anchor>
      <arglist>(NedFunction f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNedFunction</name>
      <anchorfile>classomnetpp_1_1cNedFunction.html</anchorfile>
      <anchor>a21bc2080dc5a0322dc4fadc2ce4acd61</anchor>
      <arglist>(NedFunction f, const char *signature, const char *category=nullptr, const char *description=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cNedFunction</name>
      <anchorfile>classomnetpp_1_1cNedFunction.html</anchorfile>
      <anchor>a9ba9e414486a3cd39ad0972a245e1498</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cNedFunction.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>cNedValue</type>
      <name>invoke</name>
      <anchorfile>classomnetpp_1_1cNedFunction.html</anchorfile>
      <anchor>ac70222b332e191477fee8517495fdd15</anchor>
      <arglist>(cComponent *context, cNedValue argv[], int argc)</arglist>
    </member>
    <member kind="function">
      <type>NedFunction</type>
      <name>getFunctionPointer</name>
      <anchorfile>classomnetpp_1_1cNedFunction.html</anchorfile>
      <anchor>aae42639a743f598779e42099fdbebb52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getSignature</name>
      <anchorfile>classomnetpp_1_1cNedFunction.html</anchorfile>
      <anchor>a71192cedd1e290e14ba2c9eab9064405</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getReturnType</name>
      <anchorfile>classomnetpp_1_1cNedFunction.html</anchorfile>
      <anchor>a374874114406f75a651d9ec80b7f3fee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>getArgType</name>
      <anchorfile>classomnetpp_1_1cNedFunction.html</anchorfile>
      <anchor>a2d862cd66dcfba5732a2a5cd85693d5c</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMinArgs</name>
      <anchorfile>classomnetpp_1_1cNedFunction.html</anchorfile>
      <anchor>a900933ee3a4043841248d88a4db64ab9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxArgs</name>
      <anchorfile>classomnetpp_1_1cNedFunction.html</anchorfile>
      <anchor>ad1f92a1d60eef0b4b0fa7ea19759f063</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasVarArgs</name>
      <anchorfile>classomnetpp_1_1cNedFunction.html</anchorfile>
      <anchor>a1f01635641cc062108b5cb42f6db9b57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getCategory</name>
      <anchorfile>classomnetpp_1_1cNedFunction.html</anchorfile>
      <anchor>a23f7e22a06b055202efa5e417c202fec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDescription</name>
      <anchorfile>classomnetpp_1_1cNedFunction.html</anchorfile>
      <anchor>a7e04381ec22454e831a3db7b063c35c5</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cNedMathFunction</name>
    <filename>classomnetpp_1_1cNedMathFunction.html</filename>
    <base>omnetpp::cNoncopyableOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cNedMathFunction</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>aa14d61e2d7be7d61abd03c8ca3774948</anchor>
      <arglist>(const char *name, MathFuncNoArg f, int argc=-1, const char *category=nullptr, const char *description=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNedMathFunction</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>adf05a76cf7aeba012cbc78624151a43b</anchor>
      <arglist>(const char *name, MathFunc1Arg f, int argc=-1, const char *category=nullptr, const char *description=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNedMathFunction</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>a9ea31ab5de97918ccc5409e1fa39efbf</anchor>
      <arglist>(const char *name, MathFunc2Args f, int argc=-1, const char *category=nullptr, const char *description=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNedMathFunction</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>aa04185d68732598a49d81a4b8c1fc10c</anchor>
      <arglist>(const char *name, MathFunc3Args f, int argc=-1, const char *category=nullptr, const char *description=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNedMathFunction</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>a0977d02ff48846bc7222038dc70f5118</anchor>
      <arglist>(const char *name, MathFunc4Args f, int argc=-1, const char *category=nullptr, const char *description=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cNedMathFunction</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>ab2a20c2f6b7497ffc1b27cc8da48bade</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumArgs</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>a7f9fe0385d9af8baec1df708950ec972</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MathFunc</type>
      <name>getMathFunc</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>ae0df7d1d2a104e962e09fe97e05d863e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MathFuncNoArg</type>
      <name>getMathFuncNoArg</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>ada8903c95562387663035aa663403582</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MathFunc1Arg</type>
      <name>getMathFunc1Arg</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>ae5ae96b8c1d9a3724ba7a17cb57111ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MathFunc2Args</type>
      <name>getMathFunc2Args</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>a1f794a2c33c02694f8af8f13e6109fce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MathFunc3Args</type>
      <name>getMathFunc3Args</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>a26debc06d4afd8a13799a985679aeff4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MathFunc4Args</type>
      <name>getMathFunc4Args</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>a942b6ead6fe1af5623a82fec55674a57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getCategory</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>a23f7e22a06b055202efa5e417c202fec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDescription</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>a7e04381ec22454e831a3db7b063c35c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cNedMathFunction *</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>aa5104d9295302333e101b6568078146a</anchor>
      <arglist>(const char *name, int numArgs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cNedMathFunction *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>ab61736befa701ed93d5b3f970a479f74</anchor>
      <arglist>(const char *name, int numArgs)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cNedMathFunction *</type>
      <name>findByPointer</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>a22a13c9b75afe448748414a505963dfe</anchor>
      <arglist>(MathFunc f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNedMathFunction</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>aa14d61e2d7be7d61abd03c8ca3774948</anchor>
      <arglist>(const char *name, MathFuncNoArg f, int argc=-1, const char *category=nullptr, const char *description=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNedMathFunction</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>adf05a76cf7aeba012cbc78624151a43b</anchor>
      <arglist>(const char *name, MathFunc1Arg f, int argc=-1, const char *category=nullptr, const char *description=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNedMathFunction</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>a9ea31ab5de97918ccc5409e1fa39efbf</anchor>
      <arglist>(const char *name, MathFunc2Args f, int argc=-1, const char *category=nullptr, const char *description=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNedMathFunction</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>aa04185d68732598a49d81a4b8c1fc10c</anchor>
      <arglist>(const char *name, MathFunc3Args f, int argc=-1, const char *category=nullptr, const char *description=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cNedMathFunction</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>a0977d02ff48846bc7222038dc70f5118</anchor>
      <arglist>(const char *name, MathFunc4Args f, int argc=-1, const char *category=nullptr, const char *description=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cNedMathFunction</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>ab2a20c2f6b7497ffc1b27cc8da48bade</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumArgs</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>a7f9fe0385d9af8baec1df708950ec972</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MathFunc</type>
      <name>getMathFunc</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>ae0df7d1d2a104e962e09fe97e05d863e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MathFuncNoArg</type>
      <name>getMathFuncNoArg</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>ada8903c95562387663035aa663403582</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MathFunc1Arg</type>
      <name>getMathFunc1Arg</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>ae5ae96b8c1d9a3724ba7a17cb57111ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MathFunc2Args</type>
      <name>getMathFunc2Args</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>a1f794a2c33c02694f8af8f13e6109fce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MathFunc3Args</type>
      <name>getMathFunc3Args</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>a26debc06d4afd8a13799a985679aeff4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MathFunc4Args</type>
      <name>getMathFunc4Args</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>a942b6ead6fe1af5623a82fec55674a57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getCategory</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>a23f7e22a06b055202efa5e417c202fec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDescription</name>
      <anchorfile>classomnetpp_1_1cNedMathFunction.html</anchorfile>
      <anchor>a7e04381ec22454e831a3db7b063c35c5</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cNedValue</name>
    <filename>classomnetpp_1_1cNedValue.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a1d1cfd8ffb84e947f82999c682b666a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a3c1e1754d8e79a3540b88e8d1c2f8e32</anchor>
      <arglist>(const cNedValue &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a99f790fa98987b3f14ad6e21f274f084</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a9b4698dd4b7cd33c7455b67ae821e3d0</anchor>
      <arglist>(intpar_t l, const char *unit=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a30f1d13353c687f4acf4d57256108f6c</anchor>
      <arglist>(int l, const char *unit=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a364642337e6d210fe3f412bb7001bdb7</anchor>
      <arglist>(double d, const char *unit=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreservingUnit</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>ad418cc1130c3aeb5f4d6e0c8d12c9d99</anchor>
      <arglist>(intpar_t l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreservingUnit</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>aa54f5567efd3ec5c176b6e45f1e1029c</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnit</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a32187f45a6118a568e0ccfecec658d79</anchor>
      <arglist>(const char *unit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertTo</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>aa9ca3fd5dae4c71cabec6daac6ce4ffc</anchor>
      <arglist>(const char *unit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertToDouble</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a06434e830a8042a2d4fb972f54dfec49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>ada2770e0d2de032d593e6d7e750c0f68</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a2924f6cc1546444425b9f08c2ca42327</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a61706249b79f437b4a6c5db5a9f0e845</anchor>
      <arglist>(cXMLElement *x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a10de0b69b5edd40e9c2638c12e5e0bca</anchor>
      <arglist>(const cPar &amp;par)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>ae496096e91bfc363a5786e2a6784ac09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>intpar_t</type>
      <name>intValue</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a1724c02bea4a1c2436b3c5f35bcac2d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED intpar_t</type>
      <name>longValue</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a4ba40b4fa88f9ad9bfce85972d984303</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>intpar_t</type>
      <name>intValueInUnit</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a0281b483d1d7c5d0a4f78483be8d24db</anchor>
      <arglist>(const char *targetUnit) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>ad104faba1f03ff724812da33980d1253</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleValueInUnit</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a0c87b2a4e3ace1bcf81b644a119f22f5</anchor>
      <arglist>(const char *targetUnit) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getUnit</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a0d05734c8c6121209c8ec9cb0da3d3aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a9fec90708e5c6ed58b9cd83a0c8ace7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a0b1e0d50d56c8202b6f7ad08e1a5599c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>ae16d69665dd41e86df0bd2cb97ac2034</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>ac5fc8c2c3b22074d841d584e2bc6703b</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a5ff609c0cc456fa2e263181e32eea00b</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>ae7f3fa905d82e1825da8f69793c40a87</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a6d25464b678a4230cbad24c9c759a6ed</anchor>
      <arglist>(short i)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a7ce0753d73d6a64cfe0795d485139877</anchor>
      <arglist>(unsigned short i)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a59887ce6d4167a427594cff65c42944b</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>ab1354d3ac345328435acd33259771da1</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a6a1ce8187f5c49015c8907a2453453f6</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>ae8f1aa35fe9287f1c2179e086c5243e7</anchor>
      <arglist>(unsigned long l)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a62384e63c934b44911459725e13fa7db</anchor>
      <arglist>(long long l)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a33e8191928e5bdbfccd768d318d2a845</anchor>
      <arglist>(unsigned long long l)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a6a09aea24959e0463db6e9a0a2d377be</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a57e15a009ea42e23a9c655cd081d2642</anchor>
      <arglist>(long double d)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>aa9a96eaa029c5b812c951a1c1a78f705</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a421544aef529580f239c9f166e2e74b7</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>aaad01a05602f19cfe0e505f726dc3d0c</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a783b198f97b4f8b79e5717e9a43029fe</anchor>
      <arglist>(const cPar &amp;par)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a67b76affb3b5d35fa419ac234144038b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator char</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a561b4a60cc640710c3b9220d692de07d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned char</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a891f3d5b152d0bd0b8bc27726d45a491</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a48d27bd92e68c69527589ea65a9af69f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned int</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>ab85cf3d18c4ed830e687b87ede9e40a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator short</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a11840cd2d3ee7968aaf9b04a0af3bec0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned short</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a6207df99f12600860d669651bdef19a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>ad7ce59321a0dd63e7f1fab6dceabe53b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned long</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>acafb5c7caec25508a24cb4800beb18f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long long</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>aa83077b8f499dae99948d972af2dc8c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned long long</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a3a81249f06665fa9c35153447216b96d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a3c5a46ebe31a3699f441668931f2978e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long double</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a0e1aefd8077762b56422c42535e8c4af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>af4e65277e4f9ecbe4f7cd87ab63be71e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a3888dcd59dd5acd1ca5b9bee4c2e252a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator cXMLElement *</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a64e45ef809ba2c3687c3f6733b765c58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a97c56d51eec84be3e856eb0ca6ebd3d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a345b371a0aef782ab74b4a8aa0f5eff2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSet</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a479da8bc6c27c908ec0c5c460fb26a4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>ae9b08fca99a89639cd78a91152a64d5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getTypeName</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a34a85b045e20a88c11f98b4049085e34</anchor>
      <arglist>(Type t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>convertUnit</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a44cc255a4b41c3baea2dad147e288a78</anchor>
      <arglist>(double d, const char *unit, const char *targetUnit)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>parseQuantity</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>abe0c445d9f20ac77b54533577a6f02fd</anchor>
      <arglist>(const char *str, const char *expectedUnit=nullptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>parseQuantity</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a5bbec8611a1d832564a92f0ca546bc7a</anchor>
      <arglist>(const char *str, std::string &amp;outActualUnit)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getPooled</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>ab74a52c4a45a291ab96acd2892ec94fd</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a99f790fa98987b3f14ad6e21f274f084</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a9b4698dd4b7cd33c7455b67ae821e3d0</anchor>
      <arglist>(intpar_t l, const char *unit=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a30f1d13353c687f4acf4d57256108f6c</anchor>
      <arglist>(int l, const char *unit=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a364642337e6d210fe3f412bb7001bdb7</anchor>
      <arglist>(double d, const char *unit=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreservingUnit</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>ad418cc1130c3aeb5f4d6e0c8d12c9d99</anchor>
      <arglist>(intpar_t l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPreservingUnit</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>aa54f5567efd3ec5c176b6e45f1e1029c</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnit</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a32187f45a6118a568e0ccfecec658d79</anchor>
      <arglist>(const char *unit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertTo</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>aa9ca3fd5dae4c71cabec6daac6ce4ffc</anchor>
      <arglist>(const char *unit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertToDouble</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a06434e830a8042a2d4fb972f54dfec49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>ada2770e0d2de032d593e6d7e750c0f68</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a2924f6cc1546444425b9f08c2ca42327</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a61706249b79f437b4a6c5db5a9f0e845</anchor>
      <arglist>(cXMLElement *x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a10de0b69b5edd40e9c2638c12e5e0bca</anchor>
      <arglist>(const cPar &amp;par)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>ae496096e91bfc363a5786e2a6784ac09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>intpar_t</type>
      <name>intValue</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a1724c02bea4a1c2436b3c5f35bcac2d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED intpar_t</type>
      <name>longValue</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a4ba40b4fa88f9ad9bfce85972d984303</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>intpar_t</type>
      <name>intValueInUnit</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a0281b483d1d7c5d0a4f78483be8d24db</anchor>
      <arglist>(const char *targetUnit) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>ad104faba1f03ff724812da33980d1253</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleValueInUnit</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a0c87b2a4e3ace1bcf81b644a119f22f5</anchor>
      <arglist>(const char *targetUnit) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getUnit</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a0d05734c8c6121209c8ec9cb0da3d3aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a9fec90708e5c6ed58b9cd83a0c8ace7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a0b1e0d50d56c8202b6f7ad08e1a5599c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>ae16d69665dd41e86df0bd2cb97ac2034</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>ac5fc8c2c3b22074d841d584e2bc6703b</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a5ff609c0cc456fa2e263181e32eea00b</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>ae7f3fa905d82e1825da8f69793c40a87</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a6d25464b678a4230cbad24c9c759a6ed</anchor>
      <arglist>(short i)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a7ce0753d73d6a64cfe0795d485139877</anchor>
      <arglist>(unsigned short i)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a59887ce6d4167a427594cff65c42944b</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>ab1354d3ac345328435acd33259771da1</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a6a1ce8187f5c49015c8907a2453453f6</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>ae8f1aa35fe9287f1c2179e086c5243e7</anchor>
      <arglist>(unsigned long l)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a62384e63c934b44911459725e13fa7db</anchor>
      <arglist>(long long l)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a33e8191928e5bdbfccd768d318d2a845</anchor>
      <arglist>(unsigned long long l)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a6a09aea24959e0463db6e9a0a2d377be</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a57e15a009ea42e23a9c655cd081d2642</anchor>
      <arglist>(long double d)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>aa9a96eaa029c5b812c951a1c1a78f705</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a421544aef529580f239c9f166e2e74b7</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>aaad01a05602f19cfe0e505f726dc3d0c</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function">
      <type>cNedValue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a783b198f97b4f8b79e5717e9a43029fe</anchor>
      <arglist>(const cPar &amp;par)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a67b76affb3b5d35fa419ac234144038b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator char</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a561b4a60cc640710c3b9220d692de07d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned char</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a891f3d5b152d0bd0b8bc27726d45a491</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a48d27bd92e68c69527589ea65a9af69f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned int</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>ab85cf3d18c4ed830e687b87ede9e40a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator short</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a11840cd2d3ee7968aaf9b04a0af3bec0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned short</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a6207df99f12600860d669651bdef19a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>ad7ce59321a0dd63e7f1fab6dceabe53b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned long</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>acafb5c7caec25508a24cb4800beb18f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long long</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>aa83077b8f499dae99948d972af2dc8c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned long long</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a3a81249f06665fa9c35153447216b96d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a3c5a46ebe31a3699f441668931f2978e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long double</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a0e1aefd8077762b56422c42535e8c4af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>af4e65277e4f9ecbe4f7cd87ab63be71e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a3888dcd59dd5acd1ca5b9bee4c2e252a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator cXMLElement *</name>
      <anchorfile>classomnetpp_1_1cNedValue.html</anchorfile>
      <anchor>a64e45ef809ba2c3687c3f6733b765c58</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cNegBinomial</name>
    <filename>classomnetpp_1_1cNegBinomial.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cNegBinomial *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cNegBinomial.html</anchorfile>
      <anchor>a4fe776678758c1c5cee718be85970c19</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cNegBinomial.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cNegBinomial.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cNegBinomial *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cNegBinomial.html</anchorfile>
      <anchor>a4fe776678758c1c5cee718be85970c19</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cNegBinomial.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cNegBinomial.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cNoncopyableOwnedObject</name>
    <filename>classomnetpp_1_1cNoncopyableOwnedObject.html</filename>
    <base>omnetpp::cOwnedObject</base>
    <base protection="private">omnetpp::noncopyable</base>
    <member kind="function">
      <type></type>
      <name>cNoncopyableOwnedObject</name>
      <anchorfile>classomnetpp_1_1cNoncopyableOwnedObject.html</anchorfile>
      <anchor>a3ccaef17700a8263a1db446f3d121cbf</anchor>
      <arglist>(const char *name=nullptr, bool namepooling=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cNoncopyableOwnedObject *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cNoncopyableOwnedObject.html</anchorfile>
      <anchor>aa3381b69e2fa29299a5513080dd22be1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cNoncopyableOwnedObject.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cNoncopyableOwnedObject.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cNormal</name>
    <filename>classomnetpp_1_1cNormal.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cNormal *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cNormal.html</anchorfile>
      <anchor>a44d8134eae7a5f582dc7a1604178664c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cNormal.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cNormal.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cNormal *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cNormal.html</anchorfile>
      <anchor>a44d8134eae7a5f582dc7a1604178664c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cNormal.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cNormal.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cNullEnvir</name>
    <filename>classomnetpp_1_1cNullEnvir.html</filename>
    <base>omnetpp::cEnvir</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>objectDeleted</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a8f9108e44afef3f97ecb687e4b20e9fc</anchor>
      <arglist>(cObject *object) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>simulationEvent</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>ad36a41e2be8a134850684b17b4f36ba8</anchor>
      <arglist>(cEvent *event) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>messageScheduled</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a336081183e31c6df1d59112698318d68</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>messageCancelled</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a1d1532198af100b8a10b13f8a322ca4d</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>beginSend</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a26d98e682cb975371124daced90339ab</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>messageSendDirect</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a34b43f3054e1434ad42466e742f5b127</anchor>
      <arglist>(cMessage *msg, cGate *toGate, simtime_t propagationDelay, simtime_t transmissionDelay) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>messageSendHop</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a5246c17391314741a64a10a358b97529</anchor>
      <arglist>(cMessage *msg, cGate *srcGate) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>messageSendHop</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a8304f83af6701251d48b42574caa5b48</anchor>
      <arglist>(cMessage *msg, cGate *srcGate, simtime_t propagationDelay, simtime_t transmissionDelay, bool discard) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endSend</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a782ad3b2414fd8521a49e11f85902c22</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>messageCreated</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a31a6bb57846fb95a0d88f0d03569c3b3</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>messageCloned</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>acde5166b66864d6b331daa54ad3b9709</anchor>
      <arglist>(cMessage *msg, cMessage *clone) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>messageDeleted</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a2c736148bafc453d1d63cf980117833b</anchor>
      <arglist>(cMessage *msg) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moduleReparented</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a7f266407cd290799344aedc4f712ada1</anchor>
      <arglist>(cModule *module, cModule *oldparent, int oldId) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>componentMethodBegin</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>abaf01f3a91e50ca6e7c320100534191c</anchor>
      <arglist>(cComponent *from, cComponent *to, const char *methodFmt, va_list va, bool silent) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>componentMethodEnd</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a6494eb9f3a7791fd323c5537a8ed0b97</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moduleCreated</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>ab0f1cb1242182e292fd30f152a559f2d</anchor>
      <arglist>(cModule *newmodule) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moduleDeleted</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a90211b850fda69f207b253a974d7c6d1</anchor>
      <arglist>(cModule *module) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>gateCreated</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a544e643d58dc893a2db9aebea2714c12</anchor>
      <arglist>(cGate *newgate) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>gateDeleted</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>ab5e9354719e5e005e53ac57fb68087ae</anchor>
      <arglist>(cGate *gate) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connectionCreated</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a08db1d8f94efbacbccec050df173c406</anchor>
      <arglist>(cGate *srcgate) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>connectionDeleted</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>ab9538f2c68bafdf6ead02520d72e6d3e</anchor>
      <arglist>(cGate *srcgate) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>displayStringChanged</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a4dc0770b0573e95770f104864a35d62e</anchor>
      <arglist>(cComponent *component) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>undisposedObject</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>aeadd1278db27d9de713a78384cefce4b</anchor>
      <arglist>(cObject *obj) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>log</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>ac08c73f89277260ec1fe888b9ac7583d</anchor>
      <arglist>(cLogEntry *entry) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>preconfigure</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a4375c4f7d44a34d7da3ee4e7cc05a333</anchor>
      <arglist>(cComponent *component) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>configure</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>adf7e1cc0fcac18feb2919cfb2b44bb39</anchor>
      <arglist>(cComponent *component) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>readParameter</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a5028b334b31026f0d2aa198e84152db9</anchor>
      <arglist>(cPar *par) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isModuleLocal</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a29a4a0682e40eef1e102dde381035ef2</anchor>
      <arglist>(cModule *parentmod, const char *modname, int index) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getXMLDocument</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a1aed2cef41aafe7a7cfebfa970b83170</anchor>
      <arglist>(const char *filename, const char *xpath=nullptr) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getParsedXMLString</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a3a375f7d1edb6453d2075e7c6fb768d0</anchor>
      <arglist>(const char *content, const char *xpath=nullptr) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forgetXMLDocument</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a0b9ad0dcd10a90a68be280e3135b1171</anchor>
      <arglist>(const char *filename) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forgetParsedXMLString</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>ac248b6ec2e164761c4147decb879df90</anchor>
      <arglist>(const char *content) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flushXMLDocumentCache</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>ad1881c36294c5884db2ceb9d39f26a5e</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>flushXMLParsedContentCache</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a13d12bc3946bf178be97902d422e6636</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>getExtraStackForEnvir</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a24711f75c7c20ec122cb41b087e8de20</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cConfiguration *</type>
      <name>getConfig</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a281c6ac6cefd395ac57ca94a80e2371f</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>resolveResourcePath</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a8ab3386f3c8425ab75ed92673458af9d</anchor>
      <arglist>(const char *fileName, cComponentType *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isGUI</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a469e1dd2afd234ff15875c23aa1de32a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isExpressMode</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a2a57132c3b46e3c224c3939785577b8f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getImageSize</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a383f34418b168314214b47542f3ed811</anchor>
      <arglist>(const char *imageName, double &amp;outWidth, double &amp;outHeight) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>getTextExtent</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a89ada276cf369a4bde0ff1eb596c4592</anchor>
      <arglist>(const cFigure::Font &amp;font, const char *text, double &amp;outWidth, double &amp;outHeight, double &amp;outAscent) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>appendToImagePath</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>afe6a28ec14011f8ff4085778c0e098a5</anchor>
      <arglist>(const char *directory) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadImage</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>aef49e0edf863a6d2049fa3bbda02e1ee</anchor>
      <arglist>(const char *fileName, const char *imageName=nullptr) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cFigure::Rectangle</type>
      <name>getSubmoduleBounds</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a00b954f475dadc2b5159dd6acc4d57f7</anchor>
      <arglist>(const cModule *submodule) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getZoomLevel</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a7ef1b2b4ad676e11aca1e8a8ebeebbb4</anchor>
      <arglist>(const cModule *module) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getAnimationTime</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>ae9f5275bc919d3b3abd6e5e1d056c0dc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getAnimationSpeed</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>ac2d566dca210d6aa43bf456c2df5a122</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getRemainingAnimationHoldTime</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a7ccb616fc3136b366f4edc6d08b8a6d6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bubble</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a905d0631c64af4b5771efd55b1876906</anchor>
      <arglist>(cComponent *component, const char *text) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>gets</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a60d66e19319e0078da55b62067bdac96</anchor>
      <arglist>(const char *prompt, const char *defaultreply=nullptr) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumRNGs</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a9263181e6ac039f0c4d74c86ea635185</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cRNG *</type>
      <name>getRNG</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a550eb862ec566739525d1244a819c272</anchor>
      <arglist>(int k) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void *</type>
      <name>registerOutputVector</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a50478cbf002226bf4fa42d1d950a95ce</anchor>
      <arglist>(const char *modulename, const char *vectorname) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deregisterOutputVector</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a56494f8c2629792a5da7c1bd0594934e</anchor>
      <arglist>(void *vechandle) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setVectorAttribute</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a551e366d5ba3f8680e97572803aa43b9</anchor>
      <arglist>(void *vechandle, const char *name, const char *value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>recordInOutputVector</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a65171d612bff370f8b894f8db6c92415</anchor>
      <arglist>(void *vechandle, simtime_t t, double value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordScalar</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>abe2cd89d88674f23b39480b5374b8e17</anchor>
      <arglist>(cComponent *component, const char *name, double value, opp_string_map *attributes=nullptr) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordStatistic</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a362cfe8ae57e9057b7e264689246169e</anchor>
      <arglist>(cComponent *component, const char *name, cStatistic *statistic, opp_string_map *attributes=nullptr) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addResultRecorders</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>afc8df9503189d3f6dd06f359e3e562ca</anchor>
      <arglist>(cComponent *component, simsignal_t signal, const char *statisticName, cProperty *statisticTemplateProperty) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::ostream *</type>
      <name>getStreamForSnapshot</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>af4368a48177a84231fe8084dba309722</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>releaseStreamForSnapshot</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a72cfe41ba7ac30085fb145ebc632ca84</anchor>
      <arglist>(std::ostream *os) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getArgCount</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>abc0458d57fc3b50053bf52c5e34ceeb2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual char **</type>
      <name>getArgVector</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a9f1c5ba56b6e8ab75ec96744c7e9b21a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getParsimProcId</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a099eae918065f6571a84237a58bda0d1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getParsimNumPartitions</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>adbbec56061dd2028b0a7ee91e1b3f155</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>getUniqueNumber</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a2c83b9c96638f5427e54b5e987d9c63c</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>refOsgNode</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a1c4c2a8803373de36ee673df79c41dae</anchor>
      <arglist>(osg::Node *scene) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unrefOsgNode</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a09ec6cc524fef9ae1ab592be35546cbf</anchor>
      <arglist>(osg::Node *scene) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>idle</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a83f281e4ff5e19e8fbfec1cacad79b33</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>ensureDebugger</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a02b89a87355db1646a447ca3ac8e0d7c</anchor>
      <arglist>(cRuntimeError *) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addLifecycleListener</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>ab8dc0377b2245bb0ef1611b8d2fd30fa</anchor>
      <arglist>(cISimulationLifecycleListener *listener) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removeLifecycleListener</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a9e1bf66f0ef9aa95bd9ae08bf3218760</anchor>
      <arglist>(cISimulationLifecycleListener *listener) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>alert</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a1135d33c58981c101e6c9ce6f37fc691</anchor>
      <arglist>(const char *msg) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual bool</type>
      <name>askYesNo</name>
      <anchorfile>classomnetpp_1_1cNullEnvir.html</anchorfile>
      <anchor>a71b2fb14579a2ba7da91dadb6e55177c</anchor>
      <arglist>(const char *prompt) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cNumericResultFilter</name>
    <filename>classomnetpp_1_1cNumericResultFilter.html</filename>
    <base>omnetpp::cResultFilter</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::cNumericResultRecorder</name>
    <filename>classomnetpp_1_1cNumericResultRecorder.html</filename>
    <base>omnetpp::cResultRecorder</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::cObject</name>
    <filename>classomnetpp_1_1cObject.html</filename>
    <member kind="function">
      <type></type>
      <name>cObject</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a19c327c658826577208cd63317db3373</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cObject</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a9f88630a430d31cf2caf4abd8d857e6a</anchor>
      <arglist>(const cObject &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cObject</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>aafe3a7f7ab9e37024e2ea482e12968de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a03b8b5a278c33b2d9e225ceb286f350e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a2ab4ce45db41bdd5911d4dc95286c592</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isName</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a3666b57e313a2f38433fdfc50fd94a6b</anchor>
      <arglist>(const char *s) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>ad09dd3b786efac794467023670cda227</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getFullPath</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>ae1e19ffcfb20b12d818678b72fad66eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const cObject *</type>
      <name>getThisPtr</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a977a6a1a004b0df41a87cf51a78220c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a9bb39f105e156b9211b189d47f120bdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a468eb64b641e75ebd3e304085eed1d70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a6a9dc079d7c602197209793e1463dd25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a1106f39a6054674d8fb637735c5f1323</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a9a09b9ba27840751a6a0910e6d6ecdde</anchor>
      <arglist>(cCommBuffer *buffer) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a9ef56c03ddb3166c46048ed65b767a72</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>getOwner</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a015cb3b9e87771a440b2b691620254e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOwnedObject</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>ab9eec938478786ec146179acf4770d25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a6fbbab48c06f13814a0a7a71537ae500</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>findObject</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a2e891dff011a9e6a5ff3fda07962d13a</anchor>
      <arglist>(const char *name, bool deep=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyNotSupported</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a148064f88c8510e5ee4f82e7ecc29d51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>take</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a0f12f812ec24a2b8c9137da85268bf24</anchor>
      <arglist>(cOwnedObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>drop</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a32f73a8adf0bf38a045afcbd9babbd05</anchor>
      <arglist>(cOwnedObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dropAndDelete</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a9d79054c2c4ee2e7738e0e0cd3555713</anchor>
      <arglist>(cOwnedObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a2ab4ce45db41bdd5911d4dc95286c592</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isName</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a3666b57e313a2f38433fdfc50fd94a6b</anchor>
      <arglist>(const char *s) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>ad09dd3b786efac794467023670cda227</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getFullPath</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>ae1e19ffcfb20b12d818678b72fad66eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const cObject *</type>
      <name>getThisPtr</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a977a6a1a004b0df41a87cf51a78220c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a9bb39f105e156b9211b189d47f120bdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED std::string</type>
      <name>info</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a468eb64b641e75ebd3e304085eed1d70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED std::string</type>
      <name>detailedInfo</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a6a9dc079d7c602197209793e1463dd25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a1106f39a6054674d8fb637735c5f1323</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>take</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a0f12f812ec24a2b8c9137da85268bf24</anchor>
      <arglist>(cOwnedObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>drop</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a32f73a8adf0bf38a045afcbd9babbd05</anchor>
      <arglist>(cOwnedObject *obj)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dropAndDelete</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a9d79054c2c4ee2e7738e0e0cd3555713</anchor>
      <arglist>(cOwnedObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a9a09b9ba27840751a6a0910e6d6ecdde</anchor>
      <arglist>(cCommBuffer *buffer) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a9ef56c03ddb3166c46048ed65b767a72</anchor>
      <arglist>(cCommBuffer *buffer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>getOwner</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a015cb3b9e87771a440b2b691620254e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOwnedObject</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>ab9eec938478786ec146179acf4770d25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a6fbbab48c06f13814a0a7a71537ae500</anchor>
      <arglist>(cVisitor *v)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>findObject</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a2e891dff011a9e6a5ff3fda07962d13a</anchor>
      <arglist>(const char *name, bool deep=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyNotSupported</name>
      <anchorfile>classomnetpp_1_1cObject.html</anchorfile>
      <anchor>a148064f88c8510e5ee4f82e7ecc29d51</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cObjectFactory</name>
    <filename>classomnetpp_1_1cObjectFactory.html</filename>
    <base>omnetpp::cNoncopyableOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cObjectFactory</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>adca682b0fe95761d2544143d1d2497c3</anchor>
      <arglist>(const char *name, cObject *(*creatorfunc)(), void *(*castfunc)(cObject *), const char *description=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isAbstract</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>a71d92c323d17975474ed6f74c8339ad0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>createOne</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>a97e8e1b042e982b7cbef58e506e57a3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInstance</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>a5633cf1e37948ee99fd40387d46ff457</anchor>
      <arglist>(cObject *obj) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDescription</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>a7e04381ec22454e831a3db7b063c35c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObjectFactory *</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>a618519deedecc134daf6f45128cab03f</anchor>
      <arglist>(const char *className, const char *contextNamespace=nullptr, bool fallbackToOmnetpp=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObjectFactory *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>a48fceee48320fe539f535252ca9baadc</anchor>
      <arglist>(const char *className, const char *contextNamespace=nullptr, bool fallbackToOmnetpp=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObject *</type>
      <name>createOne</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>a88064a4400527ea9e98816f3dbdb1162</anchor>
      <arglist>(const char *classname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObject *</type>
      <name>createOneIfClassIsKnown</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>afcdd5345b13c9d6b71ebf291db766ab4</anchor>
      <arglist>(const char *classname)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cObjectFactory</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>adca682b0fe95761d2544143d1d2497c3</anchor>
      <arglist>(const char *name, cObject *(*creatorfunc)(), void *(*castfunc)(cObject *), const char *description=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isAbstract</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>a71d92c323d17975474ed6f74c8339ad0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>createOne</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>a97e8e1b042e982b7cbef58e506e57a3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isInstance</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>a5633cf1e37948ee99fd40387d46ff457</anchor>
      <arglist>(cObject *obj) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDescription</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>a7e04381ec22454e831a3db7b063c35c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObjectFactory *</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>a618519deedecc134daf6f45128cab03f</anchor>
      <arglist>(const char *className, const char *contextNamespace=nullptr, bool fallbackToOmnetpp=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObjectFactory *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>a48fceee48320fe539f535252ca9baadc</anchor>
      <arglist>(const char *className, const char *contextNamespace=nullptr, bool fallbackToOmnetpp=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObject *</type>
      <name>createOne</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>a88064a4400527ea9e98816f3dbdb1162</anchor>
      <arglist>(const char *classname)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cObject *</type>
      <name>createOneIfClassIsKnown</name>
      <anchorfile>classomnetpp_1_1cObjectFactory.html</anchorfile>
      <anchor>afcdd5345b13c9d6b71ebf291db766ab4</anchor>
      <arglist>(const char *classname)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cObjectOsgNode</name>
    <filename>classomnetpp_1_1cObjectOsgNode.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::cObjectResultFilter</name>
    <filename>classomnetpp_1_1cObjectResultFilter.html</filename>
    <base>omnetpp::cResultFilter</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::CodeFragments</name>
    <filename>classomnetpp_1_1CodeFragments.html</filename>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cFigure::Color</name>
    <filename>structomnetpp_1_1cFigure_1_1Color.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::cQueue::Comparator</name>
    <filename>classomnetpp_1_1cQueue_1_1Comparator.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::Constant0Filter</name>
    <filename>classomnetpp_1_1Constant0Filter.html</filename>
    <base>omnetpp::ConstantFilter</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::Constant1Filter</name>
    <filename>classomnetpp_1_1Constant1Filter.html</filename>
    <base>omnetpp::ConstantFilter</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::ConstantFilter</name>
    <filename>classomnetpp_1_1ConstantFilter.html</filename>
    <base>omnetpp::cResultFilter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1ConstantFilter.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cExpression::Context</name>
    <filename>classomnetpp_1_1cExpression_1_1Context.html</filename>
    <base>omnetpp::cObject</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::cOsgCanvas</name>
    <filename>classomnetpp_1_1cOsgCanvas.html</filename>
    <base>omnetpp::cOwnedObject</base>
    <class kind="struct">omnetpp::cOsgCanvas::EarthViewpoint</class>
    <class kind="struct">omnetpp::cOsgCanvas::Viewpoint</class>
    <member kind="enumeration">
      <type></type>
      <name>ViewerStyle</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>gaf0b73d3d331edf08d7b2401b48622652</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STYLE_GENERIC</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggaf0b73d3d331edf08d7b2401b48622652aaa5430724874cdc78a300be44a6c10ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STYLE_EARTH</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggaf0b73d3d331edf08d7b2401b48622652a684349544d05985c3eb68e1900761a2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CameraManipulatorType</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>gae9cf5117e3a9b51d6ded7154cd384906</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_AUTO</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggae9cf5117e3a9b51d6ded7154cd384906a81fb426ed374c5ee082a3597476176b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_TERRAIN</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggae9cf5117e3a9b51d6ded7154cd384906a555390fd074a995d7de38fedb8dc49b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_OVERVIEW</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggae9cf5117e3a9b51d6ded7154cd384906acda0a9dae50428bb310a1c53f95b97d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_TRACKBALL</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggae9cf5117e3a9b51d6ded7154cd384906a8830f1e4b78054daf800cb4ce55a0092</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_EARTH</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggae9cf5117e3a9b51d6ded7154cd384906a163adba5116bf621ab744740eb48c0e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STYLE_GENERIC</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggaf0b73d3d331edf08d7b2401b48622652aaa5430724874cdc78a300be44a6c10ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STYLE_EARTH</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggaf0b73d3d331edf08d7b2401b48622652a684349544d05985c3eb68e1900761a2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_AUTO</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggae9cf5117e3a9b51d6ded7154cd384906a81fb426ed374c5ee082a3597476176b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_TERRAIN</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggae9cf5117e3a9b51d6ded7154cd384906a555390fd074a995d7de38fedb8dc49b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_OVERVIEW</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggae9cf5117e3a9b51d6ded7154cd384906acda0a9dae50428bb310a1c53f95b97d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_TRACKBALL</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggae9cf5117e3a9b51d6ded7154cd384906a8830f1e4b78054daf800cb4ce55a0092</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_EARTH</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggae9cf5117e3a9b51d6ded7154cd384906a163adba5116bf621ab744740eb48c0e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cOsgCanvas *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>ada80d2561409f1d419ee5228e6410b86</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setScene</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a8a8a5aac326621921cba707f8c291234</anchor>
      <arglist>(osg::Node *scene)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual osg::Node *</type>
      <name>getScene</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>af5fd72fabad3ab7bff49d4eeec307b01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewerStyle</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a008e95db0f26057186c8ea3c71b02084</anchor>
      <arglist>(ViewerStyle viewerStyle)</arglist>
    </member>
    <member kind="function">
      <type>ViewerStyle</type>
      <name>getViewerStyle</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>ac3d905ad9193b685fe32ecfd4a6a5f9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClearColor</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>acd60e9605b54ac5f9ea1a962fc4bff02</anchor>
      <arglist>(Color clearColor)</arglist>
    </member>
    <member kind="function">
      <type>const Color &amp;</type>
      <name>getClearColor</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>ae0cd9f118ea768f6517dc4a6695c83db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCameraManipulatorType</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>ab16208e1fdf8295c6786460e9e55f45f</anchor>
      <arglist>(CameraManipulatorType manipulator)</arglist>
    </member>
    <member kind="function">
      <type>CameraManipulatorType</type>
      <name>getCameraManipulatorType</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a1942bb5db32282594e895d881ec0091e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFieldOfViewAngle</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a793f3b70365ddb0f99daeab3585683d2</anchor>
      <arglist>(double fieldOfViewAngle)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFieldOfViewAngle</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a2771e30b582a3458b90222c0423b6bf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZNear</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a5d497aeb40cb3788dacf6aec963b6c77</anchor>
      <arglist>(double zNear)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZFar</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a8220e5acf11a0a24d6ee3139f56e1fa8</anchor>
      <arglist>(double zFar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZLimits</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a0e6628f1bab0e2a095fc35b1d3009694</anchor>
      <arglist>(double zNear, double zFar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearZLimits</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>adaa79dd9873faa2c93425f2a6cb79581</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasZLimits</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>ac93dfa62bfb780db7c28810de4dfb203</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getZNear</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a53f404273310c51298bcfc302328f84c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getZFar</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a2e572a66c637f62e8cf0988336815c85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGenericViewpoint</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a1541d87ab041039a3a1aa0e20dfa3ea9</anchor>
      <arglist>(const Viewpoint &amp;viewpoint)</arglist>
    </member>
    <member kind="function">
      <type>const Viewpoint &amp;</type>
      <name>getGenericViewpoint</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a51a814f6519bd1f105328f15e1ac28de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEarthViewpoint</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a4b8bc530c73111806dbe77bc29b0cee5</anchor>
      <arglist>(const EarthViewpoint &amp;earthViewpoint)</arglist>
    </member>
    <member kind="function">
      <type>const EarthViewpoint &amp;</type>
      <name>getEarthViewpoint</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>aedc6340243226b5b14f63336758f4dc0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cOsgCanvas *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>ada80d2561409f1d419ee5228e6410b86</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setScene</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a8a8a5aac326621921cba707f8c291234</anchor>
      <arglist>(osg::Node *scene)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual osg::Node *</type>
      <name>getScene</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>af5fd72fabad3ab7bff49d4eeec307b01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setViewerStyle</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a008e95db0f26057186c8ea3c71b02084</anchor>
      <arglist>(ViewerStyle viewerStyle)</arglist>
    </member>
    <member kind="function">
      <type>ViewerStyle</type>
      <name>getViewerStyle</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>ac3d905ad9193b685fe32ecfd4a6a5f9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClearColor</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>acd60e9605b54ac5f9ea1a962fc4bff02</anchor>
      <arglist>(Color clearColor)</arglist>
    </member>
    <member kind="function">
      <type>const Color &amp;</type>
      <name>getClearColor</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>ae0cd9f118ea768f6517dc4a6695c83db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCameraManipulatorType</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>ab16208e1fdf8295c6786460e9e55f45f</anchor>
      <arglist>(CameraManipulatorType manipulator)</arglist>
    </member>
    <member kind="function">
      <type>CameraManipulatorType</type>
      <name>getCameraManipulatorType</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a1942bb5db32282594e895d881ec0091e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFieldOfViewAngle</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a793f3b70365ddb0f99daeab3585683d2</anchor>
      <arglist>(double fieldOfViewAngle)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getFieldOfViewAngle</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a2771e30b582a3458b90222c0423b6bf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZNear</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a5d497aeb40cb3788dacf6aec963b6c77</anchor>
      <arglist>(double zNear)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZFar</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a8220e5acf11a0a24d6ee3139f56e1fa8</anchor>
      <arglist>(double zFar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZLimits</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a0e6628f1bab0e2a095fc35b1d3009694</anchor>
      <arglist>(double zNear, double zFar)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearZLimits</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>adaa79dd9873faa2c93425f2a6cb79581</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasZLimits</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>ac93dfa62bfb780db7c28810de4dfb203</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getZNear</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a53f404273310c51298bcfc302328f84c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getZFar</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a2e572a66c637f62e8cf0988336815c85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGenericViewpoint</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a1541d87ab041039a3a1aa0e20dfa3ea9</anchor>
      <arglist>(const Viewpoint &amp;viewpoint)</arglist>
    </member>
    <member kind="function">
      <type>const Viewpoint &amp;</type>
      <name>getGenericViewpoint</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a51a814f6519bd1f105328f15e1ac28de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEarthViewpoint</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>a4b8bc530c73111806dbe77bc29b0cee5</anchor>
      <arglist>(const EarthViewpoint &amp;earthViewpoint)</arglist>
    </member>
    <member kind="function">
      <type>const EarthViewpoint &amp;</type>
      <name>getEarthViewpoint</name>
      <anchorfile>classomnetpp_1_1cOsgCanvas.html</anchorfile>
      <anchor>aedc6340243226b5b14f63336758f4dc0</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::CountFilter</name>
    <filename>classomnetpp_1_1CountFilter.html</filename>
    <base>omnetpp::TotalCountFilter</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::CountNanFilter</name>
    <filename>classomnetpp_1_1CountNanFilter.html</filename>
    <base>omnetpp::cNumericResultFilter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1CountNanFilter.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::CountRecorder</name>
    <filename>classomnetpp_1_1CountRecorder.html</filename>
    <base>omnetpp::TotalCountRecorder</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::cOutVector</name>
    <filename>classomnetpp_1_1cOutVector.html</filename>
    <base>omnetpp::cNoncopyableOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cOutVector</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a7b120a883e2c6cac3ed7e5f2e1e305e9</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cOutVector</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>ae710f134555e2e90cf80e77f3e88fd33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a6a2b95747da53f718d437b43a44dbbda</anchor>
      <arglist>(const char *name) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEnum</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>aaa720f0373785b1d4a0c63013ff590d9</anchor>
      <arglist>(const char *registeredEnumName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEnum</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>ab7f3b34616c552b3e217a0420858865e</anchor>
      <arglist>(cEnum *enumDecl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUnit</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a9aa52943a9f7c2a24e13c94e1be5acbe</anchor>
      <arglist>(const char *unit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a893411190ca1d9df510fc6695122cb15</anchor>
      <arglist>(Type type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInterpolationMode</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a76b2b4fb57076bf0edef9c9900006903</anchor>
      <arglist>(InterpolationMode mode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMin</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a41f5c3ab06740760e338bd3498d70ab4</anchor>
      <arglist>(double minValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMax</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>af9e2d3d9c2f05ea2bdd4ec3a58d07b79</anchor>
      <arglist>(double maxValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>record</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a9d9023fc8be8ea65240ebd2f4a760f3f</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>record</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>ae981cfc4db52ee570159445618b8f738</anchor>
      <arglist>(SimTime value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>recordWithTimestamp</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a13bb325bf01759ea9b42897acdca8a72</anchor>
      <arglist>(simtime_t t, double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>recordWithTimestamp</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a5d21284d0b17a0aad1086a67665f55ac</anchor>
      <arglist>(simtime_t t, SimTime value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enable</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a0111431f6286280f1532e5ae24763edd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disable</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a07d0958526619eadcc9dbdc65bd8c987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEnabled</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a7b6678112201531a509c5b8aa850941e</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEnabled</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>ae9ed4bd4596d96caecc0bb19e9dc4db5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRecordDuringWarmupPeriod</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a6477bc7f84b1c4ef4e6c3d8c6294d5b6</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getRecordDuringWarmupPeriod</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a4629107bf1cf4a8759fd136304192913</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getValuesReceived</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a89f058d301d6a874e266c91cbfb37680</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getValuesStored</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>ad4590a7eaec7c9fe158417cf5d8177f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cOutVector</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a7b120a883e2c6cac3ed7e5f2e1e305e9</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cOutVector</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>ae710f134555e2e90cf80e77f3e88fd33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a6a2b95747da53f718d437b43a44dbbda</anchor>
      <arglist>(const char *name) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEnum</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>aaa720f0373785b1d4a0c63013ff590d9</anchor>
      <arglist>(const char *registeredEnumName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEnum</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>ab7f3b34616c552b3e217a0420858865e</anchor>
      <arglist>(cEnum *enumDecl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUnit</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a9aa52943a9f7c2a24e13c94e1be5acbe</anchor>
      <arglist>(const char *unit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setType</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a893411190ca1d9df510fc6695122cb15</anchor>
      <arglist>(Type type)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInterpolationMode</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a76b2b4fb57076bf0edef9c9900006903</anchor>
      <arglist>(InterpolationMode mode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMin</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a41f5c3ab06740760e338bd3498d70ab4</anchor>
      <arglist>(double minValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMax</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>af9e2d3d9c2f05ea2bdd4ec3a58d07b79</anchor>
      <arglist>(double maxValue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>record</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a9d9023fc8be8ea65240ebd2f4a760f3f</anchor>
      <arglist>(double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>record</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>ae981cfc4db52ee570159445618b8f738</anchor>
      <arglist>(SimTime value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>recordWithTimestamp</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a13bb325bf01759ea9b42897acdca8a72</anchor>
      <arglist>(simtime_t t, double value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>recordWithTimestamp</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a5d21284d0b17a0aad1086a67665f55ac</anchor>
      <arglist>(simtime_t t, SimTime value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>enable</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a0111431f6286280f1532e5ae24763edd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>disable</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a07d0958526619eadcc9dbdc65bd8c987</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEnabled</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a7b6678112201531a509c5b8aa850941e</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isEnabled</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>ae9ed4bd4596d96caecc0bb19e9dc4db5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRecordDuringWarmupPeriod</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a6477bc7f84b1c4ef4e6c3d8c6294d5b6</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getRecordDuringWarmupPeriod</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a4629107bf1cf4a8759fd136304192913</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getValuesReceived</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>a89f058d301d6a874e266c91cbfb37680</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>long</type>
      <name>getValuesStored</name>
      <anchorfile>classomnetpp_1_1cOutVector.html</anchorfile>
      <anchor>ad4590a7eaec7c9fe158417cf5d8177f2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cOvalFigure</name>
    <filename>classomnetpp_1_1cOvalFigure.html</filename>
    <base>omnetpp::cAbstractShapeFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cOvalFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cOvalFigure.html</anchorfile>
      <anchor>afe982069dca09c86397be56ccc1fad37</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cOvalFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cOvalFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cOvalFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cOvalFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Rectangle &amp;</type>
      <name>getBounds</name>
      <anchorfile>classomnetpp_1_1cOvalFigure.html</anchorfile>
      <anchor>ac3b28beef518ea8914eb46646a4e1339</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBounds</name>
      <anchorfile>classomnetpp_1_1cOvalFigure.html</anchorfile>
      <anchor>a92035a3eb0e082c618fa30344c3e3487</anchor>
      <arglist>(const Rectangle &amp;bounds)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classomnetpp_1_1cOvalFigure.html</anchorfile>
      <anchor>a9062e4b83b894af848722c332b5d4698</anchor>
      <arglist>(const Point &amp;position, Anchor anchor)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const char **</type>
      <name>getAllowedPropertyKeys</name>
      <anchorfile>classomnetpp_1_1cOvalFigure.html</anchorfile>
      <anchor>a3cc500add699158ae5b2b138fdf6c2bd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cOvalFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cOvalFigure.html</anchorfile>
      <anchor>afe982069dca09c86397be56ccc1fad37</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cOvalFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cOvalFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cOvalFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cOvalFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Rectangle &amp;</type>
      <name>getBounds</name>
      <anchorfile>classomnetpp_1_1cOvalFigure.html</anchorfile>
      <anchor>ac3b28beef518ea8914eb46646a4e1339</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBounds</name>
      <anchorfile>classomnetpp_1_1cOvalFigure.html</anchorfile>
      <anchor>a92035a3eb0e082c618fa30344c3e3487</anchor>
      <arglist>(const Rectangle &amp;bounds)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classomnetpp_1_1cOvalFigure.html</anchorfile>
      <anchor>a9062e4b83b894af848722c332b5d4698</anchor>
      <arglist>(const Point &amp;position, Anchor anchor)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cOwnedObject</name>
    <filename>classomnetpp_1_1cOwnedObject.html</filename>
    <base>omnetpp::cNamedObject</base>
    <member kind="function">
      <type></type>
      <name>cOwnedObject</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a7f32d0c4779ab2a168543abc889925ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cOwnedObject</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>ada672f2b20d2d7470d8a1807c3c499d2</anchor>
      <arglist>(const char *name, bool namepooling=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cOwnedObject</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a73f9af4059edeaea7700ebfa708df027</anchor>
      <arglist>(const cOwnedObject &amp;obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cOwnedObject</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a1b56d769aad3147e670dd8379c552fb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cOwnedObject &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a371064c3874a82a97af56633697f127e</anchor>
      <arglist>(const cOwnedObject &amp;o)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getTotalObjectCount</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a621ff186e02e08a69c0ccc45bccd97fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getLiveObjectCount</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a2a6c9f508df1f39823c4e021bd700ed1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resetObjectCounters</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>ab897b3db5c360836c312c283956ee059</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cOwnedObject</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a7f32d0c4779ab2a168543abc889925ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cOwnedObject</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>ada672f2b20d2d7470d8a1807c3c499d2</anchor>
      <arglist>(const char *name, bool namepooling=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cOwnedObject</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a73f9af4059edeaea7700ebfa708df027</anchor>
      <arglist>(const cOwnedObject &amp;obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cOwnedObject</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a1b56d769aad3147e670dd8379c552fb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cOwnedObject &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a371064c3874a82a97af56633697f127e</anchor>
      <arglist>(const cOwnedObject &amp;o)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>getOwner</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a1c61b59f0ccf468084ee3c932e21aff6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isOwnedObject</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a7452ff7aa14df50afa45805a8a283fcc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSoftOwner</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>ab64483ab8ca977db32d06eff9494238b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cDefaultList *</type>
      <name>getDefaultOwner</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a6094d8b17f6e1ff797d8bf65bcf3f991</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getTotalObjectCount</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a621ff186e02e08a69c0ccc45bccd97fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getLiveObjectCount</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>a2a6c9f508df1f39823c4e021bd700ed1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resetObjectCounters</name>
      <anchorfile>classomnetpp_1_1cOwnedObject.html</anchorfile>
      <anchor>ab897b3db5c360836c312c283956ee059</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPacket</name>
    <filename>classomnetpp_1_1cPacket.html</filename>
    <base>omnetpp::cMessage</base>
    <member kind="function">
      <type></type>
      <name>cPacket</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a87a6fcf80431d091d8a627de93cec0f5</anchor>
      <arglist>(const cPacket &amp;packet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPacket</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a44ef5aec0b7ee5a20e16d43a359dea07</anchor>
      <arglist>(const char *name=nullptr, short kind=0, int64_t bitLength=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cPacket</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>adacfa90ceccb9a776bacb49059b84c0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cPacket &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a1bfce61443b7812c94d4768e90fb58bd</anchor>
      <arglist>(const cPacket &amp;packet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>aa5987ccdc6a75fd43bb6b183863d9960</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPacket</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>adaf20adc88bcf862a398fe6d3dabe020</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getDisplayString</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a351311647309a919c690904157b2db33</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBitLength</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a990a669a293d41412734605f0b4dfd0f</anchor>
      <arglist>(int64_t l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setByteLength</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a2a0eec0a82efb19d77626244b46c7d9b</anchor>
      <arglist>(int64_t l)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addBitLength</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>acb6d55ae3df7e3870a177893764c57a5</anchor>
      <arglist>(int64_t delta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addByteLength</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a507cc8cf5a3c9da175020e2683a04dbe</anchor>
      <arglist>(int64_t delta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>getBitLength</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a7a06b672db8c4fec35d2cee9cb407e35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>getByteLength</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>ab015cabcbfe4d6666345876929c5cf29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBitError</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>aa6060f23d98f3370b77c9f66674f4ff3</anchor>
      <arglist>(bool e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasBitError</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>acc2de83b698f38b30b7850f6ef55f450</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>encapsulate</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a777dbb2397769d3a4b94cb1ff40cfca3</anchor>
      <arglist>(cPacket *packet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>decapsulate</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a24f2945ce67c8a77e09d1a69842e66c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>getEncapsulatedPacket</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a8522488376f032e1d716d354cb3af800</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasEncapsulatedPacket</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a4cf8c0b53978570372914f957954aa4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getDuration</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a84c73805cb20c849b1e280aec4a2c282</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReceptionStart</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>af5a70af63514754efd150631326e8676</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPacket</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a87a6fcf80431d091d8a627de93cec0f5</anchor>
      <arglist>(const cPacket &amp;packet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPacket</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a44ef5aec0b7ee5a20e16d43a359dea07</anchor>
      <arglist>(const char *name=nullptr, short kind=0, int64_t bitLength=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cPacket</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>adacfa90ceccb9a776bacb49059b84c0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cPacket &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a1bfce61443b7812c94d4768e90fb58bd</anchor>
      <arglist>(const cPacket &amp;packet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>aa5987ccdc6a75fd43bb6b183863d9960</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isPacket</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>adaf20adc88bcf862a398fe6d3dabe020</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getDisplayString</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a351311647309a919c690904157b2db33</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBitLength</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a990a669a293d41412734605f0b4dfd0f</anchor>
      <arglist>(int64_t l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setByteLength</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a2a0eec0a82efb19d77626244b46c7d9b</anchor>
      <arglist>(int64_t l)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addBitLength</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>acb6d55ae3df7e3870a177893764c57a5</anchor>
      <arglist>(int64_t delta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addByteLength</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a507cc8cf5a3c9da175020e2683a04dbe</anchor>
      <arglist>(int64_t delta)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>getBitLength</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a7a06b672db8c4fec35d2cee9cb407e35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>getByteLength</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>ab015cabcbfe4d6666345876929c5cf29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBitError</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>aa6060f23d98f3370b77c9f66674f4ff3</anchor>
      <arglist>(bool e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasBitError</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>acc2de83b698f38b30b7850f6ef55f450</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>encapsulate</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a777dbb2397769d3a4b94cb1ff40cfca3</anchor>
      <arglist>(cPacket *packet)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>decapsulate</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a24f2945ce67c8a77e09d1a69842e66c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>getEncapsulatedPacket</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a8522488376f032e1d716d354cb3af800</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasEncapsulatedPacket</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a4cf8c0b53978570372914f957954aa4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getDuration</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>a84c73805cb20c849b1e280aec4a2c282</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isReceptionStart</name>
      <anchorfile>classomnetpp_1_1cPacket.html</anchorfile>
      <anchor>af5a70af63514754efd150631326e8676</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPacketQueue</name>
    <filename>classomnetpp_1_1cPacketQueue.html</filename>
    <base>omnetpp::cQueue</base>
    <member kind="function">
      <type></type>
      <name>cPacketQueue</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a22c60738eb93b209a125f3b2cc6347a2</anchor>
      <arglist>(const char *name=nullptr, Comparator *cmp=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPacketQueue</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>af13c6e8a37311ba1d345333d0619ad7b</anchor>
      <arglist>(const char *name, CompareFunc cmp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPacketQueue</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a8aaa53fda10590d97afcd0867a56809b</anchor>
      <arglist>(const cPacketQueue &amp;queue)</arglist>
    </member>
    <member kind="function">
      <type>cPacketQueue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a25427c09fd84978d75094f2c7efbe6b2</anchor>
      <arglist>(const cPacketQueue &amp;queue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacketQueue *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a3ae4f7fb514fb55bc6e43aff01959fff</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insert</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>af1d0c318a55d43f928dbffd749fa17de</anchor>
      <arglist>(cPacket *pkt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBefore</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a740b997199a122269b773fb8736b3afb</anchor>
      <arglist>(cPacket *where, cPacket *pkt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertAfter</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>add0c33dcff509c964aab7a187ba1d945</anchor>
      <arglist>(cPacket *where, cPacket *pkt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a5f12769dea3af371e7e8dc424c6813a6</anchor>
      <arglist>(cPacket *pkt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>pop</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a831518137d7448c1ea60806e4e6b1e41</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a8ab0745de7fefce72d67f99f3931a3e4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>getBitLength</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a333330230c2b3235e7c57d51dac141c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>getByteLength</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>ab015cabcbfe4d6666345876929c5cf29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>front</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a0ab6ef3419e736cd492f7e5a0f34e653</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>back</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a16081ddd33afab046d1e3d4118377b5e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a838e74b10bed39cc9f74b533f17fb61d</anchor>
      <arglist>(int i) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPacketQueue</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a22c60738eb93b209a125f3b2cc6347a2</anchor>
      <arglist>(const char *name=nullptr, Comparator *cmp=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPacketQueue</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>af13c6e8a37311ba1d345333d0619ad7b</anchor>
      <arglist>(const char *name, CompareFunc cmp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPacketQueue</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a8aaa53fda10590d97afcd0867a56809b</anchor>
      <arglist>(const cPacketQueue &amp;queue)</arglist>
    </member>
    <member kind="function">
      <type>cPacketQueue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a25427c09fd84978d75094f2c7efbe6b2</anchor>
      <arglist>(const cPacketQueue &amp;queue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacketQueue *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a3ae4f7fb514fb55bc6e43aff01959fff</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insert</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>af1d0c318a55d43f928dbffd749fa17de</anchor>
      <arglist>(cPacket *pkt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBefore</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a740b997199a122269b773fb8736b3afb</anchor>
      <arglist>(cPacket *where, cPacket *pkt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertAfter</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>add0c33dcff509c964aab7a187ba1d945</anchor>
      <arglist>(cPacket *where, cPacket *pkt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a5f12769dea3af371e7e8dc424c6813a6</anchor>
      <arglist>(cPacket *pkt)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>pop</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a831518137d7448c1ea60806e4e6b1e41</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a8ab0745de7fefce72d67f99f3931a3e4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>getBitLength</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a333330230c2b3235e7c57d51dac141c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>getByteLength</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>ab015cabcbfe4d6666345876929c5cf29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>front</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a0ab6ef3419e736cd492f7e5a0f34e653</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>back</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a16081ddd33afab046d1e3d4118377b5e</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPacket *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cPacketQueue.html</anchorfile>
      <anchor>a838e74b10bed39cc9f74b533f17fb61d</anchor>
      <arglist>(int i) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPanelFigure</name>
    <filename>classomnetpp_1_1cPanelFigure.html</filename>
    <base>omnetpp::cFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cPanelFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPanelFigure.html</anchorfile>
      <anchor>ab12fd007c4c5d95ba941b36cfec03ae0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cPanelFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cPanelFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>classomnetpp_1_1cPanelFigure.html</anchorfile>
      <anchor>aae6896a5bef7074a8222965071469446</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cPanelFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Point &amp;</type>
      <name>getAnchorPoint</name>
      <anchorfile>classomnetpp_1_1cPanelFigure.html</anchorfile>
      <anchor>a3528f0eb054f32012d4e5ece7dcc4987</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const char **</type>
      <name>getAllowedPropertyKeys</name>
      <anchorfile>classomnetpp_1_1cPanelFigure.html</anchorfile>
      <anchor>a3cc500add699158ae5b2b138fdf6c2bd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cPanelFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPanelFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPanelFigure.html</anchorfile>
      <anchor>ab12fd007c4c5d95ba941b36cfec03ae0</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cPanelFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cPanelFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>move</name>
      <anchorfile>classomnetpp_1_1cPanelFigure.html</anchorfile>
      <anchor>aae6896a5bef7074a8222965071469446</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cPanelFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Point &amp;</type>
      <name>getAnchorPoint</name>
      <anchorfile>classomnetpp_1_1cPanelFigure.html</anchorfile>
      <anchor>a3528f0eb054f32012d4e5ece7dcc4987</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPar</name>
    <filename>classomnetpp_1_1cPar.html</filename>
    <base>omnetpp::cObject</base>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a192c7aac5fc73b8864528f38cbd0b7e9</anchor>
      <arglist>(const cPar &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a83be907353bc2510cac6212277a77777</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>getOwner</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a1c61b59f0ccf468084ee3c932e21aff6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a60f3b6d3ead55d0e1907dfb1e3d6a965</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setIntValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a754ad7608652cc979a199fd19217bf7b</anchor>
      <arglist>(intpar_t l)</arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED cPar &amp;</type>
      <name>setLongValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a1058a0d84c47bbdf4cfda5fa4b0e334e</anchor>
      <arglist>(intpar_t l)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>af3354e6460cc7716c06fe62d653fc1ee</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ad53988b418d34bde02693fcbcbe24a12</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a05d18dfd7fb2b240693b6037ee8aa19b</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a65b08b3f376ccc0ddae94b7b5f0e5042</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a231ab5cebcaa101d992fa7853b01fff4</anchor>
      <arglist>(cExpression *e, cComponent *evalcontext=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEvaluationContext</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ace14cc350c8c904ec72077026c740eb1</anchor>
      <arglist>(cComponent *ctx)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ae496096e91bfc363a5786e2a6784ac09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>intpar_t</type>
      <name>intValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a1724c02bea4a1c2436b3c5f35bcac2d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED intpar_t</type>
      <name>longValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a4ba40b4fa88f9ad9bfce85972d984303</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ad104faba1f03ff724812da33980d1253</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleValueInUnit</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a0c87b2a4e3ace1bcf81b644a119f22f5</anchor>
      <arglist>(const char *targetUnit) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getUnit</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a0d05734c8c6121209c8ec9cb0da3d3aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a9fec90708e5c6ed58b9cd83a0c8ace7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>af7b4ff8980dde2425ef30890cb4a8392</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmptyString</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ac8347ca035faa6297f2f85af96d1d136</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ae16d69665dd41e86df0bd2cb97ac2034</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>af06478ea4025dbbb34907199ed89f7b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cComponent *</type>
      <name>getEvaluationContext</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a7e0ec4d586ab7d6a2f276a12cbf027e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertToConst</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a8c299d6abd1d7d06b9ad3d57e61b1045</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a2a5871ff7101360e17ce50fbd8b6929c</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a658e9774904da1cacf53f232faa48a32</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a27a990b64c90fb7336219d48de54feb1</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a2359a2ab3335b214365f92b905c2d9ed</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a56f63d31e3095027941e63ef66a849a6</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a39dc47ee76b8d35bc9a28cea64d9c2a4</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a38c481cd40010fcdc7a15b34975fa4bc</anchor>
      <arglist>(short i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a4c709bcf1716c065da06460db521f7de</anchor>
      <arglist>(unsigned short i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a1cea9c2870fedad328916eeb62d08df5</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a56da63044f400c626e20c23a4be7202c</anchor>
      <arglist>(unsigned long i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a21e06525b96d40c5d2024029b814838c</anchor>
      <arglist>(long long i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a4fc1ea99a99baba9cc77ef3f80629c9b</anchor>
      <arglist>(unsigned long long i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a6854cdd22eafa29b1def75bafc1f510e</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a6fd4e6975f9a96804b909487dfeaa3ec</anchor>
      <arglist>(long double d)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>aab287f7112fd2df08972edc3ebdc58ed</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a1bca5481b349d47ab6c38ac6459a2777</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ae3161ffac9fdc5f90bb73ff8744b83eb</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a67b76affb3b5d35fa419ac234144038b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator char</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a561b4a60cc640710c3b9220d692de07d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned char</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a891f3d5b152d0bd0b8bc27726d45a491</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a48d27bd92e68c69527589ea65a9af69f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned int</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ab85cf3d18c4ed830e687b87ede9e40a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator short</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a11840cd2d3ee7968aaf9b04a0af3bec0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned short</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a6207df99f12600860d669651bdef19a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ad7ce59321a0dd63e7f1fab6dceabe53b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned long</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>acafb5c7caec25508a24cb4800beb18f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long long</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>aa83077b8f499dae99948d972af2dc8c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned long long</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a3a81249f06665fa9c35153447216b96d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a3c5a46ebe31a3699f441668931f2978e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long double</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a0e1aefd8077762b56422c42535e8c4af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>af4e65277e4f9ecbe4f7cd87ab63be71e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a3888dcd59dd5acd1ca5b9bee4c2e252a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator cXMLElement *</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a64e45ef809ba2c3687c3f6733b765c58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a192c7aac5fc73b8864528f38cbd0b7e9</anchor>
      <arglist>(const cPar &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a83be907353bc2510cac6212277a77777</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>getOwner</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a1c61b59f0ccf468084ee3c932e21aff6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a97c56d51eec84be3e856eb0ca6ebd3d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a345b371a0aef782ab74b4a8aa0f5eff2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVolatile</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a9fe975b487c070b9443ca49eb227ef04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isExpression</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a6d511459d13cb61798dea3f53fa62843</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isShared</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>acdf70e82e036c814bb20e366674afccf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSet</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a479da8bc6c27c908ec0c5c460fb26a4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a64f34ea2a655fcd2abb806aa55bd5295</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cProperties *</type>
      <name>getProperties</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a47f3eea152aa81dd2e12f358077ea866</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getTypeName</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a34a85b045e20a88c11f98b4049085e34</anchor>
      <arglist>(Type t)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a60f3b6d3ead55d0e1907dfb1e3d6a965</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setIntValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a754ad7608652cc979a199fd19217bf7b</anchor>
      <arglist>(intpar_t l)</arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED cPar &amp;</type>
      <name>setLongValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a1058a0d84c47bbdf4cfda5fa4b0e334e</anchor>
      <arglist>(intpar_t l)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>af3354e6460cc7716c06fe62d653fc1ee</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ad53988b418d34bde02693fcbcbe24a12</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a05d18dfd7fb2b240693b6037ee8aa19b</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a65b08b3f376ccc0ddae94b7b5f0e5042</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a231ab5cebcaa101d992fa7853b01fff4</anchor>
      <arglist>(cExpression *e, cComponent *evalcontext=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEvaluationContext</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ace14cc350c8c904ec72077026c740eb1</anchor>
      <arglist>(cComponent *ctx)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ae496096e91bfc363a5786e2a6784ac09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>intpar_t</type>
      <name>intValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a1724c02bea4a1c2436b3c5f35bcac2d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED intpar_t</type>
      <name>longValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a4ba40b4fa88f9ad9bfce85972d984303</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ad104faba1f03ff724812da33980d1253</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleValueInUnit</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a0c87b2a4e3ace1bcf81b644a119f22f5</anchor>
      <arglist>(const char *targetUnit) const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getUnit</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a0d05734c8c6121209c8ec9cb0da3d3aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a9fec90708e5c6ed58b9cd83a0c8ace7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>af7b4ff8980dde2425ef30890cb4a8392</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmptyString</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ac8347ca035faa6297f2f85af96d1d136</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ae16d69665dd41e86df0bd2cb97ac2034</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>af06478ea4025dbbb34907199ed89f7b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cComponent *</type>
      <name>getEvaluationContext</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a7e0ec4d586ab7d6a2f276a12cbf027e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertToConst</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a8c299d6abd1d7d06b9ad3d57e61b1045</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a2a5871ff7101360e17ce50fbd8b6929c</anchor>
      <arglist>(const char *text)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a658e9774904da1cacf53f232faa48a32</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a27a990b64c90fb7336219d48de54feb1</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a2359a2ab3335b214365f92b905c2d9ed</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a56f63d31e3095027941e63ef66a849a6</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a39dc47ee76b8d35bc9a28cea64d9c2a4</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a38c481cd40010fcdc7a15b34975fa4bc</anchor>
      <arglist>(short i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a4c709bcf1716c065da06460db521f7de</anchor>
      <arglist>(unsigned short i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a1cea9c2870fedad328916eeb62d08df5</anchor>
      <arglist>(long i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a56da63044f400c626e20c23a4be7202c</anchor>
      <arglist>(unsigned long i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a21e06525b96d40c5d2024029b814838c</anchor>
      <arglist>(long long i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a4fc1ea99a99baba9cc77ef3f80629c9b</anchor>
      <arglist>(unsigned long long i)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a6854cdd22eafa29b1def75bafc1f510e</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a6fd4e6975f9a96804b909487dfeaa3ec</anchor>
      <arglist>(long double d)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>aab287f7112fd2df08972edc3ebdc58ed</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a1bca5481b349d47ab6c38ac6459a2777</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>cPar &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ae3161ffac9fdc5f90bb73ff8744b83eb</anchor>
      <arglist>(cXMLElement *node)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a67b76affb3b5d35fa419ac234144038b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator char</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a561b4a60cc640710c3b9220d692de07d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned char</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a891f3d5b152d0bd0b8bc27726d45a491</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a48d27bd92e68c69527589ea65a9af69f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned int</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ab85cf3d18c4ed830e687b87ede9e40a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator short</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a11840cd2d3ee7968aaf9b04a0af3bec0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned short</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a6207df99f12600860d669651bdef19a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>ad7ce59321a0dd63e7f1fab6dceabe53b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned long</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>acafb5c7caec25508a24cb4800beb18f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long long</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>aa83077b8f499dae99948d972af2dc8c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator unsigned long long</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a3a81249f06665fa9c35153447216b96d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a3c5a46ebe31a3699f441668931f2978e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator long double</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a0e1aefd8077762b56422c42535e8c4af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const char *</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>af4e65277e4f9ecbe4f7cd87ab63be71e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a3888dcd59dd5acd1ca5b9bee4c2e252a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator cXMLElement *</name>
      <anchorfile>classomnetpp_1_1cPar.html</anchorfile>
      <anchor>a64e45ef809ba2c3687c3f6733b765c58</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cParetoShifted</name>
    <filename>classomnetpp_1_1cParetoShifted.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cParetoShifted *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cParetoShifted.html</anchorfile>
      <anchor>a2e71e1e855b02290199d187d280f8c93</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cParetoShifted.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cParetoShifted.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cParetoShifted *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cParetoShifted.html</anchorfile>
      <anchor>a2e71e1e855b02290199d187d280f8c93</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cParetoShifted.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cParetoShifted.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cParImpl</name>
    <filename>classomnetpp_1_1cParImpl.html</filename>
    <base>omnetpp::cNamedObject</base>
    <member kind="function">
      <type></type>
      <name>cParImpl</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a50c027fd421922b49e22b1929db8ea58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cParImpl</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>ad51ea392009a5fad9adaa09c828bc38d</anchor>
      <arglist>(const cParImpl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cParImpl</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>aea8766f810e61380f298a3569cb2081d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cParImpl &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>af5ce8f05cacfa2efb280f7440e3d1711</anchor>
      <arglist>(const cParImpl &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cParImpl *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>aa63cfb161a6369c2b43fe480db0f24dc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a0efed77ea30ca5909fecfb130f0bdb74</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a73bff7353c5a9ae14204a53af152c68e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isVolatile</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a50c6a2204c2487f7784eceead55808c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isExpression</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a19f70c70aa0a32610cb34986d949e0fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isShared</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a2266efc1299481933cfa7e09a56eb121</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a89f028ebee733862778688abf55e3751</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSet</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a58961f275d4c30498117f7ced6fb6007</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsVolatile</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a616a8f5cdf9f79800e760c6ac2d174ee</anchor>
      <arglist>(bool f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsShared</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a1d52ed617158bd7f9df2906585bb13c7</anchor>
      <arglist>(bool f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsSet</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>afa9c43994f52fed546cd49476589314d</anchor>
      <arglist>(bool f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getUnit</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a023036d1df35b6aa1fbbaf60dc9a28c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUnit</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>af7b523092fae856cae3088068c800601</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a343dff88d3305e9e7d7d7211ffb1e2e5</anchor>
      <arglist>(bool b)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setIntValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a5b45a1da7df42794dd27268221eeacf9</anchor>
      <arglist>(intpar_t l)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a3bec96b77627a85f6361e1f38e0a6711</anchor>
      <arglist>(double d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a1e305c1697ea8b15aff2e617f588a34d</anchor>
      <arglist>(const char *s)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a9533468d4b52d84a2353f75ca1990ede</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a6343c5c20f9db5587d43cf4605239dae</anchor>
      <arglist>(cXMLElement *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a5da3170fa04875f5794c9aa9d09e2007</anchor>
      <arglist>(cExpression *e)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a280bf01dd5aaaf460f59d1beb74b7940</anchor>
      <arglist>(cComponent *context) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual intpar_t</type>
      <name>intValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>ab8a9625375c8a5c3066330f51ad9c078</anchor>
      <arglist>(cComponent *context) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>ad7fa9721adf76ebd0bd32ba73fcfa0cc</anchor>
      <arglist>(cComponent *context) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>ab0120776d147950310f775333b6ac707</anchor>
      <arglist>(cComponent *context) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a8fde41702bc0b0adc01b22e48f175b73</anchor>
      <arglist>(cComponent *context) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>aa0e4749295802dc85fff1424aed4a366</anchor>
      <arglist>(cComponent *context) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a2d4a1ba58915ebf11d0491ff3b54d8a8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getTotalParImplObjectCount</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>ae1c44337f1ad81d774482f9eccce7012</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getLiveParImplObjectCount</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a4c3f4ab81f28176b26e5e7a735445f26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resetParImplObjectCounters</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a12d384fbc31409673e54f473fa589d04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cParImpl</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a50c027fd421922b49e22b1929db8ea58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cParImpl</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>ad51ea392009a5fad9adaa09c828bc38d</anchor>
      <arglist>(const cParImpl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cParImpl</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>aea8766f810e61380f298a3569cb2081d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cParImpl &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>af5ce8f05cacfa2efb280f7440e3d1711</anchor>
      <arglist>(const cParImpl &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cParImpl *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>aa63cfb161a6369c2b43fe480db0f24dc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a0efed77ea30ca5909fecfb130f0bdb74</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a73bff7353c5a9ae14204a53af152c68e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isVolatile</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a50c6a2204c2487f7784eceead55808c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isExpression</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a19f70c70aa0a32610cb34986d949e0fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isShared</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a2266efc1299481933cfa7e09a56eb121</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a89f028ebee733862778688abf55e3751</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isSet</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a58961f275d4c30498117f7ced6fb6007</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsVolatile</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a616a8f5cdf9f79800e760c6ac2d174ee</anchor>
      <arglist>(bool f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsShared</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a1d52ed617158bd7f9df2906585bb13c7</anchor>
      <arglist>(bool f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsSet</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>afa9c43994f52fed546cd49476589314d</anchor>
      <arglist>(bool f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getUnit</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a023036d1df35b6aa1fbbaf60dc9a28c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUnit</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>af7b523092fae856cae3088068c800601</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a343dff88d3305e9e7d7d7211ffb1e2e5</anchor>
      <arglist>(bool b)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setIntValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a5b45a1da7df42794dd27268221eeacf9</anchor>
      <arglist>(intpar_t l)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a3bec96b77627a85f6361e1f38e0a6711</anchor>
      <arglist>(double d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a1e305c1697ea8b15aff2e617f588a34d</anchor>
      <arglist>(const char *s)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a9533468d4b52d84a2353f75ca1990ede</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a6343c5c20f9db5587d43cf4605239dae</anchor>
      <arglist>(cXMLElement *node)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a5da3170fa04875f5794c9aa9d09e2007</anchor>
      <arglist>(cExpression *e)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a280bf01dd5aaaf460f59d1beb74b7940</anchor>
      <arglist>(cComponent *context) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual intpar_t</type>
      <name>intValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>ab8a9625375c8a5c3066330f51ad9c078</anchor>
      <arglist>(cComponent *context) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>ad7fa9721adf76ebd0bd32ba73fcfa0cc</anchor>
      <arglist>(cComponent *context) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>ab0120776d147950310f775333b6ac707</anchor>
      <arglist>(cComponent *context) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a8fde41702bc0b0adc01b22e48f175b73</anchor>
      <arglist>(cComponent *context) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>aa0e4749295802dc85fff1424aed4a366</anchor>
      <arglist>(cComponent *context) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a2d4a1ba58915ebf11d0491ff3b54d8a8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>convertToConst</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a241c9a108dd32e8529548b6affc7472e</anchor>
      <arglist>(cComponent *context)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsConstSubexpressions</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a7c65db36d448289016b423659264e51f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluateConstSubexpressions</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>ac6520c400be49eba9e6635ac51d7bfcb</anchor>
      <arglist>(cComponent *context)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>ab592bc6d2445a934196f8ff55f99e54e</anchor>
      <arglist>(const char *text)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a6ff8f95d08339ff782312c4ac1a0ed7a</anchor>
      <arglist>(const cParImpl *other) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a319ee643daef2b34d7be79af25dd6935</anchor>
      <arglist>(cVisitor *v, cComponent *context)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cParImpl *</type>
      <name>createWithType</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a55e4bf44a7ebe03e87c114fc0b02f8b1</anchor>
      <arglist>(Type type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getTotalParImplObjectCount</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>ae1c44337f1ad81d774482f9eccce7012</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static long</type>
      <name>getLiveParImplObjectCount</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a4c3f4ab81f28176b26e5e7a735445f26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>resetParImplObjectCounters</name>
      <anchorfile>classomnetpp_1_1cParImpl.html</anchorfile>
      <anchor>a12d384fbc31409673e54f473fa589d04</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cParsimCommunications</name>
    <filename>classomnetpp_1_1cParsimCommunications.html</filename>
    <base>omnetpp::cObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cParsimCommunications</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>a890a36a5a7e32261a589e00d62cf4110</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>ab5be7e5a13ea77d59aac45d21dceb6a0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>shutdown</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>a618e8560b89583a7ce8212d95a000c87</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumPartitions</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>a488362f13ef1128cbc73260d3d620290</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getProcId</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>a46f1d19e754a899e9d2b2b49c76687a7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cCommBuffer *</type>
      <name>createCommBuffer</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>a44773c9931df49f630866e38edeb0867</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recycleCommBuffer</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>a11d729434acf2bbeb1b2372327425583</anchor>
      <arglist>(cCommBuffer *buffer)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>send</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>ac2850d62eab6b0b2cf851b50c648546b</anchor>
      <arglist>(cCommBuffer *buffer, int tag, int destination)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>broadcast</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>ab5017f71551c89284cfd5c3099dc5325</anchor>
      <arglist>(cCommBuffer *buffer, int tag)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>receiveBlocking</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>aef8aebf1724e5c268f7d80082a8177da</anchor>
      <arglist>(int filtTag, cCommBuffer *buffer, int &amp;receivedTag, int &amp;sourceProcId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>receiveNonblocking</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>ae08d8a31af68964d88b4c3695cb8cacd</anchor>
      <arglist>(int filtTag, cCommBuffer *buffer, int &amp;receivedTag, int &amp;sourceProcId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>ab5be7e5a13ea77d59aac45d21dceb6a0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>shutdown</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>a618e8560b89583a7ce8212d95a000c87</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getNumPartitions</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>a488362f13ef1128cbc73260d3d620290</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>getProcId</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>a46f1d19e754a899e9d2b2b49c76687a7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cCommBuffer *</type>
      <name>createCommBuffer</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>a44773c9931df49f630866e38edeb0867</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>recycleCommBuffer</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>a11d729434acf2bbeb1b2372327425583</anchor>
      <arglist>(cCommBuffer *buffer)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>send</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>ac2850d62eab6b0b2cf851b50c648546b</anchor>
      <arglist>(cCommBuffer *buffer, int tag, int destination)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>broadcast</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>ab5017f71551c89284cfd5c3099dc5325</anchor>
      <arglist>(cCommBuffer *buffer, int tag)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>receiveBlocking</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>aef8aebf1724e5c268f7d80082a8177da</anchor>
      <arglist>(int filtTag, cCommBuffer *buffer, int &amp;receivedTag, int &amp;sourceProcId)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>receiveNonblocking</name>
      <anchorfile>classomnetpp_1_1cParsimCommunications.html</anchorfile>
      <anchor>ae08d8a31af68964d88b4c3695cb8cacd</anchor>
      <arglist>(int filtTag, cCommBuffer *buffer, int &amp;receivedTag, int &amp;sourceProcId)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPathChangeNotification</name>
    <filename>classomnetpp_1_1cPathChangeNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cGate *</type>
      <name>pathStartGate</name>
      <anchorfile>classomnetpp_1_1cPathChangeNotification.html</anchorfile>
      <anchor>aa56d54490db6a400c7f3e05e29bcc6c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cGate *</type>
      <name>pathEndGate</name>
      <anchorfile>classomnetpp_1_1cPathChangeNotification.html</anchorfile>
      <anchor>a64f78fca8a5353c0db1a595c680e8eea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cGate *</type>
      <name>changedGate</name>
      <anchorfile>classomnetpp_1_1cPathChangeNotification.html</anchorfile>
      <anchor>ab17a9155dc19afb153bc2c378592afa9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPathFigure</name>
    <filename>classomnetpp_1_1cPathFigure.html</filename>
    <base>omnetpp::cAbstractShapeFigure</base>
    <class kind="struct">omnetpp::cPathFigure::ArcRel</class>
    <class kind="struct">omnetpp::cPathFigure::ArcTo</class>
    <class kind="struct">omnetpp::cPathFigure::ClosePath</class>
    <class kind="struct">omnetpp::cPathFigure::CubicBezierCurveRel</class>
    <class kind="struct">omnetpp::cPathFigure::CubicBezierCurveTo</class>
    <class kind="struct">omnetpp::cPathFigure::CurveRel</class>
    <class kind="struct">omnetpp::cPathFigure::CurveTo</class>
    <class kind="struct">omnetpp::cPathFigure::HorizontalLineRel</class>
    <class kind="struct">omnetpp::cPathFigure::HorizontalLineTo</class>
    <class kind="struct">omnetpp::cPathFigure::LineRel</class>
    <class kind="struct">omnetpp::cPathFigure::LineTo</class>
    <class kind="struct">omnetpp::cPathFigure::MoveRel</class>
    <class kind="struct">omnetpp::cPathFigure::MoveTo</class>
    <class kind="struct">omnetpp::cPathFigure::PathItem</class>
    <class kind="struct">omnetpp::cPathFigure::SmoothCubicBezierCurveRel</class>
    <class kind="struct">omnetpp::cPathFigure::SmoothCubicBezierCurveTo</class>
    <class kind="struct">omnetpp::cPathFigure::SmoothCurveRel</class>
    <class kind="struct">omnetpp::cPathFigure::SmoothCurveTo</class>
    <class kind="struct">omnetpp::cPathFigure::VerticalLineRel</class>
    <class kind="struct">omnetpp::cPathFigure::VerticalLineTo</class>
    <member kind="function" virtualness="virtual">
      <type>virtual cPathFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a86c650d6e82ef3c6d262a372e85b128d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual JoinStyle</type>
      <name>getJoinStyle</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a6232d2dfb97af2ffe4ae53d421558e27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setJoinStyle</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a50e4679b67d5552f6179600a0066281b</anchor>
      <arglist>(JoinStyle joinStyle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CapStyle</type>
      <name>getCapStyle</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a48747d900ce422bac611bb496e78302b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCapStyle</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a2b734c61191d8df36e18ea4ffaa659ba</anchor>
      <arglist>(CapStyle capStyle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FillRule</type>
      <name>getFillRule</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a640a223e9a75d8f76e72bb62d5fb6af2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFillRule</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>ad91312050f8b35f5895b836ae2609804</anchor>
      <arglist>(FillRule fillRule)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Point &amp;</type>
      <name>getOffset</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>ae3d001b29e54e9c12b3f7aa106ffd86a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOffset</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a316043abbe05376694168b16ebfcc922</anchor>
      <arglist>(const Point &amp;offset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getPath</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a5729dfa3d4be6d0ed8c08f6def8f3956</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPath</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a62f45963abd5b5b40362fa288ce1ce62</anchor>
      <arglist>(const char *path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPathItems</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>ae8e7de05963590ad0732dfdab282932d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const PathItem *</type>
      <name>getPathItem</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a6e931140811d9a00b23f415e590460a0</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearPath</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a641ea8e0e5e1627a6bfc50b77f5f800d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addMoveTo</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a16b3592c23b6dec3e03b3e01d8069a78</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addMoveRel</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a02339c6ad479486c7f0f76d35040d063</anchor>
      <arglist>(double dx, double dy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addLineTo</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a9b07f330af039905f69aac34fa722fd0</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addLineRel</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a187a8ed19b60d572902af27b065ea2b6</anchor>
      <arglist>(double dx, double dy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addHorizontalLineTo</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a4276c92e08da77b4b9edd81442cf8d4d</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addHorizontalLineRel</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>aaeb877fbe573e66985b563d70ca4b670</anchor>
      <arglist>(double dx)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addVerticalLineTo</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a815d5202c43a975394b07d3f5baf4a68</anchor>
      <arglist>(double y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addVerticalLineRel</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a31e517023732957708ae4544dbd259d8</anchor>
      <arglist>(double dy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addArcTo</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a4b7c735b39ccd7aa54850415141c5c83</anchor>
      <arglist>(double rx, double ry, double phi, bool largeArc, bool sweep, double x, double y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addArcRel</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a63eebaeb6f5cb3449592015f9e3f3c3a</anchor>
      <arglist>(double rx, double ry, double phi, bool largeArc, bool sweep, double dx, double dy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addCurveTo</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a40032bfc3cfab0e7825fb36bbfb46829</anchor>
      <arglist>(double x1, double y1, double x, double y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addCurveRel</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a7a598df6af15d14bbcba7abba463e0b1</anchor>
      <arglist>(double dx1, double dy1, double dx, double dy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addSmoothCurveTo</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a7aa0e2219ff7c69c091ad89a7a96a5a3</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addSmoothCurveRel</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>afb67f91bb061ea5d224e9a1bae407e99</anchor>
      <arglist>(double dx, double dy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addCubicBezierCurveTo</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a73a25f53a326acfcbf92c3987304dcd0</anchor>
      <arglist>(double x1, double y1, double x2, double y2, double x, double y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addCubicBezierCurveRel</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a7e1924deed2e979bf50f87875128c713</anchor>
      <arglist>(double dx1, double dy1, double dx2, double dy2, double dx, double dy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addSmoothCubicBezierCurveTo</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a99a76c298271341a68d8b1514f2d6d09</anchor>
      <arglist>(double x2, double y2, double x, double y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addSmoothCubicBezierCurveRel</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a1fdbc18bb89d37509302fc139f91ff23</anchor>
      <arglist>(double dx2, double dy2, double dx, double dy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addClosePath</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a239c03de0e1f39a71969faf4a4e5774f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const char **</type>
      <name>getAllowedPropertyKeys</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a3cc500add699158ae5b2b138fdf6c2bd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPathFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a86c650d6e82ef3c6d262a372e85b128d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual JoinStyle</type>
      <name>getJoinStyle</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a6232d2dfb97af2ffe4ae53d421558e27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setJoinStyle</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a50e4679b67d5552f6179600a0066281b</anchor>
      <arglist>(JoinStyle joinStyle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CapStyle</type>
      <name>getCapStyle</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a48747d900ce422bac611bb496e78302b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCapStyle</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a2b734c61191d8df36e18ea4ffaa659ba</anchor>
      <arglist>(CapStyle capStyle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FillRule</type>
      <name>getFillRule</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a640a223e9a75d8f76e72bb62d5fb6af2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFillRule</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>ad91312050f8b35f5895b836ae2609804</anchor>
      <arglist>(FillRule fillRule)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Point &amp;</type>
      <name>getOffset</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>ae3d001b29e54e9c12b3f7aa106ffd86a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setOffset</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a316043abbe05376694168b16ebfcc922</anchor>
      <arglist>(const Point &amp;offset)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getPath</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a5729dfa3d4be6d0ed8c08f6def8f3956</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPath</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a62f45963abd5b5b40362fa288ce1ce62</anchor>
      <arglist>(const char *path)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPathItems</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>ae8e7de05963590ad0732dfdab282932d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const PathItem *</type>
      <name>getPathItem</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a6e931140811d9a00b23f415e590460a0</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clearPath</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a641ea8e0e5e1627a6bfc50b77f5f800d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addMoveTo</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a16b3592c23b6dec3e03b3e01d8069a78</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addMoveRel</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a02339c6ad479486c7f0f76d35040d063</anchor>
      <arglist>(double dx, double dy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addLineTo</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a9b07f330af039905f69aac34fa722fd0</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addLineRel</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a187a8ed19b60d572902af27b065ea2b6</anchor>
      <arglist>(double dx, double dy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addHorizontalLineTo</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a4276c92e08da77b4b9edd81442cf8d4d</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addHorizontalLineRel</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>aaeb877fbe573e66985b563d70ca4b670</anchor>
      <arglist>(double dx)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addVerticalLineTo</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a815d5202c43a975394b07d3f5baf4a68</anchor>
      <arglist>(double y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addVerticalLineRel</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a31e517023732957708ae4544dbd259d8</anchor>
      <arglist>(double dy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addArcTo</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a4b7c735b39ccd7aa54850415141c5c83</anchor>
      <arglist>(double rx, double ry, double phi, bool largeArc, bool sweep, double x, double y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addArcRel</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a63eebaeb6f5cb3449592015f9e3f3c3a</anchor>
      <arglist>(double rx, double ry, double phi, bool largeArc, bool sweep, double dx, double dy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addCurveTo</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a40032bfc3cfab0e7825fb36bbfb46829</anchor>
      <arglist>(double x1, double y1, double x, double y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addCurveRel</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a7a598df6af15d14bbcba7abba463e0b1</anchor>
      <arglist>(double dx1, double dy1, double dx, double dy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addSmoothCurveTo</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a7aa0e2219ff7c69c091ad89a7a96a5a3</anchor>
      <arglist>(double x, double y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addSmoothCurveRel</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>afb67f91bb061ea5d224e9a1bae407e99</anchor>
      <arglist>(double dx, double dy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addCubicBezierCurveTo</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a73a25f53a326acfcbf92c3987304dcd0</anchor>
      <arglist>(double x1, double y1, double x2, double y2, double x, double y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addCubicBezierCurveRel</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a7e1924deed2e979bf50f87875128c713</anchor>
      <arglist>(double dx1, double dy1, double dx2, double dy2, double dx, double dy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addSmoothCubicBezierCurveTo</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a99a76c298271341a68d8b1514f2d6d09</anchor>
      <arglist>(double x2, double y2, double x, double y)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addSmoothCubicBezierCurveRel</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a1fdbc18bb89d37509302fc139f91ff23</anchor>
      <arglist>(double dx2, double dy2, double dx, double dy)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addClosePath</name>
      <anchorfile>classomnetpp_1_1cPathFigure.html</anchorfile>
      <anchor>a239c03de0e1f39a71969faf4a4e5774f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPatternMatcher</name>
    <filename>classomnetpp_1_1cPatternMatcher.html</filename>
    <member kind="function">
      <type></type>
      <name>cPatternMatcher</name>
      <anchorfile>classomnetpp_1_1cPatternMatcher.html</anchorfile>
      <anchor>a44b18dc37a8fe349d379cc55e84cc4f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPatternMatcher</name>
      <anchorfile>classomnetpp_1_1cPatternMatcher.html</anchorfile>
      <anchor>af569d610b111afa764f0dae17b9d1c85</anchor>
      <arglist>(const char *pattern, bool dottedpath, bool fullstring, bool casesensitive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cPatternMatcher</name>
      <anchorfile>classomnetpp_1_1cPatternMatcher.html</anchorfile>
      <anchor>afd839e84f0e880b12876933ba89678d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPattern</name>
      <anchorfile>classomnetpp_1_1cPatternMatcher.html</anchorfile>
      <anchor>a928a43596a234d42196aee3d75078410</anchor>
      <arglist>(const char *pattern, bool dottedpath, bool fullstring, bool casesensitive)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>matches</name>
      <anchorfile>classomnetpp_1_1cPatternMatcher.html</anchorfile>
      <anchor>afa19da52746a41a07eb9899aef4f4eca</anchor>
      <arglist>(const char *line)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>patternPrefixMatches</name>
      <anchorfile>classomnetpp_1_1cPatternMatcher.html</anchorfile>
      <anchor>a00d71c134f69f987298e083090a945be</anchor>
      <arglist>(const char *line, int suffixoffset)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>debugStr</name>
      <anchorfile>classomnetpp_1_1cPatternMatcher.html</anchorfile>
      <anchor>a7e67c7a26e436a8f96cb4154a010d69f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>classomnetpp_1_1cPatternMatcher.html</anchorfile>
      <anchor>accd2600060dbaee3a3b41aed4034c63c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>containsWildcards</name>
      <anchorfile>classomnetpp_1_1cPatternMatcher.html</anchorfile>
      <anchor>a311ad41a5f1f1b5761736923d19e12b4</anchor>
      <arglist>(const char *pattern)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPieSliceFigure</name>
    <filename>classomnetpp_1_1cPieSliceFigure.html</filename>
    <base>omnetpp::cAbstractShapeFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cPieSliceFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>ae42659fe8a771818ca0b48d1fb12fb39</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Rectangle &amp;</type>
      <name>getBounds</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>ac3b28beef518ea8914eb46646a4e1339</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBounds</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>a92035a3eb0e082c618fa30344c3e3487</anchor>
      <arglist>(const Rectangle &amp;bounds)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>a9062e4b83b894af848722c332b5d4698</anchor>
      <arglist>(const Point &amp;position, Anchor anchor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getStartAngle</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>abe6d97f29c3f66f751a7a4bd803ff959</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStartAngle</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>abc1ac1289da82a97e36f53ffcc724f7b</anchor>
      <arglist>(double startAngle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getEndAngle</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>acdf7efd3326b28a6f9cc8f5dd497fae3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEndAngle</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>aeb14ddb76d4dfa0e7ae20b529b856081</anchor>
      <arglist>(double endAngle)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const char **</type>
      <name>getAllowedPropertyKeys</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>a3cc500add699158ae5b2b138fdf6c2bd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPieSliceFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>ae42659fe8a771818ca0b48d1fb12fb39</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Rectangle &amp;</type>
      <name>getBounds</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>ac3b28beef518ea8914eb46646a4e1339</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBounds</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>a92035a3eb0e082c618fa30344c3e3487</anchor>
      <arglist>(const Rectangle &amp;bounds)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>a9062e4b83b894af848722c332b5d4698</anchor>
      <arglist>(const Point &amp;position, Anchor anchor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getStartAngle</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>abe6d97f29c3f66f751a7a4bd803ff959</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStartAngle</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>abc1ac1289da82a97e36f53ffcc724f7b</anchor>
      <arglist>(double startAngle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getEndAngle</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>acdf7efd3326b28a6f9cc8f5dd497fae3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setEndAngle</name>
      <anchorfile>classomnetpp_1_1cPieSliceFigure.html</anchorfile>
      <anchor>aeb14ddb76d4dfa0e7ae20b529b856081</anchor>
      <arglist>(double endAngle)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPixmapFigure</name>
    <filename>classomnetpp_1_1cPixmapFigure.html</filename>
    <base>omnetpp::cAbstractImageFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cPixmapFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a2f16fcc6f712776d817cc34147190f9c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pixmap &amp;</type>
      <name>getPixmap</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a1bf19d9fa0640f2c170d6f3d3e0160d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPixmap</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a737e1628e335f613c2f26d0fd1401750</anchor>
      <arglist>(const Pixmap &amp;pixmap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPixmapHeight</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>ab5b6230282b8f74f93182a5799cf893d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPixmapWidth</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a8d385aceec6fedd86ac47271f6548922</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPixmapSize</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a133e53425631b1baaf2de5c058af5ed7</anchor>
      <arglist>(int width, int height, const RGBA &amp;fill)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPixmapSize</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a1e759feecc96fc02959da304975d8ee0</anchor>
      <arglist>(int width, int height, const Color &amp;color, double opacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fillPixmap</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>afffe532e7ac74decb5582054420fa3e2</anchor>
      <arglist>(const RGBA &amp;fill)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fillPixmap</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>af0f30fc4e6ce5696e29a6330e4ff896c</anchor>
      <arglist>(const Color &amp;color, double opacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const RGBA</type>
      <name>getPixel</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>ab12e5d3697989d6552f6d82cfc5135d7</anchor>
      <arglist>(int x, int y) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPixel</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a2a051a902160e50ceb36dfbad2fdca89</anchor>
      <arglist>(int x, int y, const RGBA &amp;argb)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPixel</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a140901b4c0370c19d9bbe07572ece9c3</anchor>
      <arglist>(int x, int y, const Color &amp;color, double opacity=1.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Color</type>
      <name>getPixelColor</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a672f97ef5759fb89c32e4418e11e9dbf</anchor>
      <arglist>(int x, int y) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPixelColor</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>ad4520f38b6b47aafa0482cce8192cd47</anchor>
      <arglist>(int x, int y, const Color &amp;color)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPixelOpacity</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a542d5e021161cdf4feab2dcd96acba3b</anchor>
      <arglist>(int x, int y) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPixelOpacity</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a84605c4311f14a847d8f6d1f2a1d5beb</anchor>
      <arglist>(int x, int y, double opacity)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const char **</type>
      <name>getAllowedPropertyKeys</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a3cc500add699158ae5b2b138fdf6c2bd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPixmapFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a2f16fcc6f712776d817cc34147190f9c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Pixmap &amp;</type>
      <name>getPixmap</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a1bf19d9fa0640f2c170d6f3d3e0160d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPixmap</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a737e1628e335f613c2f26d0fd1401750</anchor>
      <arglist>(const Pixmap &amp;pixmap)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPixmapHeight</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>ab5b6230282b8f74f93182a5799cf893d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getPixmapWidth</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a8d385aceec6fedd86ac47271f6548922</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPixmapSize</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a133e53425631b1baaf2de5c058af5ed7</anchor>
      <arglist>(int width, int height, const RGBA &amp;fill)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPixmapSize</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a1e759feecc96fc02959da304975d8ee0</anchor>
      <arglist>(int width, int height, const Color &amp;color, double opacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fillPixmap</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>afffe532e7ac74decb5582054420fa3e2</anchor>
      <arglist>(const RGBA &amp;fill)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>fillPixmap</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>af0f30fc4e6ce5696e29a6330e4ff896c</anchor>
      <arglist>(const Color &amp;color, double opacity)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const RGBA</type>
      <name>getPixel</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>ab12e5d3697989d6552f6d82cfc5135d7</anchor>
      <arglist>(int x, int y) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPixel</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a2a051a902160e50ceb36dfbad2fdca89</anchor>
      <arglist>(int x, int y, const RGBA &amp;argb)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPixel</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a140901b4c0370c19d9bbe07572ece9c3</anchor>
      <arglist>(int x, int y, const Color &amp;color, double opacity=1.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Color</type>
      <name>getPixelColor</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a672f97ef5759fb89c32e4418e11e9dbf</anchor>
      <arglist>(int x, int y) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPixelColor</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>ad4520f38b6b47aafa0482cce8192cd47</anchor>
      <arglist>(int x, int y, const Color &amp;color)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPixelOpacity</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a542d5e021161cdf4feab2dcd96acba3b</anchor>
      <arglist>(int x, int y) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPixelOpacity</name>
      <anchorfile>classomnetpp_1_1cPixmapFigure.html</anchorfile>
      <anchor>a84605c4311f14a847d8f6d1f2a1d5beb</anchor>
      <arglist>(int x, int y, double opacity)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPoisson</name>
    <filename>classomnetpp_1_1cPoisson.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cPoisson *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPoisson.html</anchorfile>
      <anchor>aaa290c583778d3a67acffa6d237fe4a3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cPoisson.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cPoisson.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPoisson *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPoisson.html</anchorfile>
      <anchor>aaa290c583778d3a67acffa6d237fe4a3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cPoisson.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cPoisson.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPolygonFigure</name>
    <filename>classomnetpp_1_1cPolygonFigure.html</filename>
    <base>omnetpp::cAbstractShapeFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolygonFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>ac60c008f1ab97f81a3cf5009b08d7b41</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; Point &gt; &amp;</type>
      <name>getPoints</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>a749366b72e498da10b3d3d245ac92845</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPoints</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>a49ffd19a7061340b9bff3e507d722ea9</anchor>
      <arglist>(const std::vector&lt; Point &gt; &amp;points)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPoints</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>a8deaca6b17721df8ee9de43665db688b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Point &amp;</type>
      <name>getPoint</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>a25458f5e5efa4020ec8e7660afb321c9</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPoint</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>a823eb2ef0312ccd22ba27261620706b3</anchor>
      <arglist>(int i, const Point &amp;point)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addPoint</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>ad3e542bc318a23473c82711025cfcd39</anchor>
      <arglist>(const Point &amp;point)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removePoint</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>ad209e8da29b24aecf0dda4fd4208b2ac</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertPoint</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>aeab6ac465e8abb6f534f97d1be31b768</anchor>
      <arglist>(int i, const Point &amp;point)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getSmooth</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>a4c980e0ade55ccac949c032bcf6bb385</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSmooth</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>a7e8f2394bb93cd98fb350ad024f86c02</anchor>
      <arglist>(bool smooth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual JoinStyle</type>
      <name>getJoinStyle</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>a6232d2dfb97af2ffe4ae53d421558e27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setJoinStyle</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>a50e4679b67d5552f6179600a0066281b</anchor>
      <arglist>(JoinStyle joinStyle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FillRule</type>
      <name>getFillRule</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>a640a223e9a75d8f76e72bb62d5fb6af2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFillRule</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>ad91312050f8b35f5895b836ae2609804</anchor>
      <arglist>(FillRule fillRule)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const char **</type>
      <name>getAllowedPropertyKeys</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>a3cc500add699158ae5b2b138fdf6c2bd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolygonFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>ac60c008f1ab97f81a3cf5009b08d7b41</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; Point &gt; &amp;</type>
      <name>getPoints</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>a749366b72e498da10b3d3d245ac92845</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPoints</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>a49ffd19a7061340b9bff3e507d722ea9</anchor>
      <arglist>(const std::vector&lt; Point &gt; &amp;points)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPoints</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>a8deaca6b17721df8ee9de43665db688b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Point &amp;</type>
      <name>getPoint</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>a25458f5e5efa4020ec8e7660afb321c9</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPoint</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>a823eb2ef0312ccd22ba27261620706b3</anchor>
      <arglist>(int i, const Point &amp;point)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addPoint</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>ad3e542bc318a23473c82711025cfcd39</anchor>
      <arglist>(const Point &amp;point)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removePoint</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>ad209e8da29b24aecf0dda4fd4208b2ac</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertPoint</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>aeab6ac465e8abb6f534f97d1be31b768</anchor>
      <arglist>(int i, const Point &amp;point)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getSmooth</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>a4c980e0ade55ccac949c032bcf6bb385</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSmooth</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>a7e8f2394bb93cd98fb350ad024f86c02</anchor>
      <arglist>(bool smooth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual JoinStyle</type>
      <name>getJoinStyle</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>a6232d2dfb97af2ffe4ae53d421558e27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setJoinStyle</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>a50e4679b67d5552f6179600a0066281b</anchor>
      <arglist>(JoinStyle joinStyle)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual FillRule</type>
      <name>getFillRule</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>a640a223e9a75d8f76e72bb62d5fb6af2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setFillRule</name>
      <anchorfile>classomnetpp_1_1cPolygonFigure.html</anchorfile>
      <anchor>ad91312050f8b35f5895b836ae2609804</anchor>
      <arglist>(FillRule fillRule)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPolylineFigure</name>
    <filename>classomnetpp_1_1cPolylineFigure.html</filename>
    <base>omnetpp::cAbstractLineFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolylineFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>ad96ea264fc4aa7b504709e1b5a5fd520</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; Point &gt; &amp;</type>
      <name>getPoints</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>a749366b72e498da10b3d3d245ac92845</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPoints</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>a49ffd19a7061340b9bff3e507d722ea9</anchor>
      <arglist>(const std::vector&lt; Point &gt; &amp;points)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPoints</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>a8deaca6b17721df8ee9de43665db688b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Point &amp;</type>
      <name>getPoint</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>a25458f5e5efa4020ec8e7660afb321c9</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPoint</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>a823eb2ef0312ccd22ba27261620706b3</anchor>
      <arglist>(int i, const Point &amp;point)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addPoint</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>ad3e542bc318a23473c82711025cfcd39</anchor>
      <arglist>(const Point &amp;point)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removePoint</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>ad209e8da29b24aecf0dda4fd4208b2ac</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertPoint</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>aeab6ac465e8abb6f534f97d1be31b768</anchor>
      <arglist>(int i, const Point &amp;point)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getSmooth</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>a4c980e0ade55ccac949c032bcf6bb385</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSmooth</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>a7e8f2394bb93cd98fb350ad024f86c02</anchor>
      <arglist>(bool smooth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual JoinStyle</type>
      <name>getJoinStyle</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>a6232d2dfb97af2ffe4ae53d421558e27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setJoinStyle</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>a50e4679b67d5552f6179600a0066281b</anchor>
      <arglist>(JoinStyle joinStyle)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const char **</type>
      <name>getAllowedPropertyKeys</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>a3cc500add699158ae5b2b138fdf6c2bd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPolylineFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>ad96ea264fc4aa7b504709e1b5a5fd520</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; Point &gt; &amp;</type>
      <name>getPoints</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>a749366b72e498da10b3d3d245ac92845</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPoints</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>a49ffd19a7061340b9bff3e507d722ea9</anchor>
      <arglist>(const std::vector&lt; Point &gt; &amp;points)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPoints</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>a8deaca6b17721df8ee9de43665db688b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Point &amp;</type>
      <name>getPoint</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>a25458f5e5efa4020ec8e7660afb321c9</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPoint</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>a823eb2ef0312ccd22ba27261620706b3</anchor>
      <arglist>(int i, const Point &amp;point)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addPoint</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>ad3e542bc318a23473c82711025cfcd39</anchor>
      <arglist>(const Point &amp;point)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>removePoint</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>ad209e8da29b24aecf0dda4fd4208b2ac</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertPoint</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>aeab6ac465e8abb6f534f97d1be31b768</anchor>
      <arglist>(int i, const Point &amp;point)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getSmooth</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>a4c980e0ade55ccac949c032bcf6bb385</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSmooth</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>a7e8f2394bb93cd98fb350ad024f86c02</anchor>
      <arglist>(bool smooth)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual JoinStyle</type>
      <name>getJoinStyle</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>a6232d2dfb97af2ffe4ae53d421558e27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setJoinStyle</name>
      <anchorfile>classomnetpp_1_1cPolylineFigure.html</anchorfile>
      <anchor>a50e4679b67d5552f6179600a0066281b</anchor>
      <arglist>(JoinStyle joinStyle)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPostDisplayStringChangeNotification</name>
    <filename>classomnetpp_1_1cPostDisplayStringChangeNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cDisplayString *</type>
      <name>displayString</name>
      <anchorfile>classomnetpp_1_1cPostDisplayStringChangeNotification.html</anchorfile>
      <anchor>a3f03c9762432f25d9aaa5b7fd69ff4b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPostGateAddNotification</name>
    <filename>classomnetpp_1_1cPostGateAddNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classomnetpp_1_1cPostGateAddNotification.html</anchorfile>
      <anchor>a0c8bc58423f6302c51ca01e6115d70e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>gateName</name>
      <anchorfile>classomnetpp_1_1cPostGateAddNotification.html</anchorfile>
      <anchor>a287969a7164acf0e1bb9d75d0bc09c39</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPostGateConnectNotification</name>
    <filename>classomnetpp_1_1cPostGateConnectNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cGate *</type>
      <name>gate</name>
      <anchorfile>classomnetpp_1_1cPostGateConnectNotification.html</anchorfile>
      <anchor>a7906719565158752a2b15716eb4c8c41</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPostGateDeleteNotification</name>
    <filename>classomnetpp_1_1cPostGateDeleteNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classomnetpp_1_1cPostGateDeleteNotification.html</anchorfile>
      <anchor>a0c8bc58423f6302c51ca01e6115d70e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>gateName</name>
      <anchorfile>classomnetpp_1_1cPostGateDeleteNotification.html</anchorfile>
      <anchor>a287969a7164acf0e1bb9d75d0bc09c39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cGate::Type</type>
      <name>gateType</name>
      <anchorfile>classomnetpp_1_1cPostGateDeleteNotification.html</anchorfile>
      <anchor>a0fc4c1be29ae9cee62a8cc937249e665</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classomnetpp_1_1cPostGateDeleteNotification.html</anchorfile>
      <anchor>acbd2d6728e9c5590fafe746ae70505a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>vectorSize</name>
      <anchorfile>classomnetpp_1_1cPostGateDeleteNotification.html</anchorfile>
      <anchor>a7d0c659280fa07f3ce49713280982a28</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPostGateDisconnectNotification</name>
    <filename>classomnetpp_1_1cPostGateDisconnectNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cGate *</type>
      <name>gate</name>
      <anchorfile>classomnetpp_1_1cPostGateDisconnectNotification.html</anchorfile>
      <anchor>a7906719565158752a2b15716eb4c8c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cGate *</type>
      <name>targetGate</name>
      <anchorfile>classomnetpp_1_1cPostGateDisconnectNotification.html</anchorfile>
      <anchor>a521c5505d3bebcffb15749cd791f6fe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cChannel *</type>
      <name>channel</name>
      <anchorfile>classomnetpp_1_1cPostGateDisconnectNotification.html</anchorfile>
      <anchor>ae76691f2e601775502329464d3efe9c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPostGateVectorResizeNotification</name>
    <filename>classomnetpp_1_1cPostGateVectorResizeNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classomnetpp_1_1cPostGateVectorResizeNotification.html</anchorfile>
      <anchor>a0c8bc58423f6302c51ca01e6115d70e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>gateName</name>
      <anchorfile>classomnetpp_1_1cPostGateVectorResizeNotification.html</anchorfile>
      <anchor>a287969a7164acf0e1bb9d75d0bc09c39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>oldSize</name>
      <anchorfile>classomnetpp_1_1cPostGateVectorResizeNotification.html</anchorfile>
      <anchor>a2712b3bec762b10ff070dfc3095522d9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPostModuleAddNotification</name>
    <filename>classomnetpp_1_1cPostModuleAddNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classomnetpp_1_1cPostModuleAddNotification.html</anchorfile>
      <anchor>a0c8bc58423f6302c51ca01e6115d70e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPostModuleDeleteNotification</name>
    <filename>classomnetpp_1_1cPostModuleDeleteNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classomnetpp_1_1cPostModuleDeleteNotification.html</anchorfile>
      <anchor>a0c8bc58423f6302c51ca01e6115d70e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>moduleId</name>
      <anchorfile>classomnetpp_1_1cPostModuleDeleteNotification.html</anchorfile>
      <anchor>a0d0c5d8894e9a5940495302ce01a42eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModuleType *</type>
      <name>moduleType</name>
      <anchorfile>classomnetpp_1_1cPostModuleDeleteNotification.html</anchorfile>
      <anchor>a0ef8b0ef2e7ee70d6c59655d0689e1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>moduleName</name>
      <anchorfile>classomnetpp_1_1cPostModuleDeleteNotification.html</anchorfile>
      <anchor>a265fe9d3fb70f123f71f183c5cdc339a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModule *</type>
      <name>parentModule</name>
      <anchorfile>classomnetpp_1_1cPostModuleDeleteNotification.html</anchorfile>
      <anchor>ab712ac373b9cd37f1711c7228de99db7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>vectorSize</name>
      <anchorfile>classomnetpp_1_1cPostModuleDeleteNotification.html</anchorfile>
      <anchor>a7d0c659280fa07f3ce49713280982a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>index</name>
      <anchorfile>classomnetpp_1_1cPostModuleDeleteNotification.html</anchorfile>
      <anchor>a750b5d744c39a06bfb13e6eb010e35d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPostModuleReparentNotification</name>
    <filename>classomnetpp_1_1cPostModuleReparentNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classomnetpp_1_1cPostModuleReparentNotification.html</anchorfile>
      <anchor>a0c8bc58423f6302c51ca01e6115d70e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModule *</type>
      <name>oldParentModule</name>
      <anchorfile>classomnetpp_1_1cPostModuleReparentNotification.html</anchorfile>
      <anchor>af56babb02216b2b11ed05c064d303380</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPostParameterChangeNotification</name>
    <filename>classomnetpp_1_1cPostParameterChangeNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cPar *</type>
      <name>par</name>
      <anchorfile>classomnetpp_1_1cPostParameterChangeNotification.html</anchorfile>
      <anchor>a7930cad613629b4f212280cd067d4dda</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPostPathCreateNotification</name>
    <filename>classomnetpp_1_1cPostPathCreateNotification.html</filename>
    <base>omnetpp::cPathChangeNotification</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPostPathCutNotification</name>
    <filename>classomnetpp_1_1cPostPathCutNotification.html</filename>
    <base>omnetpp::cPathChangeNotification</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPrecollectionBasedDensityEst</name>
    <filename>classomnetpp_1_1cPrecollectionBasedDensityEst.html</filename>
    <base>omnetpp::cAbstractHistogram</base>
    <member kind="enumeration">
      <type></type>
      <name>RangeMode</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a798fec219ba08f1be88b570a77d6e397</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPrecollectionBasedDensityEst</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>afbc7531bc6f085a6fd9e56a2a71f7d9b</anchor>
      <arglist>(const cPrecollectionBasedDensityEst &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPrecollectionBasedDensityEst</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a3ea51b37ab5f71ecde9b24a0e9aee28c</anchor>
      <arglist>(const char *name=nullptr, bool weighted=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cPrecollectionBasedDensityEst</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a263d5b21b38deb697e2d79e6d49b42b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cPrecollectionBasedDensityEst &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a0d56a2f88a14a02f672d47899d4014cc</anchor>
      <arglist>(const cPrecollectionBasedDensityEst &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a3b715fbb1b1a0b5079591510e4015d0b</anchor>
      <arglist>(double value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collectWeighted</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a26fb09e47da0aceac9ffdce8555864be</anchor>
      <arglist>(double value, double weight) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>acc50284181a512fdb51eeb9a6107f9f1</anchor>
      <arglist>(const cStatistic *other) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a8ab0745de7fefce72d67f99f3931a3e4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a01e6d44b83e335cfe73d46c676495711</anchor>
      <arglist>(FILE *) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a395dbbaaff2a5685b2b4b6633bda651f</anchor>
      <arglist>(FILE *) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRange</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a07e687881ca47e0f156741052a095e26</anchor>
      <arglist>(double lower, double upper)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeAuto</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a899eb1710990800f57346e3684551770</anchor>
      <arglist>(int numPrecollect=100, double rangeExtensionFactor=2.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeAutoLower</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a9a422a27e38cec4084ee70beb2106131</anchor>
      <arglist>(double upper, int numPrecollect=100, double rangeExtensionFactor=2.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeAutoUpper</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a83992b771810dde37d4bf2be7f160212</anchor>
      <arglist>(double lower, int numPrecollect=100, double rangeExtensionFactor=2.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumPrecollectedValues</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a2d0aa79a0d0d32bd66b305432a628213</anchor>
      <arglist>(int numPrecollect)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPrecollectedValues</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>acf3ae15f010337ddcd434ce04c6bda3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getRangeExtensionFactor</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a094874ca816ecbec6f6e641c575d9045</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>binsAlreadySetUp</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a1924eced1f3b786555aaf856167213b2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>getNumUnderflows</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>aef97f9622a67fc3b68b665ab4635a407</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>getNumOverflows</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a1f358b32587e8b80daaf763d71102f0a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getUnderflowSumWeights</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a0aadee367197f4461d70917c0b15e3e2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getOverflowSumWeights</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a2cf6ac4d4338a05976c15204b2470f68</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>getNumNegInfs</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a68cfd19fe440ea3509e3624af29b6cc5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>getNumPosInfs</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>aa5f7d9be59c29732ec1bd135620281a2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getNegInfSumWeights</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a1ba0018060615b00c0d2262b8e7842b8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPosInfSumWeights</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>afbecd2c35d874f5f5707d0386650d797</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>setupRange</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>ab4867766d76a441b3214c49ea3357387</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>collectIntoHistogram</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>aae23581d48abd1bceae6f97931d9ed58</anchor>
      <arglist>(double value)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="pure">
      <type>virtual void</type>
      <name>collectWeightedIntoHistogram</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a68a87cd7f5ee898a9b3b3dd5fbb47e6d</anchor>
      <arglist>(double value, double weight)=0</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPrecollectionBasedDensityEst</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>afbc7531bc6f085a6fd9e56a2a71f7d9b</anchor>
      <arglist>(const cPrecollectionBasedDensityEst &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPrecollectionBasedDensityEst</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a3ea51b37ab5f71ecde9b24a0e9aee28c</anchor>
      <arglist>(const char *name=nullptr, bool weighted=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cPrecollectionBasedDensityEst</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a263d5b21b38deb697e2d79e6d49b42b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cPrecollectionBasedDensityEst &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a0d56a2f88a14a02f672d47899d4014cc</anchor>
      <arglist>(const cPrecollectionBasedDensityEst &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a3b715fbb1b1a0b5079591510e4015d0b</anchor>
      <arglist>(double value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collectWeighted</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a26fb09e47da0aceac9ffdce8555864be</anchor>
      <arglist>(double value, double weight) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>acc50284181a512fdb51eeb9a6107f9f1</anchor>
      <arglist>(const cStatistic *other) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a8ab0745de7fefce72d67f99f3931a3e4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a01e6d44b83e335cfe73d46c676495711</anchor>
      <arglist>(FILE *) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a395dbbaaff2a5685b2b4b6633bda651f</anchor>
      <arglist>(FILE *) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRange</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a07e687881ca47e0f156741052a095e26</anchor>
      <arglist>(double lower, double upper)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeAuto</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a899eb1710990800f57346e3684551770</anchor>
      <arglist>(int numPrecollect=100, double rangeExtensionFactor=2.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeAutoLower</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a9a422a27e38cec4084ee70beb2106131</anchor>
      <arglist>(double upper, int numPrecollect=100, double rangeExtensionFactor=2.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRangeAutoUpper</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a83992b771810dde37d4bf2be7f160212</anchor>
      <arglist>(double lower, int numPrecollect=100, double rangeExtensionFactor=2.0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumPrecollectedValues</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a2d0aa79a0d0d32bd66b305432a628213</anchor>
      <arglist>(int numPrecollect)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumPrecollectedValues</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>acf3ae15f010337ddcd434ce04c6bda3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getRangeExtensionFactor</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a094874ca816ecbec6f6e641c575d9045</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>binsAlreadySetUp</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a1924eced1f3b786555aaf856167213b2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>getNumUnderflows</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>aef97f9622a67fc3b68b665ab4635a407</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>getNumOverflows</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a1f358b32587e8b80daaf763d71102f0a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getUnderflowSumWeights</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a0aadee367197f4461d70917c0b15e3e2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getOverflowSumWeights</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a2cf6ac4d4338a05976c15204b2470f68</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>getNumNegInfs</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a68cfd19fe440ea3509e3624af29b6cc5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>getNumPosInfs</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>aa5f7d9be59c29732ec1bd135620281a2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getNegInfSumWeights</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>a1ba0018060615b00c0d2262b8e7842b8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPosInfSumWeights</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedDensityEst.html</anchorfile>
      <anchor>afbecd2c35d874f5f5707d0386650d797</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPrecollectionBasedHistogramStrategy</name>
    <filename>classomnetpp_1_1cPrecollectionBasedHistogramStrategy.html</filename>
    <base>omnetpp::cIHistogramStrategy</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUpBins</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedHistogramStrategy.html</anchorfile>
      <anchor>af163dfec64f493a3c41e445228529ae6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedHistogramStrategy.html</anchorfile>
      <anchor>a8ab0745de7fefce72d67f99f3931a3e4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUpBins</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedHistogramStrategy.html</anchorfile>
      <anchor>af163dfec64f493a3c41e445228529ae6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cPrecollectionBasedHistogramStrategy.html</anchorfile>
      <anchor>a8ab0745de7fefce72d67f99f3931a3e4</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPreDisplayStringChangeNotification</name>
    <filename>classomnetpp_1_1cPreDisplayStringChangeNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cDisplayString *</type>
      <name>displayString</name>
      <anchorfile>classomnetpp_1_1cPreDisplayStringChangeNotification.html</anchorfile>
      <anchor>a3f03c9762432f25d9aaa5b7fd69ff4b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPreGateAddNotification</name>
    <filename>classomnetpp_1_1cPreGateAddNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classomnetpp_1_1cPreGateAddNotification.html</anchorfile>
      <anchor>a0c8bc58423f6302c51ca01e6115d70e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>gateName</name>
      <anchorfile>classomnetpp_1_1cPreGateAddNotification.html</anchorfile>
      <anchor>a287969a7164acf0e1bb9d75d0bc09c39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cGate::Type</type>
      <name>gateType</name>
      <anchorfile>classomnetpp_1_1cPreGateAddNotification.html</anchorfile>
      <anchor>a0fc4c1be29ae9cee62a8cc937249e665</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classomnetpp_1_1cPreGateAddNotification.html</anchorfile>
      <anchor>acbd2d6728e9c5590fafe746ae70505a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPreGateConnectNotification</name>
    <filename>classomnetpp_1_1cPreGateConnectNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cGate *</type>
      <name>gate</name>
      <anchorfile>classomnetpp_1_1cPreGateConnectNotification.html</anchorfile>
      <anchor>a7906719565158752a2b15716eb4c8c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cGate *</type>
      <name>targetGate</name>
      <anchorfile>classomnetpp_1_1cPreGateConnectNotification.html</anchorfile>
      <anchor>a521c5505d3bebcffb15749cd791f6fe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cChannel *</type>
      <name>channel</name>
      <anchorfile>classomnetpp_1_1cPreGateConnectNotification.html</anchorfile>
      <anchor>ae76691f2e601775502329464d3efe9c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPreGateDeleteNotification</name>
    <filename>classomnetpp_1_1cPreGateDeleteNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classomnetpp_1_1cPreGateDeleteNotification.html</anchorfile>
      <anchor>a0c8bc58423f6302c51ca01e6115d70e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>gateName</name>
      <anchorfile>classomnetpp_1_1cPreGateDeleteNotification.html</anchorfile>
      <anchor>a287969a7164acf0e1bb9d75d0bc09c39</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPreGateDisconnectNotification</name>
    <filename>classomnetpp_1_1cPreGateDisconnectNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cGate *</type>
      <name>gate</name>
      <anchorfile>classomnetpp_1_1cPreGateDisconnectNotification.html</anchorfile>
      <anchor>a7906719565158752a2b15716eb4c8c41</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPreGateVectorResizeNotification</name>
    <filename>classomnetpp_1_1cPreGateVectorResizeNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classomnetpp_1_1cPreGateVectorResizeNotification.html</anchorfile>
      <anchor>a0c8bc58423f6302c51ca01e6115d70e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>gateName</name>
      <anchorfile>classomnetpp_1_1cPreGateVectorResizeNotification.html</anchorfile>
      <anchor>a287969a7164acf0e1bb9d75d0bc09c39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>newSize</name>
      <anchorfile>classomnetpp_1_1cPreGateVectorResizeNotification.html</anchorfile>
      <anchor>a6963928aa498edcd0d1540bd8321a49a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPreModuleAddNotification</name>
    <filename>classomnetpp_1_1cPreModuleAddNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cModuleType *</type>
      <name>moduleType</name>
      <anchorfile>classomnetpp_1_1cPreModuleAddNotification.html</anchorfile>
      <anchor>a0ef8b0ef2e7ee70d6c59655d0689e1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char *</type>
      <name>moduleName</name>
      <anchorfile>classomnetpp_1_1cPreModuleAddNotification.html</anchorfile>
      <anchor>a265fe9d3fb70f123f71f183c5cdc339a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModule *</type>
      <name>parentModule</name>
      <anchorfile>classomnetpp_1_1cPreModuleAddNotification.html</anchorfile>
      <anchor>ab712ac373b9cd37f1711c7228de99db7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>vectorSize</name>
      <anchorfile>classomnetpp_1_1cPreModuleAddNotification.html</anchorfile>
      <anchor>a7d0c659280fa07f3ce49713280982a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>index</name>
      <anchorfile>classomnetpp_1_1cPreModuleAddNotification.html</anchorfile>
      <anchor>a750b5d744c39a06bfb13e6eb010e35d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPreModuleDeleteNotification</name>
    <filename>classomnetpp_1_1cPreModuleDeleteNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classomnetpp_1_1cPreModuleDeleteNotification.html</anchorfile>
      <anchor>a0c8bc58423f6302c51ca01e6115d70e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPreModuleReparentNotification</name>
    <filename>classomnetpp_1_1cPreModuleReparentNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cModule *</type>
      <name>module</name>
      <anchorfile>classomnetpp_1_1cPreModuleReparentNotification.html</anchorfile>
      <anchor>a0c8bc58423f6302c51ca01e6115d70e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>cModule *</type>
      <name>newParentModule</name>
      <anchorfile>classomnetpp_1_1cPreModuleReparentNotification.html</anchorfile>
      <anchor>a2244450cdaa4374d0143a143878e6a54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPreParameterChangeNotification</name>
    <filename>classomnetpp_1_1cPreParameterChangeNotification.html</filename>
    <base>omnetpp::cModelChangeNotification</base>
    <member kind="variable">
      <type>cPar *</type>
      <name>par</name>
      <anchorfile>classomnetpp_1_1cPreParameterChangeNotification.html</anchorfile>
      <anchor>a7930cad613629b4f212280cd067d4dda</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPrePathCreateNotification</name>
    <filename>classomnetpp_1_1cPrePathCreateNotification.html</filename>
    <base>omnetpp::cPathChangeNotification</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPrePathCutNotification</name>
    <filename>classomnetpp_1_1cPrePathCutNotification.html</filename>
    <base>omnetpp::cPathChangeNotification</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::cProperties</name>
    <filename>classomnetpp_1_1cProperties.html</filename>
    <base>omnetpp::cObject</base>
    <member kind="function">
      <type></type>
      <name>cProperties</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a1b6ad91b62fe8589ec7964e7fe7f00ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cProperties</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a5ac87a4e4ea964010ed47b117974c4c8</anchor>
      <arglist>(const cProperties &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cProperties</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a83fcfac1e4f9ed510a916b513b5d9508</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cProperties &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a851d69884cc627b7701c57634f1e41c0</anchor>
      <arglist>(const cProperties &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cProperties *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>adeebef972870c5545fa243b62667f330</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a83be907353bc2510cac6212277a77777</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumProperties</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>ad832e206906de7320c14b6effd4b2779</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; const char * &gt;</type>
      <name>getNames</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>aec62d0d09606a201f90bbcb92dc8747a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cProperty *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a058c08fb019271bd7327e81fbc586a4e</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cProperty *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a624e70eddd97393c7c55983776a74896</anchor>
      <arglist>(const char *name, const char *index=nullptr) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getAsBool</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>ab90f4e129f3c9bcaf24b6d6acd037de5</anchor>
      <arglist>(const char *name, const char *index=nullptr) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getIndicesFor</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>afeec257bc68cd6a09cad68671dab85af</anchor>
      <arglist>(const char *name) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a04630be8c428ed8562724773d15b1a77</anchor>
      <arglist>(cProperty *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a9ea24f343b0d7460ccb610cfe4989369</anchor>
      <arglist>(int k)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cProperties</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a1b6ad91b62fe8589ec7964e7fe7f00ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cProperties</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a5ac87a4e4ea964010ed47b117974c4c8</anchor>
      <arglist>(const cProperties &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cProperties</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a83fcfac1e4f9ed510a916b513b5d9508</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cProperties &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a851d69884cc627b7701c57634f1e41c0</anchor>
      <arglist>(const cProperties &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cProperties *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>adeebef972870c5545fa243b62667f330</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a83be907353bc2510cac6212277a77777</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumProperties</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>ad832e206906de7320c14b6effd4b2779</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; const char * &gt;</type>
      <name>getNames</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>aec62d0d09606a201f90bbcb92dc8747a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cProperty *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a058c08fb019271bd7327e81fbc586a4e</anchor>
      <arglist>(int k) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cProperty *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a624e70eddd97393c7c55983776a74896</anchor>
      <arglist>(const char *name, const char *index=nullptr) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>getAsBool</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>ab90f4e129f3c9bcaf24b6d6acd037de5</anchor>
      <arglist>(const char *name, const char *index=nullptr) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::vector&lt; const char * &gt;</type>
      <name>getIndicesFor</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>afeec257bc68cd6a09cad68671dab85af</anchor>
      <arglist>(const char *name) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a04630be8c428ed8562724773d15b1a77</anchor>
      <arglist>(cProperty *p)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cProperties.html</anchorfile>
      <anchor>a9ea24f343b0d7460ccb610cfe4989369</anchor>
      <arglist>(int k)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cProperty</name>
    <filename>classomnetpp_1_1cProperty.html</filename>
    <base>omnetpp::cNamedObject</base>
    <member kind="function">
      <type></type>
      <name>cProperty</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a539647a5dc4e60acc29eb36005cb9d32</anchor>
      <arglist>(const char *name=nullptr, const char *index=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cProperty</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>aa51847220ccf77139014118fe01df97a</anchor>
      <arglist>(const cProperty &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cProperty</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a846234267d39f79c18b63c97719a99fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cProperty &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a25e90f993e506b8cd099a81bc08f4554</anchor>
      <arglist>(const cProperty &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a6a2b95747da53f718d437b43a44dbbda</anchor>
      <arglist>(const char *name) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>ac8c2df3a4b90f890270bda7b2d7c1bec</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cProperty *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>add31209d1d85ed37ecc3dacd2f2c46b8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIndex</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a6de6049caece96b3ab0809cdf06edef8</anchor>
      <arglist>(const char *index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getIndex</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>aacc032d4a60253e4ad9fa20ff52ed191</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsImplicit</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a2e64db95a875e3c9bf80c739c08ccaea</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isImplicit</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a78430be38c27f55e55f8d43990a7ba05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; const char * &gt; &amp;</type>
      <name>getKeys</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a4408dc54e5b0500aa269958a3155c81d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsKey</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a34dbf874bce7720f4c63d551aa1480d3</anchor>
      <arglist>(const char *key) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addKey</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a5df1bf0ef4be8135beb2fce341b73b28</anchor>
      <arglist>(const char *key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumValues</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a03e9464cf2aaa2b0abb3eccbde534bb8</anchor>
      <arglist>(const char *key) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumValues</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a8a0c920fd8baa1b00423cb48058c906a</anchor>
      <arglist>(const char *key, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getValue</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a8f04f49568ae1c4387272ee731da4cbc</anchor>
      <arglist>(const char *key=&quot;&quot;, int index=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a7f64f5093a68f81f6f842a405cd40e0c</anchor>
      <arglist>(const char *key, int index, const char *value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>erase</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a08cddec96e09a044ba76a5d6d2c55c42</anchor>
      <arglist>(const char *key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cProperty</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a539647a5dc4e60acc29eb36005cb9d32</anchor>
      <arglist>(const char *name=nullptr, const char *index=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cProperty</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>aa51847220ccf77139014118fe01df97a</anchor>
      <arglist>(const cProperty &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cProperty</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a846234267d39f79c18b63c97719a99fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cProperty &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a25e90f993e506b8cd099a81bc08f4554</anchor>
      <arglist>(const cProperty &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setName</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a6a2b95747da53f718d437b43a44dbbda</anchor>
      <arglist>(const char *name) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>ac8c2df3a4b90f890270bda7b2d7c1bec</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cProperty *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>add31209d1d85ed37ecc3dacd2f2c46b8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIndex</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a6de6049caece96b3ab0809cdf06edef8</anchor>
      <arglist>(const char *index)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getIndex</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>aacc032d4a60253e4ad9fa20ff52ed191</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIsImplicit</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a2e64db95a875e3c9bf80c739c08ccaea</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isImplicit</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a78430be38c27f55e55f8d43990a7ba05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const std::vector&lt; const char * &gt; &amp;</type>
      <name>getKeys</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a4408dc54e5b0500aa269958a3155c81d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsKey</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a34dbf874bce7720f4c63d551aa1480d3</anchor>
      <arglist>(const char *key) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addKey</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a5df1bf0ef4be8135beb2fce341b73b28</anchor>
      <arglist>(const char *key)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumValues</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a03e9464cf2aaa2b0abb3eccbde534bb8</anchor>
      <arglist>(const char *key) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setNumValues</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a8a0c920fd8baa1b00423cb48058c906a</anchor>
      <arglist>(const char *key, int size)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getValue</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a8f04f49568ae1c4387272ee731da4cbc</anchor>
      <arglist>(const char *key=&quot;&quot;, int index=0) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setValue</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a7f64f5093a68f81f6f842a405cd40e0c</anchor>
      <arglist>(const char *key, int index, const char *value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>erase</name>
      <anchorfile>classomnetpp_1_1cProperty.html</anchorfile>
      <anchor>a08cddec96e09a044ba76a5d6d2c55c42</anchor>
      <arglist>(const char *key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cPSquare</name>
    <filename>classomnetpp_1_1cPSquare.html</filename>
    <base>omnetpp::cAbstractHistogram</base>
    <member kind="function">
      <type></type>
      <name>cPSquare</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>af1df6489684b5d315f51da8eec0b5600</anchor>
      <arglist>(const cPSquare &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPSquare</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a0cd6f9badf85cf8acf07b051c76fd95b</anchor>
      <arglist>(const char *name=nullptr, int bins=10)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cPSquare</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a0481c61d9842867a42adeda5ced07954</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cPSquare &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a23755629026a8c83dae9e27ece85fcae</anchor>
      <arglist>(const cPSquare &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPSquare *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>ada315f3299fda6d698983c00403bd90d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>binsAlreadySetUp</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a1924eced1f3b786555aaf856167213b2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUpBins</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>af163dfec64f493a3c41e445228529ae6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a3b715fbb1b1a0b5079591510e4015d0b</anchor>
      <arglist>(double value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collectWeighted</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a26fb09e47da0aceac9ffdce8555864be</anchor>
      <arglist>(double value, double weight) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumBins</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a795fab464dcc5ad3f5f47e504706e7cc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBinEdge</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>ab15732fd2da197eb8a8cf8bedfb5395d</anchor>
      <arglist>(int k) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBinValue</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a1fe98eb162d14cdb1db0a0d73a1c154c</anchor>
      <arglist>(int k) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>getNumUnderflows</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>aef97f9622a67fc3b68b665ab4635a407</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>getNumOverflows</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a1f358b32587e8b80daaf763d71102f0a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getUnderflowSumWeights</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a0aadee367197f4461d70917c0b15e3e2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getOverflowSumWeights</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a2cf6ac4d4338a05976c15204b2470f68</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>getNumNegInfs</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a68cfd19fe440ea3509e3624af29b6cc5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>getNumPosInfs</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>aa5f7d9be59c29732ec1bd135620281a2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getNegInfSumWeights</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a1ba0018060615b00c0d2262b8e7842b8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPosInfSumWeights</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>afbecd2c35d874f5f5707d0386650d797</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>acc50284181a512fdb51eeb9a6107f9f1</anchor>
      <arglist>(const cStatistic *other) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a8ab0745de7fefce72d67f99f3931a3e4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a01e6d44b83e335cfe73d46c676495711</anchor>
      <arglist>(FILE *) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a395dbbaaff2a5685b2b4b6633bda651f</anchor>
      <arglist>(FILE *) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPSquare</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>af1df6489684b5d315f51da8eec0b5600</anchor>
      <arglist>(const cPSquare &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cPSquare</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a0cd6f9badf85cf8acf07b051c76fd95b</anchor>
      <arglist>(const char *name=nullptr, int bins=10)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cPSquare</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a0481c61d9842867a42adeda5ced07954</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cPSquare &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a23755629026a8c83dae9e27ece85fcae</anchor>
      <arglist>(const cPSquare &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cPSquare *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>ada315f3299fda6d698983c00403bd90d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>binsAlreadySetUp</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a1924eced1f3b786555aaf856167213b2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUpBins</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>af163dfec64f493a3c41e445228529ae6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a3b715fbb1b1a0b5079591510e4015d0b</anchor>
      <arglist>(double value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collectWeighted</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a26fb09e47da0aceac9ffdce8555864be</anchor>
      <arglist>(double value, double weight) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumBins</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a795fab464dcc5ad3f5f47e504706e7cc</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBinEdge</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>ab15732fd2da197eb8a8cf8bedfb5395d</anchor>
      <arglist>(int k) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBinValue</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a1fe98eb162d14cdb1db0a0d73a1c154c</anchor>
      <arglist>(int k) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>getNumUnderflows</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>aef97f9622a67fc3b68b665ab4635a407</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>getNumOverflows</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a1f358b32587e8b80daaf763d71102f0a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getUnderflowSumWeights</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a0aadee367197f4461d70917c0b15e3e2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getOverflowSumWeights</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a2cf6ac4d4338a05976c15204b2470f68</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>getNumNegInfs</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a68cfd19fe440ea3509e3624af29b6cc5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>getNumPosInfs</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>aa5f7d9be59c29732ec1bd135620281a2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getNegInfSumWeights</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a1ba0018060615b00c0d2262b8e7842b8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPosInfSumWeights</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>afbecd2c35d874f5f5707d0386650d797</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>acc50284181a512fdb51eeb9a6107f9f1</anchor>
      <arglist>(const cStatistic *other) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a8ab0745de7fefce72d67f99f3931a3e4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a01e6d44b83e335cfe73d46c676495711</anchor>
      <arglist>(FILE *) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cPSquare.html</anchorfile>
      <anchor>a395dbbaaff2a5685b2b4b6633bda651f</anchor>
      <arglist>(FILE *) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cQueue</name>
    <filename>classomnetpp_1_1cQueue.html</filename>
    <base>omnetpp::cOwnedObject</base>
    <class kind="class">omnetpp::cQueue::Comparator</class>
    <class kind="class">omnetpp::cQueue::Iterator</class>
    <member kind="typedef">
      <type>int(*</type>
      <name>CompareFunc</name>
      <anchorfile>group__Containers.html</anchorfile>
      <anchor>gabeb451b66385c18e01063cb0576ea8a0</anchor>
      <arglist>)(cObject *a, cObject *b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cQueue</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a208c3f8fad3832d883eff440817dec17</anchor>
      <arglist>(const char *name=nullptr, Comparator *cmp=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cQueue</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a7eae56a84f7da30c84a4b68a96783577</anchor>
      <arglist>(const char *name, CompareFunc cmp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cQueue</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a9330a163f41159726574eca1d314d3b0</anchor>
      <arglist>(const cQueue &amp;queue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cQueue</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a35d17b1313343cc396710a838a61f45e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cQueue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a6f0b903bb99bba4fbd402734497890be</anchor>
      <arglist>(const cQueue &amp;queue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cQueue *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>ae821620fa9574790163224098b1d2b4a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a54a918a152d3fcc490388fad01c3e273</anchor>
      <arglist>(Comparator *cmp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a1db9bcc155d8c1b9a841f119f014d151</anchor>
      <arglist>(CompareFunc cmp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insert</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a7f35cf24711500b673e7f1c70bee76b7</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBefore</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a01bc503018a72c11f0af30d0c5b9a583</anchor>
      <arglist>(cObject *where, cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertAfter</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a45d686de03a5550c090fe84ab344cbb8</anchor>
      <arglist>(cObject *where, cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>af6f61957ce8e2e64ceffdc71bafe41cf</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>pop</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a5f8bf52c67c1fafc6750cf1976423844</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>aae048282c7011eedc2e0492f6421ea73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>front</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a3fde519a7b0f1e8782006c76bec65e0d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>back</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a80c24cb0e1f5bb30ae4980471b57d2a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getLength</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a40e61439a09daea7d3de3e8f78d8a23c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>acf82f9b2937375c7b1cf3dccb3df3312</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED int</type>
      <name>length</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>abe4a1b70f64bb0167298790dae9fedfb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED bool</type>
      <name>empty</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>aa0c9c998bb69c29bb331867cf64c9f20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a975a6b5c6495128f0069a59ed5a761cf</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>contains</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a0a7bc4321cacc14f40bb71d9fa76f2ef</anchor>
      <arglist>(cObject *obj) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTakeOwnership</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a205b5531f3aa081aef4f053e8ef2a768</anchor>
      <arglist>(bool tk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTakeOwnership</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>ac43e9a5a4f94023dbcaaa81d0ff0fd3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cQueue</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a208c3f8fad3832d883eff440817dec17</anchor>
      <arglist>(const char *name=nullptr, Comparator *cmp=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cQueue</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a7eae56a84f7da30c84a4b68a96783577</anchor>
      <arglist>(const char *name, CompareFunc cmp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cQueue</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a9330a163f41159726574eca1d314d3b0</anchor>
      <arglist>(const cQueue &amp;queue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cQueue</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a35d17b1313343cc396710a838a61f45e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cQueue &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a6f0b903bb99bba4fbd402734497890be</anchor>
      <arglist>(const cQueue &amp;queue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cQueue *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>ae821620fa9574790163224098b1d2b4a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a54a918a152d3fcc490388fad01c3e273</anchor>
      <arglist>(Comparator *cmp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setup</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a1db9bcc155d8c1b9a841f119f014d151</anchor>
      <arglist>(CompareFunc cmp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insert</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a7f35cf24711500b673e7f1c70bee76b7</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBefore</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a01bc503018a72c11f0af30d0c5b9a583</anchor>
      <arglist>(cObject *where, cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertAfter</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a45d686de03a5550c090fe84ab344cbb8</anchor>
      <arglist>(cObject *where, cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>remove</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>af6f61957ce8e2e64ceffdc71bafe41cf</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>pop</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a5f8bf52c67c1fafc6750cf1976423844</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>aae048282c7011eedc2e0492f6421ea73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>front</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a3fde519a7b0f1e8782006c76bec65e0d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>back</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a80c24cb0e1f5bb30ae4980471b57d2a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getLength</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a40e61439a09daea7d3de3e8f78d8a23c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>acf82f9b2937375c7b1cf3dccb3df3312</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED int</type>
      <name>length</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>abe4a1b70f64bb0167298790dae9fedfb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED bool</type>
      <name>empty</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>aa0c9c998bb69c29bb331867cf64c9f20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a975a6b5c6495128f0069a59ed5a761cf</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>contains</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a0a7bc4321cacc14f40bb71d9fa76f2ef</anchor>
      <arglist>(cObject *obj) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTakeOwnership</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>a205b5531f3aa081aef4f053e8ef2a768</anchor>
      <arglist>(bool tk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getTakeOwnership</name>
      <anchorfile>classomnetpp_1_1cQueue.html</anchorfile>
      <anchor>ac43e9a5a4f94023dbcaaa81d0ff0fd3f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cRandom</name>
    <filename>classomnetpp_1_1cRandom.html</filename>
    <base>omnetpp::cOwnedObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRNG</name>
      <anchorfile>classomnetpp_1_1cRandom.html</anchorfile>
      <anchor>aaddc08a47243d704760cb410cde71366</anchor>
      <arglist>(cRNG *rng)</arglist>
    </member>
    <member kind="function">
      <type>cRNG *</type>
      <name>getRNG</name>
      <anchorfile>classomnetpp_1_1cRandom.html</anchorfile>
      <anchor>ace5f16be1b8a0ce96a2a6c0535c10172</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cRandom.html</anchorfile>
      <anchor>a90331556275dd965490985937610cde6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setRNG</name>
      <anchorfile>classomnetpp_1_1cRandom.html</anchorfile>
      <anchor>aaddc08a47243d704760cb410cde71366</anchor>
      <arglist>(cRNG *rng)</arglist>
    </member>
    <member kind="function">
      <type>cRNG *</type>
      <name>getRNG</name>
      <anchorfile>classomnetpp_1_1cRandom.html</anchorfile>
      <anchor>ace5f16be1b8a0ce96a2a6c0535c10172</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cRandom.html</anchorfile>
      <anchor>a90331556275dd965490985937610cde6</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cRealTimeScheduler</name>
    <filename>classomnetpp_1_1cRealTimeScheduler.html</filename>
    <base>omnetpp::cScheduler</base>
    <member kind="function">
      <type></type>
      <name>cRealTimeScheduler</name>
      <anchorfile>classomnetpp_1_1cRealTimeScheduler.html</anchorfile>
      <anchor>ab9accaff058d9f83ade9243e48e30b3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cRealTimeScheduler</name>
      <anchorfile>classomnetpp_1_1cRealTimeScheduler.html</anchorfile>
      <anchor>ad373dcb1bed51e021a6b8122eb6d2fdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cRealTimeScheduler.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>executionResumed</name>
      <anchorfile>classomnetpp_1_1cRealTimeScheduler.html</anchorfile>
      <anchor>a259105edab6c31a89f1d45090b955571</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEvent *</type>
      <name>guessNextEvent</name>
      <anchorfile>classomnetpp_1_1cRealTimeScheduler.html</anchorfile>
      <anchor>aad61920dbceba3b87d6f519b03eda684</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEvent *</type>
      <name>takeNextEvent</name>
      <anchorfile>classomnetpp_1_1cRealTimeScheduler.html</anchorfile>
      <anchor>a837fffa44eee49feed07981cf2417eaf</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putBackEvent</name>
      <anchorfile>classomnetpp_1_1cRealTimeScheduler.html</anchorfile>
      <anchor>a98a257214face2b52750b3d0c3a88901</anchor>
      <arglist>(cEvent *event) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classomnetpp_1_1cRealTimeScheduler.html</anchorfile>
      <anchor>a98bb4a1ac78e4f433a4824f9d48aaa07</anchor>
      <arglist>() override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cRectangleFigure</name>
    <filename>classomnetpp_1_1cRectangleFigure.html</filename>
    <base>omnetpp::cAbstractShapeFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cRectangleFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>a76f9f9c02a53e9ba619b46961bb3745a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Rectangle &amp;</type>
      <name>getBounds</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>ac3b28beef518ea8914eb46646a4e1339</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBounds</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>a92035a3eb0e082c618fa30344c3e3487</anchor>
      <arglist>(const Rectangle &amp;bounds)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>a9062e4b83b894af848722c332b5d4698</anchor>
      <arglist>(const Point &amp;position, Anchor anchor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCornerRadius</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>a64380df20b078bd08fd295cce3cd2c2a</anchor>
      <arglist>(double r)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCornerRx</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>a0b578bcc90439e4d1eb5bca1d5cd389c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCornerRx</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>a295171e9b542e98b76e6f3d9be522057</anchor>
      <arglist>(double rx)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCornerRy</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>a7fc622a256acbe44b85348c28b81cc11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCornerRy</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>afbc5f42b9af5206469597a1a0049f9ea</anchor>
      <arglist>(double ry)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const char **</type>
      <name>getAllowedPropertyKeys</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>a3cc500add699158ae5b2b138fdf6c2bd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cRectangleFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>a76f9f9c02a53e9ba619b46961bb3745a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Rectangle &amp;</type>
      <name>getBounds</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>ac3b28beef518ea8914eb46646a4e1339</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBounds</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>a92035a3eb0e082c618fa30344c3e3487</anchor>
      <arglist>(const Rectangle &amp;bounds)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>a9062e4b83b894af848722c332b5d4698</anchor>
      <arglist>(const Point &amp;position, Anchor anchor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCornerRadius</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>a64380df20b078bd08fd295cce3cd2c2a</anchor>
      <arglist>(double r)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCornerRx</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>a0b578bcc90439e4d1eb5bca1d5cd389c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCornerRx</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>a295171e9b542e98b76e6f3d9be522057</anchor>
      <arglist>(double rx)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCornerRy</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>a7fc622a256acbe44b85348c28b81cc11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setCornerRy</name>
      <anchorfile>classomnetpp_1_1cRectangleFigure.html</anchorfile>
      <anchor>afbc5f42b9af5206469597a1a0049f9ea</anchor>
      <arglist>(double ry)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cRegistrationList</name>
    <filename>classomnetpp_1_1cRegistrationList.html</filename>
    <base>omnetpp::cNamedObject</base>
    <base protection="private">omnetpp::noncopyable</base>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classomnetpp_1_1cRegistrationList.html</anchorfile>
      <anchor>ad69bd11391be1a1dba5c8202259664f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classomnetpp_1_1cRegistrationList.html</anchorfile>
      <anchor>acad38d52497a975bfb6f2f6acd76631f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>add</name>
      <anchorfile>classomnetpp_1_1cRegistrationList.html</anchorfile>
      <anchor>a4e50d6ea9afac64c8379dccf2d51c786</anchor>
      <arglist>(cOwnedObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>classomnetpp_1_1cRegistrationList.html</anchorfile>
      <anchor>a32329eeeba44c332199f698bc70d3f89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cOwnedObject *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cRegistrationList.html</anchorfile>
      <anchor>a6574ecd23c0b7ba0e449f9d6d33cc6cb</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cOwnedObject *</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cRegistrationList.html</anchorfile>
      <anchor>ad17e95a43147d450eb2cf9958df3df2c</anchor>
      <arglist>(const char *name) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cOwnedObject *</type>
      <name>lookup</name>
      <anchorfile>classomnetpp_1_1cRegistrationList.html</anchorfile>
      <anchor>ad5afe8033f94a4be7f23e633e4a12cae</anchor>
      <arglist>(const char *qualifiedName) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cOwnedObject *</type>
      <name>lookup</name>
      <anchorfile>classomnetpp_1_1cRegistrationList.html</anchorfile>
      <anchor>afcf27b526e3e1871c2f4da18266bbdac</anchor>
      <arglist>(const char *qualifiedName, const char *contextNamespace, bool fallbackToOmnetpp=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sort</name>
      <anchorfile>classomnetpp_1_1cRegistrationList.html</anchorfile>
      <anchor>aa484f63de36f7e9cb2727f5ffcdffd80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cRegistrationList.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cRegistrationList.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cRegistrationList.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cRegistrationList.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cResultFilter</name>
    <filename>classomnetpp_1_1cResultFilter.html</filename>
    <base>omnetpp::cResultListener</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cResultFilter.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cResultFilterType</name>
    <filename>classomnetpp_1_1cResultFilterType.html</filename>
    <base>omnetpp::cNoncopyableOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cResultFilterType</name>
      <anchorfile>classomnetpp_1_1cResultFilterType.html</anchorfile>
      <anchor>a79d4b464afd336b9987d41a77393daa9</anchor>
      <arglist>(const char *name, cResultFilter *(*f)(), const char *description=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>cResultFilter *</type>
      <name>create</name>
      <anchorfile>classomnetpp_1_1cResultFilterType.html</anchorfile>
      <anchor>a479df7de62781477f3a76a2c7d3d97e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDescription</name>
      <anchorfile>classomnetpp_1_1cResultFilterType.html</anchorfile>
      <anchor>a7e04381ec22454e831a3db7b063c35c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cResultFilterType *</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cResultFilterType.html</anchorfile>
      <anchor>ae085b7de93984ce378e24ae1417505b9</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cResultFilterType *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cResultFilterType.html</anchorfile>
      <anchor>a4a2cb0aeb4c2fda63ac391e066be0c35</anchor>
      <arglist>(const char *name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cResultListener</name>
    <filename>classomnetpp_1_1cResultListener.html</filename>
    <base>omnetpp::cObject</base>
    <base>omnetpp::cIListener</base>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cResultListener.html</anchorfile>
      <anchor>ac29d2f941ddc13062ed6566d67896d13</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, bool b, cObject *details) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cResultListener.html</anchorfile>
      <anchor>ad7eeef91300cda697657332f42de5ed9</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, long l, cObject *details) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cResultListener.html</anchorfile>
      <anchor>a6b66fcb9e86ec6f74615a7c78183433d</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, unsigned long l, cObject *details) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cResultListener.html</anchorfile>
      <anchor>a7069e1fa04e58faa57ad63912f665f9f</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, double d, cObject *details) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cResultListener.html</anchorfile>
      <anchor>aacf3401343eac3eed6c3afdc502c2f8c</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, const SimTime &amp;v, cObject *details) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cResultListener.html</anchorfile>
      <anchor>ae297a106431baec4417a7be954a4b65f</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, const char *s, cObject *details) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>receiveSignal</name>
      <anchorfile>classomnetpp_1_1cResultListener.html</anchorfile>
      <anchor>a16748135bffb8ab012820fd72c5ac516</anchor>
      <arglist>(cComponent *source, simsignal_t signalID, cObject *obj, cObject *details) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>subscribedTo</name>
      <anchorfile>classomnetpp_1_1cResultListener.html</anchorfile>
      <anchor>a47f12f5c0be4b0e4333298133ec6a154</anchor>
      <arglist>(cComponent *component, simsignal_t signalID) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>unsubscribedFrom</name>
      <anchorfile>classomnetpp_1_1cResultListener.html</anchorfile>
      <anchor>a5b56bdc1791a6d4249982e3f2a43659c</anchor>
      <arglist>(cComponent *component, simsignal_t signalID) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>finish</name>
      <anchorfile>classomnetpp_1_1cResultListener.html</anchorfile>
      <anchor>a26ffd4394b27a0d6c37a488888895246</anchor>
      <arglist>(cComponent *component, simsignal_t signalID) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cResultRecorder</name>
    <filename>classomnetpp_1_1cResultRecorder.html</filename>
    <base>omnetpp::cResultListener</base>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classomnetpp_1_1cResultRecorder.html</anchorfile>
      <anchor>a0b24a03a14c95b3ae41930b4728fc977</anchor>
      <arglist>(cComponent *component, const char *statisticName, const char *recordingMode, cProperty *attrsProperty, opp_string_map *manualAttrs=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classomnetpp_1_1cResultRecorder.html</anchorfile>
      <anchor>a83be907353bc2510cac6212277a77777</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getFullPath</name>
      <anchorfile>classomnetpp_1_1cResultRecorder.html</anchorfile>
      <anchor>abebbca7333a87d91fe5274e9879c5532</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cResultRecorderType</name>
    <filename>classomnetpp_1_1cResultRecorderType.html</filename>
    <base>omnetpp::cNoncopyableOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cResultRecorderType</name>
      <anchorfile>classomnetpp_1_1cResultRecorderType.html</anchorfile>
      <anchor>a6a65c78b9585662265654ce13ef07fdf</anchor>
      <arglist>(const char *name, cResultRecorder *(*f)(), const char *description=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>cResultRecorder *</type>
      <name>create</name>
      <anchorfile>classomnetpp_1_1cResultRecorderType.html</anchorfile>
      <anchor>a66baa77c1268fc5622951c3d754caecf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getDescription</name>
      <anchorfile>classomnetpp_1_1cResultRecorderType.html</anchorfile>
      <anchor>a7e04381ec22454e831a3db7b063c35c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cResultRecorderType *</type>
      <name>find</name>
      <anchorfile>classomnetpp_1_1cResultRecorderType.html</anchorfile>
      <anchor>a53a939d6f4b436b36f5cdb04fd2e00c6</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cResultRecorderType *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cResultRecorderType.html</anchorfile>
      <anchor>a192d1933a34109ed35d7aae3d0cc9260</anchor>
      <arglist>(const char *name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cRingFigure</name>
    <filename>classomnetpp_1_1cRingFigure.html</filename>
    <base>omnetpp::cAbstractShapeFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cRingFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>ad031b5759622b6f278ff854b159fffa2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Rectangle &amp;</type>
      <name>getBounds</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>ac3b28beef518ea8914eb46646a4e1339</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBounds</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>a92035a3eb0e082c618fa30344c3e3487</anchor>
      <arglist>(const Rectangle &amp;bounds)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>a9062e4b83b894af848722c332b5d4698</anchor>
      <arglist>(const Point &amp;position, Anchor anchor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInnerRadius</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>a4baf4e51b59e7886568e99a557f18deb</anchor>
      <arglist>(double r)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getInnerRx</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>a81e1287839541753452b2ebc5fa1c584</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInnerRx</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>a066145df2000284600054dd334e4c8fd</anchor>
      <arglist>(double rx)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getInnerRy</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>ac90b093c6e7e3101d64ee9ce99fb364b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInnerRy</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>a42744e52e0393f43f8a3940a005a4c65</anchor>
      <arglist>(double ry)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual const char **</type>
      <name>getAllowedPropertyKeys</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>a3cc500add699158ae5b2b138fdf6c2bd</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cRingFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>ad031b5759622b6f278ff854b159fffa2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>af2984b5dc1dd434dedade78d2ba1e338</anchor>
      <arglist>(cProperty *property) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>moveLocal</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>acf98d1dcc33d23cf6ab402669c2ee649</anchor>
      <arglist>(double dx, double dy) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const Rectangle &amp;</type>
      <name>getBounds</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>ac3b28beef518ea8914eb46646a4e1339</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBounds</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>a92035a3eb0e082c618fa30344c3e3487</anchor>
      <arglist>(const Rectangle &amp;bounds)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setPosition</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>a9062e4b83b894af848722c332b5d4698</anchor>
      <arglist>(const Point &amp;position, Anchor anchor)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInnerRadius</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>a4baf4e51b59e7886568e99a557f18deb</anchor>
      <arglist>(double r)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getInnerRx</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>a81e1287839541753452b2ebc5fa1c584</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInnerRx</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>a066145df2000284600054dd334e4c8fd</anchor>
      <arglist>(double rx)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getInnerRy</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>ac90b093c6e7e3101d64ee9ce99fb364b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setInnerRy</name>
      <anchorfile>classomnetpp_1_1cRingFigure.html</anchorfile>
      <anchor>a42744e52e0393f43f8a3940a005a4c65</anchor>
      <arglist>(double ry)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cRNG</name>
    <filename>classomnetpp_1_1cRNG.html</filename>
    <base>omnetpp::cObject</base>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classomnetpp_1_1cRNG.html</anchorfile>
      <anchor>a77d4bbed7f7c8525d89b1f40343c2abf</anchor>
      <arglist>(int seedSet, int rngId, int numRngs, int parsimProcId, int parsimNumPartitions, cConfiguration *cfg)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>selfTest</name>
      <anchorfile>classomnetpp_1_1cRNG.html</anchorfile>
      <anchor>acd747cbf82958270214c5679e0d5fe16</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned long</type>
      <name>getNumbersDrawn</name>
      <anchorfile>classomnetpp_1_1cRNG.html</anchorfile>
      <anchor>ae8293721d5ff887cd2914366160d2657</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned long</type>
      <name>intRand</name>
      <anchorfile>classomnetpp_1_1cRNG.html</anchorfile>
      <anchor>a0a0bfa861e97107811ed339a2413fcdc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned long</type>
      <name>intRandMax</name>
      <anchorfile>classomnetpp_1_1cRNG.html</anchorfile>
      <anchor>a4ff355f105eba06f0f1fce543d8a2fd1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned long</type>
      <name>intRand</name>
      <anchorfile>classomnetpp_1_1cRNG.html</anchorfile>
      <anchor>acc0626e672dac4098a5c3ff45a15e8ec</anchor>
      <arglist>(unsigned long n)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>doubleRand</name>
      <anchorfile>classomnetpp_1_1cRNG.html</anchorfile>
      <anchor>a74dd16a97bca74f55dda0b0e4a6ba4b2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>doubleRandNonz</name>
      <anchorfile>classomnetpp_1_1cRNG.html</anchorfile>
      <anchor>a7b4e6ac4fc1ed4b0b79a1af02e2ae3ef</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>doubleRandIncl1</name>
      <anchorfile>classomnetpp_1_1cRNG.html</anchorfile>
      <anchor>a7ab7032b781c3a004b98574321a8e64e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>doubleRandNonzIncl1</name>
      <anchorfile>classomnetpp_1_1cRNG.html</anchorfile>
      <anchor>a70f584668cfe6310036613bc98baa752</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cRunnableEnvir</name>
    <filename>classomnetpp_1_1cRunnableEnvir.html</filename>
    <base>omnetpp::cEnvir</base>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>run</name>
      <anchorfile>classomnetpp_1_1cRunnableEnvir.html</anchorfile>
      <anchor>a1c91572e0fc4fbc293b2ad082bfd722e</anchor>
      <arglist>(int argc, char *argv[], cConfiguration *cfg)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cRuntimeError</name>
    <filename>classomnetpp_1_1cRuntimeError.html</filename>
    <base>omnetpp::cException</base>
    <member kind="function">
      <type></type>
      <name>cRuntimeError</name>
      <anchorfile>classomnetpp_1_1cRuntimeError.html</anchorfile>
      <anchor>a9146e5a31b9728812ac88888f9f02e46</anchor>
      <arglist>(ErrorCodeInt errcode,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cRuntimeError</name>
      <anchorfile>classomnetpp_1_1cRuntimeError.html</anchorfile>
      <anchor>a74c97061a679c1933faa2640fe7dd33b</anchor>
      <arglist>(const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cRuntimeError</name>
      <anchorfile>classomnetpp_1_1cRuntimeError.html</anchorfile>
      <anchor>aec7155dae7d2bd01231fa356d253b212</anchor>
      <arglist>(const cObject *where, ErrorCodeInt errcode,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cRuntimeError</name>
      <anchorfile>classomnetpp_1_1cRuntimeError.html</anchorfile>
      <anchor>a82223345c6a880f377805d02e941913f</anchor>
      <arglist>(const cObject *where, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cRuntimeError</name>
      <anchorfile>classomnetpp_1_1cRuntimeError.html</anchorfile>
      <anchor>a920416b8fb56788af35b50ecb6201e2f</anchor>
      <arglist>(const cRuntimeError &amp;e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cRuntimeError *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cRuntimeError.html</anchorfile>
      <anchor>a7462e02d3288a6ccae1067ddb67ea17b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cScheduler</name>
    <filename>classomnetpp_1_1cScheduler.html</filename>
    <base>omnetpp::cObject</base>
    <base>omnetpp::cISimulationLifecycleListener</base>
    <member kind="function">
      <type></type>
      <name>cScheduler</name>
      <anchorfile>classomnetpp_1_1cScheduler.html</anchorfile>
      <anchor>a0ebfe1164e5a9a350253a0a07985c8b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cScheduler</name>
      <anchorfile>classomnetpp_1_1cScheduler.html</anchorfile>
      <anchor>a9422ac3493264a67944af69d52599dec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cScheduler.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setSimulation</name>
      <anchorfile>classomnetpp_1_1cScheduler.html</anchorfile>
      <anchor>af05d3f812ee308d16da2c235a32b7478</anchor>
      <arglist>(cSimulation *_sim)</arglist>
    </member>
    <member kind="function">
      <type>cSimulation *</type>
      <name>getSimulation</name>
      <anchorfile>classomnetpp_1_1cScheduler.html</anchorfile>
      <anchor>a99d94cf2c52f0f6ec1092691d54b2ba5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>startRun</name>
      <anchorfile>classomnetpp_1_1cScheduler.html</anchorfile>
      <anchor>a05415f31c5ab57917c2937ce21534ff2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endRun</name>
      <anchorfile>classomnetpp_1_1cScheduler.html</anchorfile>
      <anchor>a80bd6066e28414004fb7dac180a4dd4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>executionResumed</name>
      <anchorfile>classomnetpp_1_1cScheduler.html</anchorfile>
      <anchor>a130ad4f8591895dca4bd4eea1365f529</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cEvent *</type>
      <name>guessNextEvent</name>
      <anchorfile>classomnetpp_1_1cScheduler.html</anchorfile>
      <anchor>acbb85a20f0098c3de0d07fc4cc2f060b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual cEvent *</type>
      <name>takeNextEvent</name>
      <anchorfile>classomnetpp_1_1cScheduler.html</anchorfile>
      <anchor>afa1dc4437362821ea9ab52622f35c9bd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>putBackEvent</name>
      <anchorfile>classomnetpp_1_1cScheduler.html</anchorfile>
      <anchor>a0855e62fa831bf9a1267a3d216680492</anchor>
      <arglist>(cEvent *event)=0</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>lifecycleEvent</name>
      <anchorfile>classomnetpp_1_1cScheduler.html</anchorfile>
      <anchor>ac3f8273ae98126597b2235425d17ceb1</anchor>
      <arglist>(SimulationLifecycleEventType eventType, cObject *details) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cSequentialScheduler</name>
    <filename>classomnetpp_1_1cSequentialScheduler.html</filename>
    <base>omnetpp::cScheduler</base>
    <member kind="function">
      <type></type>
      <name>cSequentialScheduler</name>
      <anchorfile>classomnetpp_1_1cSequentialScheduler.html</anchorfile>
      <anchor>a50ab656a1f8455dbb9ed52c22418f2cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cSequentialScheduler.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEvent *</type>
      <name>guessNextEvent</name>
      <anchorfile>classomnetpp_1_1cSequentialScheduler.html</anchorfile>
      <anchor>aad61920dbceba3b87d6f519b03eda684</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cEvent *</type>
      <name>takeNextEvent</name>
      <anchorfile>classomnetpp_1_1cSequentialScheduler.html</anchorfile>
      <anchor>a837fffa44eee49feed07981cf2417eaf</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>putBackEvent</name>
      <anchorfile>classomnetpp_1_1cSequentialScheduler.html</anchorfile>
      <anchor>a98a257214face2b52750b3d0c3a88901</anchor>
      <arglist>(cEvent *event) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cSimpleModule</name>
    <filename>classomnetpp_1_1cSimpleModule.html</filename>
    <base>omnetpp::cModule</base>
    <member kind="function">
      <type></type>
      <name>cSimpleModule</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a8c6d0fbf9abef7662b59dafb4e54975a</anchor>
      <arglist>(unsigned stacksize=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cSimpleModule</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a7e6e59351d93443e24fef6c983b5d986</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleStart</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a06fb2597bbb81e0a49bca4ea61e29f53</anchor>
      <arglist>(simtime_t t) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesActivity</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>aae8b8e2e0f0f1c45129ae9a9a23c13a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTerminated</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a90fd7d6bdbd78900b4ed745d1610852f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>snapshot</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a567aa3edc1996797e644f73a078c39f1</anchor>
      <arglist>(cObject *obj=nullptr, const char *label=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>send</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a5584b421899bb435d1ef83def8c61453</anchor>
      <arglist>(cMessage *msg, int gateid)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>send</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a6e2da4fcb89670e33f311604b2fdb9d0</anchor>
      <arglist>(cMessage *msg, const char *gatename, int gateindex=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>send</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a37ecbeaa29b5f5d344af705ce95b6fb9</anchor>
      <arglist>(cMessage *msg, cGate *outputgate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDelayed</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>aba0a65c43d5a34cc96f62507c8774838</anchor>
      <arglist>(cMessage *msg, simtime_t delay, int gateid)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDelayed</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>ac064dfc9449f525a39fc22df43eb7c43</anchor>
      <arglist>(cMessage *msg, simtime_t delay, const char *gatename, int gateindex=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDelayed</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a2b6e42817c7b264417fbecb9b2fb5e3c</anchor>
      <arglist>(cMessage *msg, simtime_t delay, cGate *outputgate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDirect</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>aa305c57f4feb2678395a6eef9a9ec9d1</anchor>
      <arglist>(cMessage *msg, cModule *mod, const char *inputGateName, int gateIndex=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDirect</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a784a73952901d7659adba4df538f0329</anchor>
      <arglist>(cMessage *msg, cModule *mod, int inputGateId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDirect</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a9916846b08dc4bd1044a21b56eefd030</anchor>
      <arglist>(cMessage *msg, cGate *inputGate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDirect</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a155ae054fa1dd8f9b6c6ab55800b31da</anchor>
      <arglist>(cMessage *msg, simtime_t propagationDelay, simtime_t duration, cModule *mod, const char *inputGateName, int gateIndex=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDirect</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a4cbcb2e5e10cac3ed4371f1ac817bd84</anchor>
      <arglist>(cMessage *msg, simtime_t propagationDelay, simtime_t duration, cModule *mod, int inputGateId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDirect</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a3b1a0fc7aefa75761e3258695b3b892d</anchor>
      <arglist>(cMessage *msg, simtime_t propagationDelay, simtime_t duration, cGate *inputGate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleAt</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a97c57271ca2fc95225ed8514750cac27</anchor>
      <arglist>(simtime_t t, cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>cancelEvent</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>ad87740833c489722abf3608ac7f8b840</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cancelAndDelete</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a770a55d5c681f2e0f369be65c0fb1b73</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>receive</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>afcb9cc09344edb767a9d7a612e89a2a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>receive</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a0b5df98d1ea76c8d6a47784078f120d2</anchor>
      <arglist>(simtime_t timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a425b43cd7042b532f08867c593edb4ab</anchor>
      <arglist>(simtime_t time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>waitAndEnqueue</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>abdf639cccd5b865f3695bdf9b55699e8</anchor>
      <arglist>(simtime_t time, cQueue *queue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endSimulation</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a53805a756170103b885eeb21ce423036</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>halt</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a5e9f808ec016dd288fb88a482ea24802</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>error</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>af22888ea33459a0bcd483ba0c74fd607</anchor>
      <arglist>(const char *format,...) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasStackOverflow</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>af273da78e599915a4fb714af87786bb5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>getStackSize</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a194e299d9386bbefa7a3c20d1032c649</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>getStackUsage</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>aae71114e57a4ee0885ca15a4304be850</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>arrived</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a1ff07b694abcff2b2da1f99b079149fe</anchor>
      <arglist>(cMessage *msg, cGate *ongate, simtime_t t) override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>activity</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a517a5ef25204490292b84fa5bdd12288</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a59e577d050358fd9f737678394505aca</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>activity</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a517a5ef25204490292b84fa5bdd12288</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>handleMessage</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a59e577d050358fd9f737678394505aca</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cSimpleModule</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a8c6d0fbf9abef7662b59dafb4e54975a</anchor>
      <arglist>(unsigned stacksize=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cSimpleModule</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a7e6e59351d93443e24fef6c983b5d986</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleStart</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a06fb2597bbb81e0a49bca4ea61e29f53</anchor>
      <arglist>(simtime_t t) override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesActivity</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>aae8b8e2e0f0f1c45129ae9a9a23c13a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTerminated</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a90fd7d6bdbd78900b4ed745d1610852f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>snapshot</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a567aa3edc1996797e644f73a078c39f1</anchor>
      <arglist>(cObject *obj=nullptr, const char *label=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>send</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a5584b421899bb435d1ef83def8c61453</anchor>
      <arglist>(cMessage *msg, int gateid)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>send</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a6e2da4fcb89670e33f311604b2fdb9d0</anchor>
      <arglist>(cMessage *msg, const char *gatename, int gateindex=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>send</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a37ecbeaa29b5f5d344af705ce95b6fb9</anchor>
      <arglist>(cMessage *msg, cGate *outputgate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDelayed</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>aba0a65c43d5a34cc96f62507c8774838</anchor>
      <arglist>(cMessage *msg, simtime_t delay, int gateid)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDelayed</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>ac064dfc9449f525a39fc22df43eb7c43</anchor>
      <arglist>(cMessage *msg, simtime_t delay, const char *gatename, int gateindex=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDelayed</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a2b6e42817c7b264417fbecb9b2fb5e3c</anchor>
      <arglist>(cMessage *msg, simtime_t delay, cGate *outputgate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDirect</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>aa305c57f4feb2678395a6eef9a9ec9d1</anchor>
      <arglist>(cMessage *msg, cModule *mod, const char *inputGateName, int gateIndex=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDirect</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a784a73952901d7659adba4df538f0329</anchor>
      <arglist>(cMessage *msg, cModule *mod, int inputGateId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDirect</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a9916846b08dc4bd1044a21b56eefd030</anchor>
      <arglist>(cMessage *msg, cGate *inputGate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDirect</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a155ae054fa1dd8f9b6c6ab55800b31da</anchor>
      <arglist>(cMessage *msg, simtime_t propagationDelay, simtime_t duration, cModule *mod, const char *inputGateName, int gateIndex=-1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDirect</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a4cbcb2e5e10cac3ed4371f1ac817bd84</anchor>
      <arglist>(cMessage *msg, simtime_t propagationDelay, simtime_t duration, cModule *mod, int inputGateId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>sendDirect</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a3b1a0fc7aefa75761e3258695b3b892d</anchor>
      <arglist>(cMessage *msg, simtime_t propagationDelay, simtime_t duration, cGate *inputGate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>scheduleAt</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a97c57271ca2fc95225ed8514750cac27</anchor>
      <arglist>(simtime_t t, cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>cancelEvent</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>ad87740833c489722abf3608ac7f8b840</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>cancelAndDelete</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a770a55d5c681f2e0f369be65c0fb1b73</anchor>
      <arglist>(cMessage *msg)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>receive</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>afcb9cc09344edb767a9d7a612e89a2a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cMessage *</type>
      <name>receive</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a0b5df98d1ea76c8d6a47784078f120d2</anchor>
      <arglist>(simtime_t timeout)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>wait</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a425b43cd7042b532f08867c593edb4ab</anchor>
      <arglist>(simtime_t time)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>waitAndEnqueue</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>abdf639cccd5b865f3695bdf9b55699e8</anchor>
      <arglist>(simtime_t time, cQueue *queue)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endSimulation</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a53805a756170103b885eeb21ce423036</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>halt</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a5e9f808ec016dd288fb88a482ea24802</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>error</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>af22888ea33459a0bcd483ba0c74fd607</anchor>
      <arglist>(const char *format,...) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasStackOverflow</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>af273da78e599915a4fb714af87786bb5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>getStackSize</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>a194e299d9386bbefa7a3c20d1032c649</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>getStackUsage</name>
      <anchorfile>classomnetpp_1_1cSimpleModule.html</anchorfile>
      <anchor>aae71114e57a4ee0885ca15a4304be850</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cSimulation</name>
    <filename>classomnetpp_1_1cSimulation.html</filename>
    <base>omnetpp::cNamedObject</base>
    <base protection="private">omnetpp::noncopyable</base>
    <member kind="function">
      <type></type>
      <name>cSimulation</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a76091704d53de40af39c3d8757c1cc8f</anchor>
      <arglist>(const char *name, cEnvir *env)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cSimulation</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a1424e4840f2bc190bb664b2db9cd3803</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getFullPath</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>abebbca7333a87d91fe5274e9879c5532</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>registerComponent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>abbb4a3db6c752da1c899fd53f9c4170f</anchor>
      <arglist>(cComponent *component)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deregisterComponent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ac110f4a99f3317800f4b24ac3ef9e4c5</anchor>
      <arglist>(cComponent *component)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLastComponentId</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>af7d31019693943291fd46b29b3b79831</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getModuleByPath</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ad21862849b0933a7550b55aa90d8620c</anchor>
      <arglist>(const char *modulePath) const</arglist>
    </member>
    <member kind="function">
      <type>cComponent *</type>
      <name>getComponent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a34cfb991d0e0f74d4fafb76dd85dae9d</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getModule</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a4ca7929dc35933f1605becdf1f241023</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>getChannel</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a1d5d05ac26ebb0d13ed2eef9bc122d2a</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSystemModule</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a9db6e55d409aff4f1001d9ba11941185</anchor>
      <arglist>(cModule *module)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getSystemModule</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a5086216af597fe938cbdd99884bf3d24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScheduler</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a00be9d0cd540247f2137f217e2bdad31</anchor>
      <arglist>(cScheduler *scheduler)</arglist>
    </member>
    <member kind="function">
      <type>cScheduler *</type>
      <name>getScheduler</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a5441bcd14d51e9a7cd6d6e9dfaebb67e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFES</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>aa2d75db745e4b8cdf8a66e487fc53372</anchor>
      <arglist>(cFutureEventSet *fes)</arglist>
    </member>
    <member kind="function">
      <type>cFutureEventSet *</type>
      <name>getFES</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>aa759751d7ced9217938893695176d851</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSimulationTimeLimit</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ad13e721d4a0ce3c2fdebc972cde1eb71</anchor>
      <arglist>(simtime_t simTimeLimit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupNetwork</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ad917c484c032be218b9664f885f7616e</anchor>
      <arglist>(cModuleType *networkType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callInitialize</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a42dfdd08efb1052dfbcb44ceba7bab39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callFinish</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>aa2e7c2c87608e09212d593d3c776d3f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteNetwork</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>af965d933c43eda084d5553e31b7a6b03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSimulationStage</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a75f8429cae4a97ecd84ff603b318104c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cModuleType *</type>
      <name>getNetworkType</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a431d106bf475b09b0c5c79d966f9ad81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSimTime</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a4c1ecc24ab6a24137c11e9e4f897b312</anchor>
      <arglist>(simtime_t time)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getSimTime</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a574cd99e779036e5ce2f38a9077fdb1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>eventnumber_t</type>
      <name>getEventNumber</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>aa961710160528cac084b2887dd0d641f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getWarmupPeriod</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a80c81f0fd56068971d34b5310a653193</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWarmupPeriod</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>af257176f9ecb5efe33a35a745253fdd2</anchor>
      <arglist>(simtime_t t)</arglist>
    </member>
    <member kind="function">
      <type>cEvent *</type>
      <name>guessNextEvent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a365cdc16b0df1ed35f43e3052a012d3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cSimpleModule *</type>
      <name>guessNextModule</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a8c6843806896ff546ed02828dc8ccb85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>guessNextSimtime</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a234c9c266e93409977491471c91f1f61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cEvent *</type>
      <name>takeNextEvent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a8e14b88c219d11be15ccf68072ce3bb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putBackEvent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a7f3fafc5fe621f99521994373742aeda</anchor>
      <arglist>(cEvent *event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>executeEvent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a53a579f7e017859873d727e04a3469cd</anchor>
      <arglist>(cEvent *event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transferTo</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a028516c6d50d645f5bddfa6d17df88d0</anchor>
      <arglist>(cSimpleModule *module)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transferToMain</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a2fcad0c41e02a875bf1d8baeefc409ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertEvent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a3372593ec5d4c92a65f5f57ae5c9127e</anchor>
      <arglist>(cEvent *event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContext</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>aa3cec1877861f5a0ec0b49b96cc03481</anchor>
      <arglist>(cComponent *component)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContextType</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a22d6686256ab2e917effb3b54b66d244</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalContext</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a25f92228e559392272906e18d29ac3aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cSimpleModule *</type>
      <name>getActivityModule</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a44a9e8c2b63906704a99931a5aa3f2b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cComponent *</type>
      <name>getContext</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>afdd3614a1bc9ccfe63205d3780f7d6df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getContextType</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a0feb6f1707d6d4cf0fed81237a7a60a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getContextModule</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a3c7a4248758e209ae2750c72aff04e25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cSimpleModule *</type>
      <name>getContextSimpleModule</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a59ba2738f72ce62fdc199f323063a6e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>requestTrapOnNextEvent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a199587e4d00b5dcfc24800ea38c7d82b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearTrapOnNextEvent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>aa99eabf3f0749393de18bc4d1c680e7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTrapOnNextEventRequested</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a465c2effa604b3cc7c5f26da15ff7fe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>getUniqueNumber</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a2e6e5f7952dfca326b58f79ec1a0c77b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>snapshot</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a0a95717865f6406c5d11937a6b3c14a4</anchor>
      <arglist>(cObject *obj, const char *label)</arglist>
    </member>
    <member kind="function">
      <type>cFingerprintCalculator *</type>
      <name>getFingerprintCalculator</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a56494b78793e6e1d0a502b4081d3b7cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFingerprintCalculator</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a76488447ca154623fe848baff14d76b3</anchor>
      <arglist>(cFingerprintCalculator *fingerprint)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>loadNedSourceFolder</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a31cce6908e2628da2c1a702bc9226234</anchor>
      <arglist>(const char *folderName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>loadNedFile</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>af18d202d2da043e2d8cf9fe0b100339e</anchor>
      <arglist>(const char *nedFilename, const char *expectedPackage=nullptr, bool isXML=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>loadNedText</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ab1905dabcb45e796254c43c685ea8443</anchor>
      <arglist>(const char *name, const char *nedText, const char *expectedPackage=nullptr, bool isXML=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>doneLoadingNedFiles</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ab7d9a45cc3204eaf2f536ecf8a4e2ccd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getNedPackageForFolder</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a752fd7f817d82897840bf0e372a662f5</anchor>
      <arglist>(const char *folder)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cSimulation</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a76091704d53de40af39c3d8757c1cc8f</anchor>
      <arglist>(const char *name, cEnvir *env)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cSimulation</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a1424e4840f2bc190bb664b2db9cd3803</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getFullPath</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>abebbca7333a87d91fe5274e9879c5532</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>cEnvir *</type>
      <name>getEnvir</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a0f36ad85f13c1966c5a94f4572309621</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cSimulation *</type>
      <name>getActiveSimulation</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ae677cba64809c8914558eed1bc31c1c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cEnvir *</type>
      <name>getActiveEnvir</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a6944156bfb54ed66b3a6206608975f00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setActiveSimulation</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a159a200fc5ea22666e5eceb7e22e53dd</anchor>
      <arglist>(cSimulation *sim)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setStaticEnvir</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a6f1ffc6ef2a5cd20c0bb82d56b019ed5</anchor>
      <arglist>(cEnvir *env)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static cEnvir *</type>
      <name>getStaticEnvir</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a2efd8a63eda423d420f8042d0edf2834</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>registerComponent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>abbb4a3db6c752da1c899fd53f9c4170f</anchor>
      <arglist>(cComponent *component)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deregisterComponent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ac110f4a99f3317800f4b24ac3ef9e4c5</anchor>
      <arglist>(cComponent *component)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLastComponentId</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>af7d31019693943291fd46b29b3b79831</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getModuleByPath</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ad21862849b0933a7550b55aa90d8620c</anchor>
      <arglist>(const char *modulePath) const</arglist>
    </member>
    <member kind="function">
      <type>cComponent *</type>
      <name>getComponent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a34cfb991d0e0f74d4fafb76dd85dae9d</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getModule</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a4ca7929dc35933f1605becdf1f241023</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>cChannel *</type>
      <name>getChannel</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a1d5d05ac26ebb0d13ed2eef9bc122d2a</anchor>
      <arglist>(int id) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSystemModule</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a9db6e55d409aff4f1001d9ba11941185</anchor>
      <arglist>(cModule *module)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getSystemModule</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a5086216af597fe938cbdd99884bf3d24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>loadNedSourceFolder</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a31cce6908e2628da2c1a702bc9226234</anchor>
      <arglist>(const char *folderName)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>loadNedFile</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>af18d202d2da043e2d8cf9fe0b100339e</anchor>
      <arglist>(const char *nedFilename, const char *expectedPackage=nullptr, bool isXML=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>loadNedText</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ab1905dabcb45e796254c43c685ea8443</anchor>
      <arglist>(const char *name, const char *nedText, const char *expectedPackage=nullptr, bool isXML=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>doneLoadingNedFiles</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ab7d9a45cc3204eaf2f536ecf8a4e2ccd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>getNedPackageForFolder</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a752fd7f817d82897840bf0e372a662f5</anchor>
      <arglist>(const char *folder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setScheduler</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a00be9d0cd540247f2137f217e2bdad31</anchor>
      <arglist>(cScheduler *scheduler)</arglist>
    </member>
    <member kind="function">
      <type>cScheduler *</type>
      <name>getScheduler</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a5441bcd14d51e9a7cd6d6e9dfaebb67e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFES</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>aa2d75db745e4b8cdf8a66e487fc53372</anchor>
      <arglist>(cFutureEventSet *fes)</arglist>
    </member>
    <member kind="function">
      <type>cFutureEventSet *</type>
      <name>getFES</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>aa759751d7ced9217938893695176d851</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSimulationTimeLimit</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ad13e721d4a0ce3c2fdebc972cde1eb71</anchor>
      <arglist>(simtime_t simTimeLimit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupNetwork</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>ad917c484c032be218b9664f885f7616e</anchor>
      <arglist>(cModuleType *networkType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callInitialize</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a42dfdd08efb1052dfbcb44ceba7bab39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>callFinish</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>aa2e7c2c87608e09212d593d3c776d3f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteNetwork</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>af965d933c43eda084d5553e31b7a6b03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSimulationStage</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a75f8429cae4a97ecd84ff603b318104c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cModuleType *</type>
      <name>getNetworkType</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a431d106bf475b09b0c5c79d966f9ad81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSimTime</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a4c1ecc24ab6a24137c11e9e4f897b312</anchor>
      <arglist>(simtime_t time)</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getSimTime</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a574cd99e779036e5ce2f38a9077fdb1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>eventnumber_t</type>
      <name>getEventNumber</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>aa961710160528cac084b2887dd0d641f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>simtime_t_cref</type>
      <name>getWarmupPeriod</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a80c81f0fd56068971d34b5310a653193</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWarmupPeriod</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>af257176f9ecb5efe33a35a745253fdd2</anchor>
      <arglist>(simtime_t t)</arglist>
    </member>
    <member kind="function">
      <type>cEvent *</type>
      <name>guessNextEvent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a365cdc16b0df1ed35f43e3052a012d3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cSimpleModule *</type>
      <name>guessNextModule</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a8c6843806896ff546ed02828dc8ccb85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>simtime_t</type>
      <name>guessNextSimtime</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a234c9c266e93409977491471c91f1f61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cEvent *</type>
      <name>takeNextEvent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a8e14b88c219d11be15ccf68072ce3bb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>putBackEvent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a7f3fafc5fe621f99521994373742aeda</anchor>
      <arglist>(cEvent *event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>executeEvent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a53a579f7e017859873d727e04a3469cd</anchor>
      <arglist>(cEvent *event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transferTo</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a028516c6d50d645f5bddfa6d17df88d0</anchor>
      <arglist>(cSimpleModule *module)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transferToMain</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a2fcad0c41e02a875bf1d8baeefc409ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertEvent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a3372593ec5d4c92a65f5f57ae5c9127e</anchor>
      <arglist>(cEvent *event)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContext</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>aa3cec1877861f5a0ec0b49b96cc03481</anchor>
      <arglist>(cComponent *component)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setContextType</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a22d6686256ab2e917effb3b54b66d244</anchor>
      <arglist>(int type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGlobalContext</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a25f92228e559392272906e18d29ac3aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cSimpleModule *</type>
      <name>getActivityModule</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a44a9e8c2b63906704a99931a5aa3f2b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cComponent *</type>
      <name>getContext</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>afdd3614a1bc9ccfe63205d3780f7d6df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getContextType</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a0feb6f1707d6d4cf0fed81237a7a60a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getContextModule</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a3c7a4248758e209ae2750c72aff04e25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cSimpleModule *</type>
      <name>getContextSimpleModule</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a59ba2738f72ce62fdc199f323063a6e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>requestTrapOnNextEvent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a199587e4d00b5dcfc24800ea38c7d82b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearTrapOnNextEvent</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>aa99eabf3f0749393de18bc4d1c680e7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTrapOnNextEventRequested</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a465c2effa604b3cc7c5f26da15ff7fe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>getUniqueNumber</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a2e6e5f7952dfca326b58f79ec1a0c77b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>snapshot</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a0a95717865f6406c5d11937a6b3c14a4</anchor>
      <arglist>(cObject *obj, const char *label)</arglist>
    </member>
    <member kind="function">
      <type>cFingerprintCalculator *</type>
      <name>getFingerprintCalculator</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a56494b78793e6e1d0a502b4081d3b7cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFingerprintCalculator</name>
      <anchorfile>classomnetpp_1_1cSimulation.html</anchorfile>
      <anchor>a76488447ca154623fe848baff14d76b3</anchor>
      <arglist>(cFingerprintCalculator *fingerprint)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cSingleFingerprintCalculator</name>
    <filename>classomnetpp_1_1cSingleFingerprintCalculator.html</filename>
    <base>omnetpp::cFingerprintCalculator</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cSingleFingerprintCalculator *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cSingleFingerprintCalculator.html</anchorfile>
      <anchor>a2cfdecd52dc8fd0ac0932f03f5764f9f</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cSingleFingerprintCalculator.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>initialize</name>
      <anchorfile>classomnetpp_1_1cSingleFingerprintCalculator.html</anchorfile>
      <anchor>ab54515c9f3e8197ec1f43d1be8707320</anchor>
      <arglist>(const char *expectedFingerprints, cConfiguration *cfg, int index=-1) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>checkFingerprint</name>
      <anchorfile>classomnetpp_1_1cSingleFingerprintCalculator.html</anchorfile>
      <anchor>a69c20e27513e7f88c5ad35a1eb603e0d</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cStackCleanupException</name>
    <filename>classomnetpp_1_1cStackCleanupException.html</filename>
    <base>omnetpp::cException</base>
    <member kind="function">
      <type></type>
      <name>cStackCleanupException</name>
      <anchorfile>classomnetpp_1_1cStackCleanupException.html</anchorfile>
      <anchor>acdab754a351d87c39786d9220662c8d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cStackCleanupException</name>
      <anchorfile>classomnetpp_1_1cStackCleanupException.html</anchorfile>
      <anchor>a49874eed72f184fcfebf5546c12ee002</anchor>
      <arglist>(const cStackCleanupException &amp;e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cStackCleanupException *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cStackCleanupException.html</anchorfile>
      <anchor>a042aa977aa23e8cd33d70c21c0c3707c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isError</name>
      <anchorfile>classomnetpp_1_1cStackCleanupException.html</anchorfile>
      <anchor>ad9b0bf983020b113eb43bded6e480887</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cStatistic</name>
    <filename>classomnetpp_1_1cStatistic.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function">
      <type></type>
      <name>cStatistic</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a906cbbec60872b39d9a90d6983d1a52f</anchor>
      <arglist>(const cStatistic &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cStatistic</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>ad527be2a2d66ea878b9bdc912a70cc1c</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cStatistic</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a14b0ca65d6a043d3bcc04b93ce535327</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cStatistic &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a03dffdcf8762a5cea186f8e18fd11e5a</anchor>
      <arglist>(const cStatistic &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isWeighted</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a130bb90b03cf704b70ee07433136311d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a44ae7468613c0838407990d1a3255218</anchor>
      <arglist>(double value)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a0d0363624442028cb0d8e74d7bf58d80</anchor>
      <arglist>(SimTime value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collectWeighted</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a01045d34500ae8ac212baa2cd32b545a</anchor>
      <arglist>(double value, double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collectWeighted</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>af467ba008376b5ab44c191ee47d02676</anchor>
      <arglist>(SimTime value, double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collectWeighted</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a6eb70a487930ee8d3f79f3e5353fc77c</anchor>
      <arglist>(double value, SimTime weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collectWeighted</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a9700b686c34549fc508fb287ff3b378d</anchor>
      <arglist>(SimTime value, SimTime weight)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a9476df6128e559dac29db2b2bb8c7620</anchor>
      <arglist>(const cStatistic *other)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a5eeb94d22b8366d1b68d0614384802fe</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64_t</type>
      <name>getCount</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a3f8e05989892c8062ae3896d59a69a7a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getSum</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a43130517ba026dada46195f8f071dc62</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getSqrSum</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>aeaacc7b4d2217e23096e18dfc973d072</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMin</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a3b95cc430e674c3acdb8003391727989</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMax</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>acdcad6b8b5abddbab00d2a04d5660303</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMean</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>ace6b8c60633a0d3790e35d7dff0a6b4f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getStddev</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>abb98fb4c9a26bda98d8a9c1cb1512904</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getVariance</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a73f51edfc0bb8a4a9f9d54ec545f33aa</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getSumWeights</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>abf841ee7d221372308c84c5e4f1c14f1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getWeightedSum</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a947633cd16ca763308dd0a39c4258073</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getSqrSumWeights</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a9755e3573e82c3abc1ca18adae93b132</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getWeightedSqrSum</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a084a394e57ebffa9899b11c63e63c221</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a01b5de02f9cde7ca692b650079d2aa94</anchor>
      <arglist>(FILE *) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a4ce141f961eca6bcc35ef6907cbfd887</anchor>
      <arglist>(FILE *)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>record</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>aa670500bfed420e9dc873464a0abaec1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordWithUnit</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a5ca8a0fd1c8c7b40ef8bf69eb62cf922</anchor>
      <arglist>(const char *unit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordAs</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>abb38184f169f5f1fbbbc4891e9b71158</anchor>
      <arglist>(const char *name, const char *unit=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED double</type>
      <name>getWeights</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a3ac567338b2c8ddadbe1a7a8cc66a6a7</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED void</type>
      <name>collect2</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>affa678aa83b58a0d86f59ac6c2889892</anchor>
      <arglist>(double value, double weight) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED void</type>
      <name>collect2</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a076e3f70fc4c3bd529c3f68745076704</anchor>
      <arglist>(SimTime value, double weight) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED void</type>
      <name>collect2</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a123d4c9a5aabcf5dd6ac7ee547089853</anchor>
      <arglist>(double value, SimTime weight) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED void</type>
      <name>collect2</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a1ec67563397f9d093bcea0427614ec27</anchor>
      <arglist>(SimTime value, SimTime weight) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED double</type>
      <name>random</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a31357d1ebc649582f55c5e7e0e240a08</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED void</type>
      <name>clearResult</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a2e379743267a1ac0b297d1e1d9848642</anchor>
      <arglist>() final</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cStatistic</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a906cbbec60872b39d9a90d6983d1a52f</anchor>
      <arglist>(const cStatistic &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cStatistic</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>ad527be2a2d66ea878b9bdc912a70cc1c</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cStatistic</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a14b0ca65d6a043d3bcc04b93ce535327</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cStatistic &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a03dffdcf8762a5cea186f8e18fd11e5a</anchor>
      <arglist>(const cStatistic &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>isWeighted</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a130bb90b03cf704b70ee07433136311d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a44ae7468613c0838407990d1a3255218</anchor>
      <arglist>(double value)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a0d0363624442028cb0d8e74d7bf58d80</anchor>
      <arglist>(SimTime value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collectWeighted</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a01045d34500ae8ac212baa2cd32b545a</anchor>
      <arglist>(double value, double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collectWeighted</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>af467ba008376b5ab44c191ee47d02676</anchor>
      <arglist>(SimTime value, double weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collectWeighted</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a6eb70a487930ee8d3f79f3e5353fc77c</anchor>
      <arglist>(double value, SimTime weight)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collectWeighted</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a9700b686c34549fc508fb287ff3b378d</anchor>
      <arglist>(SimTime value, SimTime weight)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a9476df6128e559dac29db2b2bb8c7620</anchor>
      <arglist>(const cStatistic *other)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a5eeb94d22b8366d1b68d0614384802fe</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int64_t</type>
      <name>getCount</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a3f8e05989892c8062ae3896d59a69a7a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getSum</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a43130517ba026dada46195f8f071dc62</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getSqrSum</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>aeaacc7b4d2217e23096e18dfc973d072</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMin</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a3b95cc430e674c3acdb8003391727989</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMax</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>acdcad6b8b5abddbab00d2a04d5660303</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getMean</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>ace6b8c60633a0d3790e35d7dff0a6b4f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getStddev</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>abb98fb4c9a26bda98d8a9c1cb1512904</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getVariance</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a73f51edfc0bb8a4a9f9d54ec545f33aa</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getSumWeights</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>abf841ee7d221372308c84c5e4f1c14f1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getWeightedSum</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a947633cd16ca763308dd0a39c4258073</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getSqrSumWeights</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a9755e3573e82c3abc1ca18adae93b132</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>getWeightedSqrSum</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a084a394e57ebffa9899b11c63e63c221</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a01b5de02f9cde7ca692b650079d2aa94</anchor>
      <arglist>(FILE *) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a4ce141f961eca6bcc35ef6907cbfd887</anchor>
      <arglist>(FILE *)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>record</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>aa670500bfed420e9dc873464a0abaec1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordWithUnit</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a5ca8a0fd1c8c7b40ef8bf69eb62cf922</anchor>
      <arglist>(const char *unit)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>recordAs</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>abb38184f169f5f1fbbbc4891e9b71158</anchor>
      <arglist>(const char *name, const char *unit=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED double</type>
      <name>getWeights</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a3ac567338b2c8ddadbe1a7a8cc66a6a7</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED void</type>
      <name>collect2</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>affa678aa83b58a0d86f59ac6c2889892</anchor>
      <arglist>(double value, double weight) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED void</type>
      <name>collect2</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a076e3f70fc4c3bd529c3f68745076704</anchor>
      <arglist>(SimTime value, double weight) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED void</type>
      <name>collect2</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a123d4c9a5aabcf5dd6ac7ee547089853</anchor>
      <arglist>(double value, SimTime weight) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED void</type>
      <name>collect2</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a1ec67563397f9d093bcea0427614ec27</anchor>
      <arglist>(SimTime value, SimTime weight) final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED double</type>
      <name>random</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a31357d1ebc649582f55c5e7e0e240a08</anchor>
      <arglist>() const final</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual _OPPDEPRECATED void</type>
      <name>clearResult</name>
      <anchorfile>classomnetpp_1_1cStatistic.html</anchorfile>
      <anchor>a2e379743267a1ac0b297d1e1d9848642</anchor>
      <arglist>() final</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cStatisticBuilder</name>
    <filename>classomnetpp_1_1cStatisticBuilder.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addResultRecorders</name>
      <anchorfile>classomnetpp_1_1cStatisticBuilder.html</anchorfile>
      <anchor>acba99237fd721adac9046e8a26e042a7</anchor>
      <arglist>(cComponent *component)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addResultRecorders</name>
      <anchorfile>classomnetpp_1_1cStatisticBuilder.html</anchorfile>
      <anchor>ab8688ff43ebb9a6c8d843a7c795f5ffc</anchor>
      <arglist>(cComponent *component, simsignal_t signal, const char *statisticName, cProperty *statisticTemplateProperty)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cStdDev</name>
    <filename>classomnetpp_1_1cStdDev.html</filename>
    <base>omnetpp::cStatistic</base>
    <member kind="function">
      <type></type>
      <name>cStdDev</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a2ae77fc06cf334d34cf6d3540be63aa9</anchor>
      <arglist>(const cStdDev &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cStdDev</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a4b465d86fc4a9e2ab7957ac65e0fbf3b</anchor>
      <arglist>(const char *name=nullptr, bool weighted=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cStdDev</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a07a678b6d637cda98062645662588fa2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cStdDev &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>aacdbf0a762b8389c487873db05b939c4</anchor>
      <arglist>(const cStdDev &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cStdDev *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>aff1e6b12360a5fac23977b230601eb7d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isWeighted</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a37c6e564081f757e842a559135b3d22d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a3b715fbb1b1a0b5079591510e4015d0b</anchor>
      <arglist>(double value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collectWeighted</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a26fb09e47da0aceac9ffdce8555864be</anchor>
      <arglist>(double value, double weight) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>acc50284181a512fdb51eeb9a6107f9f1</anchor>
      <arglist>(const cStatistic *other) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>getCount</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a97b0bd7f0ee6e5954e3b98deca3f0435</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSum</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a3a2ac6fc99ba02c34f591306ca88178d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSqrSum</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>af38addc326c78ccc4a3505099386daa6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMin</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>aa8e605b20e4a307c2d3b03cbb779b8a4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMax</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a9f1ee82549f2d867bd86884cb106f3c4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMean</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>ae11e97a5aefae9c8acd6562fb278eab6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getStddev</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>ae561ceb0d18928db3df8c265ac762d42</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getVariance</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>ad0b2b24b1464e79e607416340b2f7368</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSumWeights</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a924d4c7c54c95b999009043748df2a78</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getWeightedSum</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>af74de5b0165d5ef4dbb71d31578947f2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSqrSumWeights</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a4ba2ceca0926a1d4c6f0030c0cb1dc4d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getWeightedSqrSum</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>ae626287193bdc0e2886a12e3244d5ba3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a8ab0745de7fefce72d67f99f3931a3e4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a01e6d44b83e335cfe73d46c676495711</anchor>
      <arglist>(FILE *) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a395dbbaaff2a5685b2b4b6633bda651f</anchor>
      <arglist>(FILE *) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cStdDev</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a2ae77fc06cf334d34cf6d3540be63aa9</anchor>
      <arglist>(const cStdDev &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cStdDev</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a4b465d86fc4a9e2ab7957ac65e0fbf3b</anchor>
      <arglist>(const char *name=nullptr, bool weighted=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cStdDev</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a07a678b6d637cda98062645662588fa2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cStdDev &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>aacdbf0a762b8389c487873db05b939c4</anchor>
      <arglist>(const cStdDev &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cStdDev *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>aff1e6b12360a5fac23977b230601eb7d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isWeighted</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a37c6e564081f757e842a559135b3d22d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collect</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a3b715fbb1b1a0b5079591510e4015d0b</anchor>
      <arglist>(double value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collectWeighted</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a26fb09e47da0aceac9ffdce8555864be</anchor>
      <arglist>(double value, double weight) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>merge</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>acc50284181a512fdb51eeb9a6107f9f1</anchor>
      <arglist>(const cStatistic *other) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int64_t</type>
      <name>getCount</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a97b0bd7f0ee6e5954e3b98deca3f0435</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSum</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a3a2ac6fc99ba02c34f591306ca88178d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSqrSum</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>af38addc326c78ccc4a3505099386daa6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMin</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>aa8e605b20e4a307c2d3b03cbb779b8a4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMax</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a9f1ee82549f2d867bd86884cb106f3c4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getMean</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>ae11e97a5aefae9c8acd6562fb278eab6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getStddev</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>ae561ceb0d18928db3df8c265ac762d42</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getVariance</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>ad0b2b24b1464e79e607416340b2f7368</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSumWeights</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a924d4c7c54c95b999009043748df2a78</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getWeightedSum</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>af74de5b0165d5ef4dbb71d31578947f2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getSqrSumWeights</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a4ba2ceca0926a1d4c6f0030c0cb1dc4d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getWeightedSqrSum</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>ae626287193bdc0e2886a12e3244d5ba3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a8ab0745de7fefce72d67f99f3931a3e4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a01e6d44b83e335cfe73d46c676495711</anchor>
      <arglist>(FILE *) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cStdDev.html</anchorfile>
      <anchor>a395dbbaaff2a5685b2b4b6633bda651f</anchor>
      <arglist>(FILE *) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cStringParImpl</name>
    <filename>classomnetpp_1_1cStringParImpl.html</filename>
    <base>omnetpp::cParImpl</base>
    <member kind="function">
      <type></type>
      <name>cStringParImpl</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a2cb4abc1839e30eb6657ad5a4376146c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cStringParImpl</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>ac1fb9e0e71edf276a18fb811102ef5c4</anchor>
      <arglist>(const cStringParImpl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cStringParImpl</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>aec3b3ed4003d52ed8b6faf2c2a4c72b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>ace8ca5198448c87a385358b050431546</anchor>
      <arglist>(const cStringParImpl &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cStringParImpl *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>ab973f04a0d24164a7c0e9549550d0d1d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>ae6d272d4af05edaa7725ad60b1ec2104</anchor>
      <arglist>(bool b) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIntValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a588e175407a2d81f79cec520e7044d20</anchor>
      <arglist>(intpar_t l) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a45f547947e811beaeec71863a1675ba1</anchor>
      <arglist>(double d) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a9e63a9930c4106d99ab35a8645698a27</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a0abe99195e911d2173519bf8064f5af2</anchor>
      <arglist>(cXMLElement *node) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a80af423d87336c25c28fe91e6bac674b</anchor>
      <arglist>(cExpression *e) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>aaed8a179966631fb8c64b1f963d0b685</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual intpar_t</type>
      <name>intValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>ac2b650859b0d6cc642bd26aa6af780ff</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a3438e6138743a93a08dde61c9411c711</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>af3bb05e9109c2f97e71d71e60548a1e4</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a7d0617a09188f05593e7036a73723857</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a6b6dfe5cc802e0a3a971ed99d8908d95</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a5f09bfa40706213278e1ea6a6e4a8d69</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>af4400fbe676882b9264a856cf952559c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>af862a39478bb95377b2734d86a30083b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>convertToConst</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a57c1d4c81cdb80b4bc12201a1a804c53</anchor>
      <arglist>(cComponent *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>ac880f5e94434ade08fbe54634fe95378</anchor>
      <arglist>(const char *text) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a9ed037b0e3f46f4d1d4d0f44041adf45</anchor>
      <arglist>(const cParImpl *other) const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cStringParImpl</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a2cb4abc1839e30eb6657ad5a4376146c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cStringParImpl</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>ac1fb9e0e71edf276a18fb811102ef5c4</anchor>
      <arglist>(const cStringParImpl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cStringParImpl</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>aec3b3ed4003d52ed8b6faf2c2a4c72b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>ace8ca5198448c87a385358b050431546</anchor>
      <arglist>(const cStringParImpl &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cStringParImpl *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>ab973f04a0d24164a7c0e9549550d0d1d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>ae6d272d4af05edaa7725ad60b1ec2104</anchor>
      <arglist>(bool b) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIntValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a588e175407a2d81f79cec520e7044d20</anchor>
      <arglist>(intpar_t l) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a45f547947e811beaeec71863a1675ba1</anchor>
      <arglist>(double d) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a9e63a9930c4106d99ab35a8645698a27</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a0abe99195e911d2173519bf8064f5af2</anchor>
      <arglist>(cXMLElement *node) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a80af423d87336c25c28fe91e6bac674b</anchor>
      <arglist>(cExpression *e) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>aaed8a179966631fb8c64b1f963d0b685</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual intpar_t</type>
      <name>intValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>ac2b650859b0d6cc642bd26aa6af780ff</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a3438e6138743a93a08dde61c9411c711</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>af3bb05e9109c2f97e71d71e60548a1e4</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a7d0617a09188f05593e7036a73723857</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a6b6dfe5cc802e0a3a971ed99d8908d95</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a5f09bfa40706213278e1ea6a6e4a8d69</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>af4400fbe676882b9264a856cf952559c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>af862a39478bb95377b2734d86a30083b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>convertToConst</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a57c1d4c81cdb80b4bc12201a1a804c53</anchor>
      <arglist>(cComponent *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>ac880f5e94434ade08fbe54634fe95378</anchor>
      <arglist>(const char *text) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cStringParImpl.html</anchorfile>
      <anchor>a9ed037b0e3f46f4d1d4d0f44041adf45</anchor>
      <arglist>(const cParImpl *other) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cStringPool</name>
    <filename>classomnetpp_1_1cStringPool.html</filename>
    <member kind="function">
      <type></type>
      <name>cStringPool</name>
      <anchorfile>classomnetpp_1_1cStringPool.html</anchorfile>
      <anchor>a4310e93371682fb37a017fe1f42cc705</anchor>
      <arglist>(const char *poolName=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cStringPool</name>
      <anchorfile>classomnetpp_1_1cStringPool.html</anchorfile>
      <anchor>a19452bb3379c340a2770cda44eddc63e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>get</name>
      <anchorfile>classomnetpp_1_1cStringPool.html</anchorfile>
      <anchor>a8527988e6046ba63525684c3ec1accea</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>peek</name>
      <anchorfile>classomnetpp_1_1cStringPool.html</anchorfile>
      <anchor>a120b5071d2f2c2d92e9ef80af81c442f</anchor>
      <arglist>(const char *s) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>classomnetpp_1_1cStringPool.html</anchorfile>
      <anchor>a4e0e3a807503027c83026a8837f4b0c8</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dump</name>
      <anchorfile>classomnetpp_1_1cStringPool.html</anchorfile>
      <anchor>af1e6a5fb477a95a876e86ceadf065ffd</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cStringTokenizer</name>
    <filename>classomnetpp_1_1cStringTokenizer.html</filename>
    <member kind="function">
      <type></type>
      <name>cStringTokenizer</name>
      <anchorfile>classomnetpp_1_1cStringTokenizer.html</anchorfile>
      <anchor>a6f954c95bf98f819d9a9512fbe3ab796</anchor>
      <arglist>(const char *str, const char *delimiters=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cStringTokenizer</name>
      <anchorfile>classomnetpp_1_1cStringTokenizer.html</anchorfile>
      <anchor>ac696072d951d5ab987f273492d483f58</anchor>
      <arglist>(const cStringTokenizer &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~cStringTokenizer</name>
      <anchorfile>classomnetpp_1_1cStringTokenizer.html</anchorfile>
      <anchor>aead440e695e66ab43c100bda82d4b828</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cStringTokenizer &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cStringTokenizer.html</anchorfile>
      <anchor>ae6aaf4f88568d5c049bf02c5e0e096d0</anchor>
      <arglist>(const cStringTokenizer &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDelimiter</name>
      <anchorfile>classomnetpp_1_1cStringTokenizer.html</anchorfile>
      <anchor>ab5f58506b70285300efe1c22ae437826</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasMoreTokens</name>
      <anchorfile>classomnetpp_1_1cStringTokenizer.html</anchorfile>
      <anchor>af690597352ca6f48a9f86b527cd754da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>nextToken</name>
      <anchorfile>classomnetpp_1_1cStringTokenizer.html</anchorfile>
      <anchor>a0f9986333b38318adb056bc0ed1ab152</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>asVector</name>
      <anchorfile>classomnetpp_1_1cStringTokenizer.html</anchorfile>
      <anchor>a0e06c328a31867fae2b91e405c76ef45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt;</type>
      <name>asIntVector</name>
      <anchorfile>classomnetpp_1_1cStringTokenizer.html</anchorfile>
      <anchor>a8b0f1f108f64813d1a76b9a5cc79356f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt;</type>
      <name>asDoubleVector</name>
      <anchorfile>classomnetpp_1_1cStringTokenizer.html</anchorfile>
      <anchor>a3606dd540ad9a8ca914b2fdd582d79b1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cStudentT</name>
    <filename>classomnetpp_1_1cStudentT.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cStudentT *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cStudentT.html</anchorfile>
      <anchor>adc226cccbacf1be075581ba297a3f948</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cStudentT.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cStudentT.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cStudentT *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cStudentT.html</anchorfile>
      <anchor>adc226cccbacf1be075581ba297a3f948</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cStudentT.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cStudentT.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cTerminationException</name>
    <filename>classomnetpp_1_1cTerminationException.html</filename>
    <base>omnetpp::cException</base>
    <member kind="function">
      <type></type>
      <name>cTerminationException</name>
      <anchorfile>classomnetpp_1_1cTerminationException.html</anchorfile>
      <anchor>aa99c18893350c8941df67458fca219c0</anchor>
      <arglist>(ErrorCodeInt errcode,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cTerminationException</name>
      <anchorfile>classomnetpp_1_1cTerminationException.html</anchorfile>
      <anchor>a7ab34e2860822705491adb6284c714a5</anchor>
      <arglist>(const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cTerminationException</name>
      <anchorfile>classomnetpp_1_1cTerminationException.html</anchorfile>
      <anchor>a43c19fa207ec7ac1b61bf073234a5973</anchor>
      <arglist>(const cTerminationException &amp;e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cTerminationException *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cTerminationException.html</anchorfile>
      <anchor>a8f2513d574b7d1738f0b7170f75cb6f9</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isError</name>
      <anchorfile>classomnetpp_1_1cTerminationException.html</anchorfile>
      <anchor>ad9b0bf983020b113eb43bded6e480887</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cTextFigure</name>
    <filename>classomnetpp_1_1cTextFigure.html</filename>
    <base>omnetpp::cAbstractTextFigure</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cTextFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cTextFigure.html</anchorfile>
      <anchor>a14f8dc192ad922979b02f95bd9f2efd5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cTextFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cTextFigure *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cTextFigure.html</anchorfile>
      <anchor>a14f8dc192ad922979b02f95bd9f2efd5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getRendererClassName</name>
      <anchorfile>classomnetpp_1_1cTextFigure.html</anchorfile>
      <anchor>a9dfc13f0996a1c3f8ab03f0caea6426b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cTimestampedValue</name>
    <filename>classomnetpp_1_1cTimestampedValue.html</filename>
    <base>omnetpp::cITimestampedValue</base>
    <base>omnetpp::cObject</base>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t_cref</type>
      <name>getTimestamp</name>
      <anchorfile>classomnetpp_1_1cTimestampedValue.html</anchorfile>
      <anchor>a594b6c0b62695662c322a588b5973f6a</anchor>
      <arglist>(simsignal_t signalID) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimsignalType</type>
      <name>getValueType</name>
      <anchorfile>classomnetpp_1_1cTimestampedValue.html</anchorfile>
      <anchor>a46af353e9aa4c22d2e5121f0f2ee0d65</anchor>
      <arglist>(simsignal_t signalID) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cTopology</name>
    <filename>classomnetpp_1_1cTopology.html</filename>
    <base>omnetpp::cOwnedObject</base>
    <class kind="class">omnetpp::cTopology::Link</class>
    <class kind="class">omnetpp::cTopology::LinkIn</class>
    <class kind="class">omnetpp::cTopology::LinkOut</class>
    <class kind="class">omnetpp::cTopology::Node</class>
    <class kind="class">omnetpp::cTopology::Predicate</class>
    <member kind="function">
      <type></type>
      <name>cTopology</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>acd4897610cdb4a21656f34ce78a01471</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cTopology</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a5cfa6dd0a490855d87cab1f6f2546721</anchor>
      <arglist>(const cTopology &amp;topo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cTopology</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a3eaf190693c38b022c64cd70d0e83625</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cTopology &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a01552f5bc4c5377e8f0be8a4bff6fc0b</anchor>
      <arglist>(const cTopology &amp;topo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cTopology *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a17e85b922af137a41b4e9fe4122fd4db</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>extractFromNetwork</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a20978b403df109704fe94e59516448ef</anchor>
      <arglist>(bool(*selfunc)(cModule *, void *), void *userdata=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>extractFromNetwork</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>ab2ec53f63a05b8678c203e254ac3bcfd</anchor>
      <arglist>(Predicate *predicate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>extractByModulePath</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>ac14cd4eac16540ed979ea73c8edb3f1e</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;fullPathPatterns)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>extractByNedTypeName</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>aaedf2f68eab98cb0b6fe6e656518f371</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;nedTypeNames)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>extractByProperty</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a3e7a0cdef48da852bee702b61b7fccca</anchor>
      <arglist>(const char *propertyName, const char *value=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>extractByParameter</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a3de025db53954d3b375ae91a8cb70ac7</anchor>
      <arglist>(const char *paramName, const char *paramValue=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>aae048282c7011eedc2e0492f6421ea73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>addNode</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>abe33a18cfe1b5a59892f03d873a0aa38</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteNode</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a10d04d4577ce859f166c1483ce52b1ac</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addLink</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a19cedd1bbb3c57e7d4c17bea10ebfe9d</anchor>
      <arglist>(Link *link, Node *srcNode, Node *destNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addLink</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>aff6e00465457d8e447da9ee03e6f386e</anchor>
      <arglist>(Link *link, cGate *srcGate, cGate *destGate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteLink</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>ae8dc763c4069a5575158e59e2a1efdb5</anchor>
      <arglist>(Link *link)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumNodes</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a22eaf223055f89b94db5278877cf33ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Node *</type>
      <name>getNode</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>af088aa31d75d5ec1e6d5932469102d75</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Node *</type>
      <name>getNodeFor</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a56acb38d4a6e5e647d0cba0312d46260</anchor>
      <arglist>(cModule *mod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calculateUnweightedSingleShortestPathsTo</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>aa914b29251db6f94cae62a2229f4e82d</anchor>
      <arglist>(Node *target)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calculateWeightedSingleShortestPathsTo</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a902a7790bd7bd5089b3dbebc64015c13</anchor>
      <arglist>(Node *target)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Node *</type>
      <name>getTargetNode</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>aa8c520a1ea51cceb66e29ceca6a44036</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Node *</type>
      <name>createNode</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a0dddeda87a7b009195217e175cd02de2</anchor>
      <arglist>(cModule *module)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual Link *</type>
      <name>createLink</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a02b1a1e27b0e4687ad5606c669956a97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cTopology</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>acd4897610cdb4a21656f34ce78a01471</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cTopology</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a5cfa6dd0a490855d87cab1f6f2546721</anchor>
      <arglist>(const cTopology &amp;topo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cTopology</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a3eaf190693c38b022c64cd70d0e83625</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cTopology &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a01552f5bc4c5377e8f0be8a4bff6fc0b</anchor>
      <arglist>(const cTopology &amp;topo)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cTopology *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a17e85b922af137a41b4e9fe4122fd4db</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>extractFromNetwork</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a20978b403df109704fe94e59516448ef</anchor>
      <arglist>(bool(*selfunc)(cModule *, void *), void *userdata=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>extractFromNetwork</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>ab2ec53f63a05b8678c203e254ac3bcfd</anchor>
      <arglist>(Predicate *predicate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>extractByModulePath</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>ac14cd4eac16540ed979ea73c8edb3f1e</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;fullPathPatterns)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>extractByNedTypeName</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>aaedf2f68eab98cb0b6fe6e656518f371</anchor>
      <arglist>(const std::vector&lt; std::string &gt; &amp;nedTypeNames)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>extractByProperty</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a3e7a0cdef48da852bee702b61b7fccca</anchor>
      <arglist>(const char *propertyName, const char *value=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>extractByParameter</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a3de025db53954d3b375ae91a8cb70ac7</anchor>
      <arglist>(const char *paramName, const char *paramValue=nullptr)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>aae048282c7011eedc2e0492f6421ea73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>addNode</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>abe33a18cfe1b5a59892f03d873a0aa38</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteNode</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a10d04d4577ce859f166c1483ce52b1ac</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addLink</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a19cedd1bbb3c57e7d4c17bea10ebfe9d</anchor>
      <arglist>(Link *link, Node *srcNode, Node *destNode)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addLink</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>aff6e00465457d8e447da9ee03e6f386e</anchor>
      <arglist>(Link *link, cGate *srcGate, cGate *destGate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>deleteLink</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>ae8dc763c4069a5575158e59e2a1efdb5</anchor>
      <arglist>(Link *link)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getNumNodes</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a22eaf223055f89b94db5278877cf33ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Node *</type>
      <name>getNode</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>af088aa31d75d5ec1e6d5932469102d75</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Node *</type>
      <name>getNodeFor</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a56acb38d4a6e5e647d0cba0312d46260</anchor>
      <arglist>(cModule *mod)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calculateUnweightedSingleShortestPathsTo</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>aa914b29251db6f94cae62a2229f4e82d</anchor>
      <arglist>(Node *target)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>calculateWeightedSingleShortestPathsTo</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>a902a7790bd7bd5089b3dbebc64015c13</anchor>
      <arglist>(Node *target)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Node *</type>
      <name>getTargetNode</name>
      <anchorfile>classomnetpp_1_1cTopology.html</anchorfile>
      <anchor>aa8c520a1ea51cceb66e29ceca6a44036</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cTriang</name>
    <filename>classomnetpp_1_1cTriang.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cTriang *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cTriang.html</anchorfile>
      <anchor>aebaff870e91d80891c2d7876e0a3f68b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cTriang.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cTriang.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cTriang *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cTriang.html</anchorfile>
      <anchor>aebaff870e91d80891c2d7876e0a3f68b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cTriang.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cTriang.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cTruncNormal</name>
    <filename>classomnetpp_1_1cTruncNormal.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cTruncNormal *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cTruncNormal.html</anchorfile>
      <anchor>a2ed5062aa8bb93019a58dcd3c693a722</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cTruncNormal.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cTruncNormal.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cTruncNormal *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cTruncNormal.html</anchorfile>
      <anchor>a2ed5062aa8bb93019a58dcd3c693a722</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cTruncNormal.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cTruncNormal.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cPathFigure::CubicBezierCurveRel</name>
    <filename>structomnetpp_1_1cPathFigure_1_1CubicBezierCurveRel.html</filename>
    <base>omnetpp::cPathFigure::PathItem</base>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cPathFigure::CubicBezierCurveTo</name>
    <filename>structomnetpp_1_1cPathFigure_1_1CubicBezierCurveTo.html</filename>
    <base>omnetpp::cPathFigure::PathItem</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::cUniform</name>
    <filename>classomnetpp_1_1cUniform.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cUniform *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cUniform.html</anchorfile>
      <anchor>abacde0d252021d0390d7abfcf0b6342a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cUniform.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cUniform.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cUniform *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cUniform.html</anchorfile>
      <anchor>abacde0d252021d0390d7abfcf0b6342a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cUniform.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cUniform.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cPathFigure::CurveRel</name>
    <filename>structomnetpp_1_1cPathFigure_1_1CurveRel.html</filename>
    <base>omnetpp::cPathFigure::PathItem</base>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cPathFigure::CurveTo</name>
    <filename>structomnetpp_1_1cPathFigure_1_1CurveTo.html</filename>
    <base>omnetpp::cPathFigure::PathItem</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::cVarHistogram</name>
    <filename>classomnetpp_1_1cVarHistogram.html</filename>
    <base>omnetpp::cLegacyHistogramBase</base>
    <member kind="enumeration">
      <type></type>
      <name>TransformType</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>aa65f3b21a9a92ff022e435a7304126d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HIST_TR_NO_TRANSFORM</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>aa65f3b21a9a92ff022e435a7304126d2ac6ad1847f55692905f84bb01147e4b42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HIST_TR_AUTO_EPC_DBL</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>aa65f3b21a9a92ff022e435a7304126d2a42758e045df893dde84379a3570a74bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HIST_TR_AUTO_EPC_INT</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>aa65f3b21a9a92ff022e435a7304126d2aae4c1a13f036331cc5b83835e67d3d2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HIST_TR_NO_TRANSFORM</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>aa65f3b21a9a92ff022e435a7304126d2ac6ad1847f55692905f84bb01147e4b42</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HIST_TR_AUTO_EPC_DBL</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>aa65f3b21a9a92ff022e435a7304126d2a42758e045df893dde84379a3570a74bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HIST_TR_AUTO_EPC_INT</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>aa65f3b21a9a92ff022e435a7304126d2aae4c1a13f036331cc5b83835e67d3d2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cVarHistogram</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>aee225f49e6a0123cf06a0a66c224eb78</anchor>
      <arglist>(const cVarHistogram &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cVarHistogram</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>ab466cc26e8590823869ca3a9b7d3321a</anchor>
      <arglist>(const char *name=nullptr, int numcells=11, TransformType transformtype=HIST_TR_AUTO_EPC_DBL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cVarHistogram</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>ab81db19a4f0e001ac0a3786af9e102e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cVarHistogram &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a85dc0c8f279de9dda730ce6ac699c3a1</anchor>
      <arglist>(const cVarHistogram &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cVarHistogram *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a422150a3202218f440b57619a377d748</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a8ab0745de7fefce72d67f99f3931a3e4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUpBins</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>af163dfec64f493a3c41e445228529ae6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collectIntoHistogram</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a26eb19230615e43a7f8e0f4dc0c83612</anchor>
      <arglist>(double value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collectWeightedIntoHistogram</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a4e19de34d875a6e58311e395d0bea539</anchor>
      <arglist>(double value, double weight) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPDF</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>af219a8cbd290e37ca09d228ba634486c</anchor>
      <arglist>(double x) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCDF</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>acc18779cac5cfcefbc3a539c759dc917</anchor>
      <arglist>(double x) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBinEdge</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>ab15732fd2da197eb8a8cf8bedfb5395d</anchor>
      <arglist>(int k) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBinValue</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a1fe98eb162d14cdb1db0a0d73a1c154c</anchor>
      <arglist>(int k) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a01e6d44b83e335cfe73d46c676495711</anchor>
      <arglist>(FILE *) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a395dbbaaff2a5685b2b4b6633bda651f</anchor>
      <arglist>(FILE *) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addBinBound</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a6e7a3e8afecbd2455c9eaad475493ccf</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createEquiprobableCells</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a32fdbec9ccda792f6ecb815081624f97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cVarHistogram</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>aee225f49e6a0123cf06a0a66c224eb78</anchor>
      <arglist>(const cVarHistogram &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cVarHistogram</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>ab466cc26e8590823869ca3a9b7d3321a</anchor>
      <arglist>(const char *name=nullptr, int numcells=11, TransformType transformtype=HIST_TR_AUTO_EPC_DBL)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cVarHistogram</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>ab81db19a4f0e001ac0a3786af9e102e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cVarHistogram &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a85dc0c8f279de9dda730ce6ac699c3a1</anchor>
      <arglist>(const cVarHistogram &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cVarHistogram *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a422150a3202218f440b57619a377d748</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>clear</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a8ab0745de7fefce72d67f99f3931a3e4</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setUpBins</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>af163dfec64f493a3c41e445228529ae6</anchor>
      <arglist>() override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collectIntoHistogram</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a26eb19230615e43a7f8e0f4dc0c83612</anchor>
      <arglist>(double value) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>collectWeightedIntoHistogram</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a4e19de34d875a6e58311e395d0bea539</anchor>
      <arglist>(double value, double weight) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getPDF</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>af219a8cbd290e37ca09d228ba634486c</anchor>
      <arglist>(double x) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getCDF</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>acc18779cac5cfcefbc3a539c759dc917</anchor>
      <arglist>(double x) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBinEdge</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>ab15732fd2da197eb8a8cf8bedfb5395d</anchor>
      <arglist>(int k) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>getBinValue</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a1fe98eb162d14cdb1db0a0d73a1c154c</anchor>
      <arglist>(int k) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>saveToFile</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a01e6d44b83e335cfe73d46c676495711</anchor>
      <arglist>(FILE *) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadFromFile</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a395dbbaaff2a5685b2b4b6633bda651f</anchor>
      <arglist>(FILE *) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addBinBound</name>
      <anchorfile>classomnetpp_1_1cVarHistogram.html</anchorfile>
      <anchor>a6e7a3e8afecbd2455c9eaad475493ccf</anchor>
      <arglist>(double x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cVisitor</name>
    <filename>classomnetpp_1_1cVisitor.html</filename>
    <class kind="class">omnetpp::cVisitor::EndTraversalException</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cVisitor</name>
      <anchorfile>classomnetpp_1_1cVisitor.html</anchorfile>
      <anchor>a45815a2fcee4fa3cbbbd4188d557dc06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>process</name>
      <anchorfile>classomnetpp_1_1cVisitor.html</anchorfile>
      <anchor>ac1f588ca1ea6607e7908d66cafdd4502</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>processChildrenOf</name>
      <anchorfile>classomnetpp_1_1cVisitor.html</anchorfile>
      <anchor>a78100e44d1014959511febf43f7facdf</anchor>
      <arglist>(cObject *obj)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>visit</name>
      <anchorfile>classomnetpp_1_1cVisitor.html</anchorfile>
      <anchor>aac70927a11a8c21a1fba5531a13908c3</anchor>
      <arglist>(cObject *obj)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cWatch_bool</name>
    <filename>classomnetpp_1_1cWatch__bool.html</filename>
    <base>omnetpp::cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classomnetpp_1_1cWatch__bool.html</anchorfile>
      <anchor>aa0d8ddf8e340589ce5a4ebdc1d5e070d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classomnetpp_1_1cWatch__bool.html</anchorfile>
      <anchor>ab03565c5009105e9a856bb7ed61f79c8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cWatch__bool.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>classomnetpp_1_1cWatch__bool.html</anchorfile>
      <anchor>aaa583a97235a93b8b1b170319d31709e</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cWatch_char</name>
    <filename>classomnetpp_1_1cWatch__char.html</filename>
    <base>omnetpp::cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classomnetpp_1_1cWatch__char.html</anchorfile>
      <anchor>aa0d8ddf8e340589ce5a4ebdc1d5e070d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classomnetpp_1_1cWatch__char.html</anchorfile>
      <anchor>ab03565c5009105e9a856bb7ed61f79c8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cWatch__char.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>classomnetpp_1_1cWatch__char.html</anchorfile>
      <anchor>aaa583a97235a93b8b1b170319d31709e</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cWatch_cObject</name>
    <filename>classomnetpp_1_1cWatch__cObject.html</filename>
    <base>omnetpp::cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classomnetpp_1_1cWatch__cObject.html</anchorfile>
      <anchor>aa0d8ddf8e340589ce5a4ebdc1d5e070d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cWatch__cObject.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classomnetpp_1_1cWatch__cObject.html</anchorfile>
      <anchor>ab03565c5009105e9a856bb7ed61f79c8</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cWatch_cObjectPtr</name>
    <filename>classomnetpp_1_1cWatch__cObjectPtr.html</filename>
    <base>omnetpp::cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classomnetpp_1_1cWatch__cObjectPtr.html</anchorfile>
      <anchor>aa0d8ddf8e340589ce5a4ebdc1d5e070d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cWatch__cObjectPtr.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classomnetpp_1_1cWatch__cObjectPtr.html</anchorfile>
      <anchor>ab03565c5009105e9a856bb7ed61f79c8</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cWatch_stdstring</name>
    <filename>classomnetpp_1_1cWatch__stdstring.html</filename>
    <base>omnetpp::cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classomnetpp_1_1cWatch__stdstring.html</anchorfile>
      <anchor>aa0d8ddf8e340589ce5a4ebdc1d5e070d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classomnetpp_1_1cWatch__stdstring.html</anchorfile>
      <anchor>ab03565c5009105e9a856bb7ed61f79c8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cWatch__stdstring.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>classomnetpp_1_1cWatch__stdstring.html</anchorfile>
      <anchor>aaa583a97235a93b8b1b170319d31709e</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cWatch_uchar</name>
    <filename>classomnetpp_1_1cWatch__uchar.html</filename>
    <base>omnetpp::cWatchBase</base>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getClassName</name>
      <anchorfile>classomnetpp_1_1cWatch__uchar.html</anchorfile>
      <anchor>aa0d8ddf8e340589ce5a4ebdc1d5e070d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classomnetpp_1_1cWatch__uchar.html</anchorfile>
      <anchor>ab03565c5009105e9a856bb7ed61f79c8</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cWatch__uchar.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>classomnetpp_1_1cWatch__uchar.html</anchorfile>
      <anchor>aaa583a97235a93b8b1b170319d31709e</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cWatchBase</name>
    <filename>classomnetpp_1_1cWatchBase.html</filename>
    <base>omnetpp::cNoncopyableOwnedObject</base>
    <member kind="function">
      <type></type>
      <name>cWatchBase</name>
      <anchorfile>classomnetpp_1_1cWatchBase.html</anchorfile>
      <anchor>ac4ce02fc31de5c3abb5e734ca843b5af</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classomnetpp_1_1cWatchBase.html</anchorfile>
      <anchor>af9e0eabf638ba1ba9ffcc84f0efd3b67</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>classomnetpp_1_1cWatchBase.html</anchorfile>
      <anchor>ac24dfb23d26a140f3797018646fc2dcf</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cWatchBase</name>
      <anchorfile>classomnetpp_1_1cWatchBase.html</anchorfile>
      <anchor>ac4ce02fc31de5c3abb5e734ca843b5af</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>supportsAssignment</name>
      <anchorfile>classomnetpp_1_1cWatchBase.html</anchorfile>
      <anchor>af9e0eabf638ba1ba9ffcc84f0efd3b67</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>assign</name>
      <anchorfile>classomnetpp_1_1cWatchBase.html</anchorfile>
      <anchor>ac24dfb23d26a140f3797018646fc2dcf</anchor>
      <arglist>(const char *s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cWeibull</name>
    <filename>classomnetpp_1_1cWeibull.html</filename>
    <base>omnetpp::cRandom</base>
    <member kind="function" virtualness="virtual">
      <type>virtual cWeibull *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cWeibull.html</anchorfile>
      <anchor>aa857e1e8902227394108f58ca7aeeae4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cWeibull.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cWeibull.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cWeibull *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cWeibull.html</anchorfile>
      <anchor>aa857e1e8902227394108f58ca7aeeae4</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cWeibull.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>draw</name>
      <anchorfile>classomnetpp_1_1cWeibull.html</anchorfile>
      <anchor>a65f5518385e990e8eb9ecaaf36aa8061</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cWeightedStdDev</name>
    <filename>classomnetpp_1_1cWeightedStdDev.html</filename>
    <base>omnetpp::cStdDev</base>
    <member kind="function">
      <type></type>
      <name>cWeightedStdDev</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a8e7c5aa02a2cba3e932e8ecdafad4d8c</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cWeightedStdDev</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>acfdbbf9968d1057419e657d49d8648ff</anchor>
      <arglist>(const cWeightedStdDev &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>cWeightedStdDev &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a08d872e2ed8a8f35568e35ac80d8d60c</anchor>
      <arglist>(const cWeightedStdDev &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cWeightedStdDev *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>ac63a9169488234603573ea043a5a0141</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cWeightedStdDev</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a8e7c5aa02a2cba3e932e8ecdafad4d8c</anchor>
      <arglist>(const char *name=nullptr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cWeightedStdDev</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>acfdbbf9968d1057419e657d49d8648ff</anchor>
      <arglist>(const cWeightedStdDev &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>cWeightedStdDev &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>a08d872e2ed8a8f35568e35ac80d8d60c</anchor>
      <arglist>(const cWeightedStdDev &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cWeightedStdDev *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cWeightedStdDev.html</anchorfile>
      <anchor>ac63a9169488234603573ea043a5a0141</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cXMLElement</name>
    <filename>classomnetpp_1_1cXMLElement.html</filename>
    <base>omnetpp::cObject</base>
    <base protection="private">omnetpp::noncopyable</base>
    <class kind="class">omnetpp::cXMLElement::ParamResolver</class>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a83be907353bc2510cac6212277a77777</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>getOwner</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a1c61b59f0ccf468084ee3c932e21aff6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>affae72d1c96c1d74a2b9c2b5d5cbc6a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getSourceFileName</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a15b03f18201c930d299c187f687c82f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSourceLineNumber</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>ae6489ddf636a7dceecfaad1c2eba7a11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getSourceLocation</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a39394bfb3af4cb307b45c18b0415256f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getNodeValue</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a61230576703f1344317a5bcaf9ed17f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a8b3e6a1a39878712ea629f2720e0df4b</anchor>
      <arglist>(const char *attr) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAttributes</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>aa99ca9201c6c6b7247473d195a1bf64c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLAttributeMap</type>
      <name>getAttributes</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a80c7d6d9fd8291ccce200e288a897e33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getXML</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a6abc9aca4df99007c0d5f7ff0409795a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getParentNode</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>ae76da0383d4c26451eca0d746be12c77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasChildren</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>ab18186c357058e9fc214d857334caaa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getFirstChild</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a21ecb28e2b0c64fd81907e0b928bfab1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getLastChild</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a5bc1111753fc8c2da9415bddc85b995b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getNextSibling</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>aee6b2120e561904a88652dc17d3e4465</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getPreviousSibling</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>ae8fbcce06f3806989aee6c82ce4b61aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getFirstChildWithTag</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>ae5022dcfd4422cbeafc1c06c3589d7ed</anchor>
      <arglist>(const char *tagname) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getNextSiblingWithTag</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a0687f06a04c1ebe7bd6fe1cc45eb54bf</anchor>
      <arglist>(const char *tagname) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElementList</type>
      <name>getChildren</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>aa7ae261a0a288dfe4c1772f4277e0d42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElementList</type>
      <name>getChildrenByTagName</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>af3a908ac88206373132007b79ef5b73b</anchor>
      <arglist>(const char *tagname) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElementList</type>
      <name>getElementsByTagName</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a1ecdf61c004e94dbfb33070ed1423914</anchor>
      <arglist>(const char *tagname) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getFirstChildWithAttribute</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a4530eac6e7f02b2cf6a28feddb7fd964</anchor>
      <arglist>(const char *tagname, const char *attr, const char *attrvalue=nullptr) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getElementById</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a66e1da97d1dc25b5bfe9b2c0af941bbd</anchor>
      <arglist>(const char *idattrvalue) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getElementByPath</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a6fe6813fd583980aafb3d01efea2e1d0</anchor>
      <arglist>(const char *pathexpression, cXMLElement *root=nullptr, ParamResolver *resolver=nullptr) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getName</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a83be907353bc2510cac6212277a77777</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>getOwner</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a1c61b59f0ccf468084ee3c932e21aff6</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getTagName</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>affae72d1c96c1d74a2b9c2b5d5cbc6a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getSourceFileName</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a15b03f18201c930d299c187f687c82f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>getSourceLineNumber</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>ae6489ddf636a7dceecfaad1c2eba7a11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getSourceLocation</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a39394bfb3af4cb307b45c18b0415256f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getNodeValue</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a61230576703f1344317a5bcaf9ed17f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getAttribute</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a8b3e6a1a39878712ea629f2720e0df4b</anchor>
      <arglist>(const char *attr) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasAttributes</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>aa99ca9201c6c6b7247473d195a1bf64c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLAttributeMap</type>
      <name>getAttributes</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a80c7d6d9fd8291ccce200e288a897e33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>getXML</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a6abc9aca4df99007c0d5f7ff0409795a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getParentNode</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>ae76da0383d4c26451eca0d746be12c77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>hasChildren</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>ab18186c357058e9fc214d857334caaa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getFirstChild</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a21ecb28e2b0c64fd81907e0b928bfab1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getLastChild</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a5bc1111753fc8c2da9415bddc85b995b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getNextSibling</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>aee6b2120e561904a88652dc17d3e4465</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getPreviousSibling</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>ae8fbcce06f3806989aee6c82ce4b61aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getFirstChildWithTag</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>ae5022dcfd4422cbeafc1c06c3589d7ed</anchor>
      <arglist>(const char *tagname) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getNextSiblingWithTag</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a0687f06a04c1ebe7bd6fe1cc45eb54bf</anchor>
      <arglist>(const char *tagname) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElementList</type>
      <name>getChildren</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>aa7ae261a0a288dfe4c1772f4277e0d42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElementList</type>
      <name>getChildrenByTagName</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>af3a908ac88206373132007b79ef5b73b</anchor>
      <arglist>(const char *tagname) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElementList</type>
      <name>getElementsByTagName</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a1ecdf61c004e94dbfb33070ed1423914</anchor>
      <arglist>(const char *tagname) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getFirstChildWithAttribute</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a4530eac6e7f02b2cf6a28feddb7fd964</anchor>
      <arglist>(const char *tagname, const char *attr, const char *attrvalue=nullptr) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getElementById</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a66e1da97d1dc25b5bfe9b2c0af941bbd</anchor>
      <arglist>(const char *idattrvalue) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>getElementByPath</name>
      <anchorfile>classomnetpp_1_1cXMLElement.html</anchorfile>
      <anchor>a6fe6813fd583980aafb3d01efea2e1d0</anchor>
      <arglist>(const char *pathexpression, cXMLElement *root=nullptr, ParamResolver *resolver=nullptr) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cXMLParImpl</name>
    <filename>classomnetpp_1_1cXMLParImpl.html</filename>
    <base>omnetpp::cParImpl</base>
    <member kind="function">
      <type></type>
      <name>cXMLParImpl</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>ad32c29db514f723f76d5e575e459fd16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cXMLParImpl</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a6f9a49bd7f7cdfd5fccf7dc180590848</anchor>
      <arglist>(const cXMLParImpl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cXMLParImpl</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>afb2b95101d10254072d10c7be4c73ddc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a63b1ecf9a379b9a0323e67323991cd8a</anchor>
      <arglist>(const cXMLParImpl &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLParImpl *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a5f14def839cc4e64e2466756df5e9195</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>ae6d272d4af05edaa7725ad60b1ec2104</anchor>
      <arglist>(bool b) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIntValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a588e175407a2d81f79cec520e7044d20</anchor>
      <arglist>(intpar_t l) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a45f547947e811beaeec71863a1675ba1</anchor>
      <arglist>(double d) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a9e63a9930c4106d99ab35a8645698a27</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a0abe99195e911d2173519bf8064f5af2</anchor>
      <arglist>(cXMLElement *node) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a80af423d87336c25c28fe91e6bac674b</anchor>
      <arglist>(cExpression *e) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>aaed8a179966631fb8c64b1f963d0b685</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual intpar_t</type>
      <name>intValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>ac2b650859b0d6cc642bd26aa6af780ff</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a3438e6138743a93a08dde61c9411c711</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>af3bb05e9109c2f97e71d71e60548a1e4</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a7d0617a09188f05593e7036a73723857</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a6b6dfe5cc802e0a3a971ed99d8908d95</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a5f09bfa40706213278e1ea6a6e4a8d69</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>af4400fbe676882b9264a856cf952559c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>af862a39478bb95377b2734d86a30083b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>convertToConst</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a57c1d4c81cdb80b4bc12201a1a804c53</anchor>
      <arglist>(cComponent *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>ac880f5e94434ade08fbe54634fe95378</anchor>
      <arglist>(const char *text) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a9ed037b0e3f46f4d1d4d0f44041adf45</anchor>
      <arglist>(const cParImpl *other) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a95690b33bb165a3bdf30568af8283c7a</anchor>
      <arglist>(cVisitor *v, cComponent *context) override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cXMLParImpl</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>ad32c29db514f723f76d5e575e459fd16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>cXMLParImpl</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a6f9a49bd7f7cdfd5fccf7dc180590848</anchor>
      <arglist>(const cXMLParImpl &amp;other)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~cXMLParImpl</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>afb2b95101d10254072d10c7be4c73ddc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a63b1ecf9a379b9a0323e67323991cd8a</anchor>
      <arglist>(const cXMLParImpl &amp;otherpar)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLParImpl *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a5f14def839cc4e64e2466756df5e9195</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimPack</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a5b61ac233f12da6aa330ac69c2859b5c</anchor>
      <arglist>(cCommBuffer *buffer) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parsimUnpack</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a879084e5e8f5f325f4ff2f3e17b7b1b1</anchor>
      <arglist>(cCommBuffer *buffer) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setBoolValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>ae6d272d4af05edaa7725ad60b1ec2104</anchor>
      <arglist>(bool b) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setIntValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a588e175407a2d81f79cec520e7044d20</anchor>
      <arglist>(intpar_t l) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setDoubleValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a45f547947e811beaeec71863a1675ba1</anchor>
      <arglist>(double d) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setStringValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a9e63a9930c4106d99ab35a8645698a27</anchor>
      <arglist>(const char *s) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setXMLValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a0abe99195e911d2173519bf8064f5af2</anchor>
      <arglist>(cXMLElement *node) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setExpression</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a80af423d87336c25c28fe91e6bac674b</anchor>
      <arglist>(cExpression *e) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>boolValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>aaed8a179966631fb8c64b1f963d0b685</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual intpar_t</type>
      <name>intValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>ac2b650859b0d6cc642bd26aa6af780ff</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual double</type>
      <name>doubleValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a3438e6138743a93a08dde61c9411c711</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>stringValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>af3bb05e9109c2f97e71d71e60548a1e4</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>stdstringValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a7d0617a09188f05593e7036a73723857</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cXMLElement *</type>
      <name>xmlValue</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a6b6dfe5cc802e0a3a971ed99d8908d95</anchor>
      <arglist>(cComponent *context) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cExpression *</type>
      <name>getExpression</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a5f09bfa40706213278e1ea6a6e4a8d69</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>af4400fbe676882b9264a856cf952559c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>isNumeric</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>af862a39478bb95377b2734d86a30083b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>convertToConst</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a57c1d4c81cdb80b4bc12201a1a804c53</anchor>
      <arglist>(cComponent *context) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>ac880f5e94434ade08fbe54634fe95378</anchor>
      <arglist>(const char *text) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a9ed037b0e3f46f4d1d4d0f44041adf45</anchor>
      <arglist>(const cParImpl *other) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1cXMLParImpl.html</anchorfile>
      <anchor>a95690b33bb165a3bdf30568af8283c7a</anchor>
      <arglist>(cVisitor *v, cComponent *context) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cOsgCanvas::EarthViewpoint</name>
    <filename>structomnetpp_1_1cOsgCanvas_1_1EarthViewpoint.html</filename>
    <member kind="function">
      <type></type>
      <name>EarthViewpoint</name>
      <anchorfile>structomnetpp_1_1cOsgCanvas_1_1EarthViewpoint.html</anchorfile>
      <anchor>ad21922557576062ecf6a40e771e9d543</anchor>
      <arglist>(double longitude, double latitude, double altitude, double heading, double pitch, double range)</arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>altitude</name>
      <anchorfile>structomnetpp_1_1cOsgCanvas_1_1EarthViewpoint.html</anchorfile>
      <anchor>a2b13d276aee0d9fd646c8fa3647e869b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>range</name>
      <anchorfile>structomnetpp_1_1cOsgCanvas_1_1EarthViewpoint.html</anchorfile>
      <anchor>ac26a49438fb4be02f746d15833a9c591</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>structomnetpp_1_1cOsgCanvas_1_1EarthViewpoint.html</anchorfile>
      <anchor>a28e3c179a86f337095088b3ca02a2b2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>altitude</name>
      <anchorfile>structomnetpp_1_1cOsgCanvas_1_1EarthViewpoint.html</anchorfile>
      <anchor>a2b13d276aee0d9fd646c8fa3647e869b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>range</name>
      <anchorfile>structomnetpp_1_1cOsgCanvas_1_1EarthViewpoint.html</anchorfile>
      <anchor>ac26a49438fb4be02f746d15833a9c591</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>structomnetpp_1_1cOsgCanvas_1_1EarthViewpoint.html</anchorfile>
      <anchor>a28e3c179a86f337095088b3ca02a2b2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EarthViewpoint</name>
      <anchorfile>structomnetpp_1_1cOsgCanvas_1_1EarthViewpoint.html</anchorfile>
      <anchor>ad21922557576062ecf6a40e771e9d543</anchor>
      <arglist>(double longitude, double latitude, double altitude, double heading, double pitch, double range)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cDynamicExpression::Elem</name>
    <filename>classomnetpp_1_1cDynamicExpression_1_1Elem.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a1675f54f73e810804fc6a9cefd243683</anchor>
      <arglist>(const Elem &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a204e816fb78d6a687b39b27166944cee</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a7c41c13c18c3c4dc23d32c1415c030b5</anchor>
      <arglist>(intpar_t i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a3dab11322d084b858ff0c87bf41aa7cd</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setUnit</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a8add283e2d27370777568f19cddae03e</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>ad2bbdc3a52cc3605a20ef42fecea61eb</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a08dbd0af4b66c76600d8539232055c7f</anchor>
      <arglist>(cXMLElement *x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a5329b4797c9982af0abb11d1058887fe</anchor>
      <arglist>(cNedMathFunction *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a30bdf3b617e7c7b031339a1525e9015a</anchor>
      <arglist>(cNedFunction *f, int argc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>aa5e24a856e46f6fa17d3ac93a8a76a76</anchor>
      <arglist>(Functor *f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>ae28f7c8d688c50c9710358158a1e711a</anchor>
      <arglist>(OpType op)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>aa226546f31b30f82d165b563c2b37307</anchor>
      <arglist>(cExpression *expr)</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>getType</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a97c56d51eec84be3e856eb0ca6ebd3d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNumericConstant</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a16dd39e74b4752ec7768c1f5e2b5d0d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negate</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>abcdb1512395327f8236a4f4a4d4ff648</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getBoolConstant</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a45d46320e241b4800d81450cfc64aa65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>intpar_t</type>
      <name>getIntConstant</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a308f46873a323fc53d6d2d9584b4fc5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDoubleConstant</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a88589df26d05dd8ea4d0e0060615fb22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getUnit</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a0d05734c8c6121209c8ec9cb0da3d3aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>getStringConstant</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a159e990ab55cc7dc5e68e6d00cdb9825</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cXMLElement *</type>
      <name>getXMLElement</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a58c5ad20154865495309217bb06fa40b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cNedMathFunction *</type>
      <name>getMathFunction</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>aa9d6c04cc9fcc4736edce3f8be2a2578</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cNedFunction *</type>
      <name>getNedFunction</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>ae21ca02e6fa72ba2f8af8d62f5c5a9a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNedFunctionNumArgs</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a0e7e9432169ed387a96f90b42499c5c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Functor *</type>
      <name>getFunctor</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a8115abcbe91c961c42c055b0d97ef6fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>OpType</type>
      <name>getOperation</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a53cdc236685e47812443218cd12246ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cExpression *</type>
      <name>getConstSubexpression</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>ad30a080b7785c6fe2f59107c87e6b3d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a48a9ebbe3f98eb0bc80b3a1d1920fb8b</anchor>
      <arglist>(const Elem &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>ae9b08fca99a89639cd78a91152a64d5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>getOpName</name>
      <anchorfile>classomnetpp_1_1cDynamicExpression_1_1Elem.html</anchorfile>
      <anchor>a5db7da22f94680cf9bdf2df79d65cd29</anchor>
      <arglist>(OpType op)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cVisitor::EndTraversalException</name>
    <filename>classomnetpp_1_1cVisitor_1_1EndTraversalException.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::ErrorNanFilter</name>
    <filename>classomnetpp_1_1ErrorNanFilter.html</filename>
    <base>omnetpp::cNumericResultFilter</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::ErrorNanRecorder</name>
    <filename>classomnetpp_1_1ErrorNanRecorder.html</filename>
    <base>omnetpp::cNumericResultRecorder</base>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cFigure::Font</name>
    <filename>structomnetpp_1_1cFigure_1_1Font.html</filename>
    <member kind="variable">
      <type>std::string</type>
      <name>typeface</name>
      <anchorfile>structomnetpp_1_1cFigure_1_1Font.html</anchorfile>
      <anchor>ab76ac48c7050ec444a7442c85c0de9df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>pointSize</name>
      <anchorfile>structomnetpp_1_1cFigure_1_1Font.html</anchorfile>
      <anchor>a3eb41c4b8443ebb7675389aa15b08582</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>style</name>
      <anchorfile>structomnetpp_1_1cFigure_1_1Font.html</anchorfile>
      <anchor>a5251487cfa4de7a311eb2654bdf5a66e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>typeface</name>
      <anchorfile>structomnetpp_1_1cFigure_1_1Font.html</anchorfile>
      <anchor>ab76ac48c7050ec444a7442c85c0de9df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>pointSize</name>
      <anchorfile>structomnetpp_1_1cFigure_1_1Font.html</anchorfile>
      <anchor>a3eb41c4b8443ebb7675389aa15b08582</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint8_t</type>
      <name>style</name>
      <anchorfile>structomnetpp_1_1cFigure_1_1Font.html</anchorfile>
      <anchor>a5251487cfa4de7a311eb2654bdf5a66e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cDynamicExpression::Functor</name>
    <filename>classomnetpp_1_1cDynamicExpression_1_1Functor.html</filename>
    <base>omnetpp::cObject</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::cModule::GateIterator</name>
    <filename>classomnetpp_1_1cModule_1_1GateIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>GateIterator</name>
      <anchorfile>classomnetpp_1_1cModule_1_1GateIterator.html</anchorfile>
      <anchor>a3078e1e4f43f773bfbb1a04ee9ee5553</anchor>
      <arglist>(const cModule *m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classomnetpp_1_1cModule_1_1GateIterator.html</anchorfile>
      <anchor>ac01430210d1c5fb33a69406d1f6fcaba</anchor>
      <arglist>(const cModule *m)</arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>operator*</name>
      <anchorfile>classomnetpp_1_1cModule_1_1GateIterator.html</anchorfile>
      <anchor>a670ee68f8685f8908e62c0262e06793b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED cGate *</type>
      <name>operator()</name>
      <anchorfile>classomnetpp_1_1cModule_1_1GateIterator.html</anchorfile>
      <anchor>aa3001700e83042e925b2bb78d1786b43</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>end</name>
      <anchorfile>classomnetpp_1_1cModule_1_1GateIterator.html</anchorfile>
      <anchor>af729c6dc6f0946ed62d77f891bc2ccbf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GateIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classomnetpp_1_1cModule_1_1GateIterator.html</anchorfile>
      <anchor>a13e89c095f97413810a8cfb74967f2b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GateIterator</type>
      <name>operator++</name>
      <anchorfile>classomnetpp_1_1cModule_1_1GateIterator.html</anchorfile>
      <anchor>ae2054f383e70d0fbd09bbff35ff46931</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cKSplit::Grid</name>
    <filename>structomnetpp_1_1cKSplit_1_1Grid.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>parent</name>
      <anchorfile>structomnetpp_1_1cKSplit_1_1Grid.html</anchorfile>
      <anchor>a4dafd66c26e6b8acf64d2feba6141bcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>reldepth</name>
      <anchorfile>structomnetpp_1_1cKSplit_1_1Grid.html</anchorfile>
      <anchor>ab3e3dc3b5c231c52c4c5ace9b0bb4a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>total</name>
      <anchorfile>structomnetpp_1_1cKSplit_1_1Grid.html</anchorfile>
      <anchor>ab5af64ba12e40aefe7080187c140895a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>mother</name>
      <anchorfile>structomnetpp_1_1cKSplit_1_1Grid.html</anchorfile>
      <anchor>a3e1c27a01efb9cf8095997e12aca8ab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>cells</name>
      <anchorfile>structomnetpp_1_1cKSplit_1_1Grid.html</anchorfile>
      <anchor>a56037fb0e2470a9044a9adeaadda5f1f</anchor>
      <arglist>[K]</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cPathFigure::HorizontalLineRel</name>
    <filename>structomnetpp_1_1cPathFigure_1_1HorizontalLineRel.html</filename>
    <base>omnetpp::cPathFigure::PathItem</base>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cPathFigure::HorizontalLineTo</name>
    <filename>structomnetpp_1_1cPathFigure_1_1HorizontalLineTo.html</filename>
    <base>omnetpp::cPathFigure::PathItem</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::IdentityFilter</name>
    <filename>classomnetpp_1_1IdentityFilter.html</filename>
    <base>omnetpp::cNumericResultFilter</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::cArray::Iterator</name>
    <filename>classomnetpp_1_1cArray_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classomnetpp_1_1cArray_1_1Iterator.html</anchorfile>
      <anchor>a65ba07b3fc34ea382e76071569e09910</anchor>
      <arglist>(const cArray &amp;a, bool atHead=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classomnetpp_1_1cArray_1_1Iterator.html</anchorfile>
      <anchor>ab95869bd456138059e34986d0c6de220</anchor>
      <arglist>(const cArray &amp;a, bool atHead=true)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>operator*</name>
      <anchorfile>classomnetpp_1_1cArray_1_1Iterator.html</anchorfile>
      <anchor>a69118d3b2902f7e859650d7826526ed6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED cObject *</type>
      <name>operator()</name>
      <anchorfile>classomnetpp_1_1cArray_1_1Iterator.html</anchorfile>
      <anchor>a56bfe2de5478d22f4ddc7a07b171dacb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>end</name>
      <anchorfile>classomnetpp_1_1cArray_1_1Iterator.html</anchorfile>
      <anchor>af729c6dc6f0946ed62d77f891bc2ccbf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classomnetpp_1_1cArray_1_1Iterator.html</anchorfile>
      <anchor>aef12ef33726bc591f569f822c7b5ac41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>operator++</name>
      <anchorfile>classomnetpp_1_1cArray_1_1Iterator.html</anchorfile>
      <anchor>ac1702aedba13b4112b891b58dfd78eba</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Iterator &amp;</type>
      <name>operator--</name>
      <anchorfile>classomnetpp_1_1cArray_1_1Iterator.html</anchorfile>
      <anchor>a34e5ed23ddc31b7d8d4bfb5bfacbaab6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>operator--</name>
      <anchorfile>classomnetpp_1_1cArray_1_1Iterator.html</anchorfile>
      <anchor>a826422223993becdf7c1e60aea56e9c0</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cKSplit::Iterator</name>
    <filename>classomnetpp_1_1cKSplit_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classomnetpp_1_1cKSplit_1_1Iterator.html</anchorfile>
      <anchor>a84f2f4ff471f2a45cdec89d6c9c938f4</anchor>
      <arglist>(const cKSplit &amp;ksplit, bool atbeginning=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classomnetpp_1_1cKSplit_1_1Iterator.html</anchorfile>
      <anchor>a1d0a737a7c27e1b4196816c04fb0fe96</anchor>
      <arglist>(const cKSplit &amp;ksplit, bool atbeginning=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>classomnetpp_1_1cKSplit_1_1Iterator.html</anchorfile>
      <anchor>a2aefc5a84a51687145f8514f4029c26c</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator--</name>
      <anchorfile>classomnetpp_1_1cKSplit_1_1Iterator.html</anchorfile>
      <anchor>a132d549c024fd011da9b2f96319c5395</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>end</name>
      <anchorfile>classomnetpp_1_1cKSplit_1_1Iterator.html</anchorfile>
      <anchor>af729c6dc6f0946ed62d77f891bc2ccbf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getCellNumber</name>
      <anchorfile>classomnetpp_1_1cKSplit_1_1Iterator.html</anchorfile>
      <anchor>a9b4cbebc28113c7404cafd535907aaa0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCellMin</name>
      <anchorfile>classomnetpp_1_1cKSplit_1_1Iterator.html</anchorfile>
      <anchor>a334688fa69ae45f12a00732b3e097dc5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCellMax</name>
      <anchorfile>classomnetpp_1_1cKSplit_1_1Iterator.html</anchorfile>
      <anchor>a7be02260e4079a5b36705f7e29ac671e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCellSize</name>
      <anchorfile>classomnetpp_1_1cKSplit_1_1Iterator.html</anchorfile>
      <anchor>a355e67ed771a1a60ac0d3387d8a07172</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getCellValue</name>
      <anchorfile>classomnetpp_1_1cKSplit_1_1Iterator.html</anchorfile>
      <anchor>a6a9b08e6a14d4c8f39912dd60f43604e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cQueue::Iterator</name>
    <filename>classomnetpp_1_1cQueue_1_1Iterator.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>classomnetpp_1_1cQueue_1_1Iterator.html</anchorfile>
      <anchor>a422df0ee6f1f674d552fe96d9a691ec3</anchor>
      <arglist>(const cQueue &amp;q, bool reverse=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classomnetpp_1_1cQueue_1_1Iterator.html</anchorfile>
      <anchor>a21dfc35daaae810f35a98ddb29cc91c9</anchor>
      <arglist>(const cQueue &amp;q, bool reverse=false)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>operator*</name>
      <anchorfile>classomnetpp_1_1cQueue_1_1Iterator.html</anchorfile>
      <anchor>a69118d3b2902f7e859650d7826526ed6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED cObject *</type>
      <name>operator()</name>
      <anchorfile>classomnetpp_1_1cQueue_1_1Iterator.html</anchorfile>
      <anchor>a56bfe2de5478d22f4ddc7a07b171dacb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>end</name>
      <anchorfile>classomnetpp_1_1cQueue_1_1Iterator.html</anchorfile>
      <anchor>af729c6dc6f0946ed62d77f891bc2ccbf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classomnetpp_1_1cQueue_1_1Iterator.html</anchorfile>
      <anchor>aef12ef33726bc591f569f822c7b5ac41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>operator++</name>
      <anchorfile>classomnetpp_1_1cQueue_1_1Iterator.html</anchorfile>
      <anchor>ac1702aedba13b4112b891b58dfd78eba</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>Iterator &amp;</type>
      <name>operator--</name>
      <anchorfile>classomnetpp_1_1cQueue_1_1Iterator.html</anchorfile>
      <anchor>a34e5ed23ddc31b7d8d4bfb5bfacbaab6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>operator--</name>
      <anchorfile>classomnetpp_1_1cQueue_1_1Iterator.html</anchorfile>
      <anchor>a826422223993becdf7c1e60aea56e9c0</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cConfiguration::KeyValue</name>
    <filename>classomnetpp_1_1cConfiguration_1_1KeyValue.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::cConfigurationReader::KeyValue</name>
    <filename>classomnetpp_1_1cConfigurationReader_1_1KeyValue.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::LastValueRecorder</name>
    <filename>classomnetpp_1_1LastValueRecorder.html</filename>
    <base>omnetpp::cNumericResultRecorder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1LastValueRecorder.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cPathFigure::LineRel</name>
    <filename>structomnetpp_1_1cPathFigure_1_1LineRel.html</filename>
    <base>omnetpp::cPathFigure::PathItem</base>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cPathFigure::LineTo</name>
    <filename>structomnetpp_1_1cPathFigure_1_1LineTo.html</filename>
    <base>omnetpp::cPathFigure::PathItem</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::cTopology::Link</name>
    <filename>classomnetpp_1_1cTopology_1_1Link.html</filename>
    <member kind="function">
      <type></type>
      <name>Link</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Link.html</anchorfile>
      <anchor>af16a171cd67ab9d1b2e76a2efa7abd89</anchor>
      <arglist>(double weight=1)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeight</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Link.html</anchorfile>
      <anchor>a021a96f005d2d318d4cdf05f227c8089</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWeight</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Link.html</anchorfile>
      <anchor>a3c4eccda2af9562108b034562e1cdc8e</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Link.html</anchorfile>
      <anchor>aacb819fb241851fd9fc045271baa4034</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Link.html</anchorfile>
      <anchor>a486f22824bd83c5308a0d70ffac6f758</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Link.html</anchorfile>
      <anchor>a8cfbbe53c1cf6e3054736daea3044c0f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cTopology::LinkIn</name>
    <filename>classomnetpp_1_1cTopology_1_1LinkIn.html</filename>
    <base>omnetpp::cTopology::Link</base>
    <member kind="function">
      <type>Node *</type>
      <name>getRemoteNode</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1LinkIn.html</anchorfile>
      <anchor>a03882d64beb6b8f4144b444aa1f8408a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getLocalNode</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1LinkIn.html</anchorfile>
      <anchor>a7394a01db172de21c6dd2f1df8c0f65e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRemoteGateId</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1LinkIn.html</anchorfile>
      <anchor>a26f3db68a80fc1454c2633868a73e684</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalGateId</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1LinkIn.html</anchorfile>
      <anchor>a767f16fb3a092272cf5c094725c6d73f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getRemoteGate</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1LinkIn.html</anchorfile>
      <anchor>a7fb9da61f3471c9a170ad1cd65c4cb20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getLocalGate</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1LinkIn.html</anchorfile>
      <anchor>aa4eb31a67502890be681906c9a44eea9</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cTopology::LinkOut</name>
    <filename>classomnetpp_1_1cTopology_1_1LinkOut.html</filename>
    <base>omnetpp::cTopology::Link</base>
    <member kind="function">
      <type>Node *</type>
      <name>getRemoteNode</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1LinkOut.html</anchorfile>
      <anchor>a03882d64beb6b8f4144b444aa1f8408a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Node *</type>
      <name>getLocalNode</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1LinkOut.html</anchorfile>
      <anchor>a7394a01db172de21c6dd2f1df8c0f65e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getRemoteGateId</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1LinkOut.html</anchorfile>
      <anchor>a26f3db68a80fc1454c2633868a73e684</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLocalGateId</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1LinkOut.html</anchorfile>
      <anchor>a767f16fb3a092272cf5c094725c6d73f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getRemoteGate</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1LinkOut.html</anchorfile>
      <anchor>a7fb9da61f3471c9a170ad1cd65c4cb20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cGate *</type>
      <name>getLocalGate</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1LinkOut.html</anchorfile>
      <anchor>aa4eb31a67502890be681906c9a44eea9</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::nedsupport::LoopVar</name>
    <filename>classomnetpp_1_1nedsupport_1_1LoopVar.html</filename>
    <base>omnetpp::cDynamicExpression::Functor</base>
    <member kind="function">
      <type>LoopVar *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1nedsupport_1_1LoopVar.html</anchorfile>
      <anchor>a7c034bea7ba5c569ae80921980054fb3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classomnetpp_1_1nedsupport_1_1LoopVar.html</anchorfile>
      <anchor>ac8c2df3a4b90f890270bda7b2d7c1bec</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cMatchExpression::Matchable</name>
    <filename>classomnetpp_1_1cMatchExpression_1_1Matchable.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getAsString</name>
      <anchorfile>classomnetpp_1_1cMatchExpression_1_1Matchable.html</anchorfile>
      <anchor>a982df2ece40baed67889a01f533e2efd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const char *</type>
      <name>getAsString</name>
      <anchorfile>classomnetpp_1_1cMatchExpression_1_1Matchable.html</anchorfile>
      <anchor>ab2be9cf371a1aba5ba0eb6d1d43e7914</anchor>
      <arglist>(const char *attribute) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Matchable</name>
      <anchorfile>classomnetpp_1_1cMatchExpression_1_1Matchable.html</anchorfile>
      <anchor>a8ffc9d38b61d8481286dafb2cccf00ca</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::MaxFilter</name>
    <filename>classomnetpp_1_1MaxFilter.html</filename>
    <base>omnetpp::cNumericResultFilter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1MaxFilter.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::MaxRecorder</name>
    <filename>classomnetpp_1_1MaxRecorder.html</filename>
    <base>omnetpp::cNumericResultRecorder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1MaxRecorder.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::MeanFilter</name>
    <filename>classomnetpp_1_1MeanFilter.html</filename>
    <base>omnetpp::cNumericResultFilter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1MeanFilter.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::MeanRecorder</name>
    <filename>classomnetpp_1_1MeanRecorder.html</filename>
    <base>omnetpp::cNumericResultRecorder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1MeanRecorder.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>init</name>
      <anchorfile>classomnetpp_1_1MeanRecorder.html</anchorfile>
      <anchor>ae9eb87162b4d8346f0b858ccb4188694</anchor>
      <arglist>(cComponent *component, const char *statsName, const char *recordingMode, cProperty *attrsProperty, opp_string_map *manualAttrs) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cChannel::MessageSentSignalValue</name>
    <filename>classomnetpp_1_1cChannel_1_1MessageSentSignalValue.html</filename>
    <base>omnetpp::cITimestampedValue</base>
    <base>omnetpp::cObject</base>
    <member kind="function">
      <type></type>
      <name>MessageSentSignalValue</name>
      <anchorfile>classomnetpp_1_1cChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>a0b3762828d776522a133994a5e67fe03</anchor>
      <arglist>(simtime_t_cref t, cMessage *m, result_t *r)</arglist>
    </member>
    <member kind="function">
      <type>cMessage *</type>
      <name>getMessage</name>
      <anchorfile>classomnetpp_1_1cChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>a1c87ba5efc4a8c3281f289a79f642180</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>result_t *</type>
      <name>getChannelResult</name>
      <anchorfile>classomnetpp_1_1cChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>a4c99d90ac792384090d62c603fcb228a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t_cref</type>
      <name>getTimestamp</name>
      <anchorfile>classomnetpp_1_1cChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>a594b6c0b62695662c322a588b5973f6a</anchor>
      <arglist>(simsignal_t signalID) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimsignalType</type>
      <name>getValueType</name>
      <anchorfile>classomnetpp_1_1cChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>a46af353e9aa4c22d2e5121f0f2ee0d65</anchor>
      <arglist>(simsignal_t signalID) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>objectValue</name>
      <anchorfile>classomnetpp_1_1cChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>a71c30b8ca24b1d18ed8273858bb3fc75</anchor>
      <arglist>(simsignal_t signalID) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual simtime_t_cref</type>
      <name>getTimestamp</name>
      <anchorfile>classomnetpp_1_1cChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>a594b6c0b62695662c322a588b5973f6a</anchor>
      <arglist>(simsignal_t signalID) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SimsignalType</type>
      <name>getValueType</name>
      <anchorfile>classomnetpp_1_1cChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>a46af353e9aa4c22d2e5121f0f2ee0d65</anchor>
      <arglist>(simsignal_t signalID) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual cObject *</type>
      <name>objectValue</name>
      <anchorfile>classomnetpp_1_1cChannel_1_1MessageSentSignalValue.html</anchorfile>
      <anchor>a71c30b8ca24b1d18ed8273858bb3fc75</anchor>
      <arglist>(simsignal_t signalID) const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::MinFilter</name>
    <filename>classomnetpp_1_1MinFilter.html</filename>
    <base>omnetpp::cNumericResultFilter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1MinFilter.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::MinRecorder</name>
    <filename>classomnetpp_1_1MinRecorder.html</filename>
    <base>omnetpp::cNumericResultRecorder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1MinRecorder.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::ModNameParamResolver</name>
    <filename>classomnetpp_1_1ModNameParamResolver.html</filename>
    <base>omnetpp::cXMLElement::ParamResolver</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>resolve</name>
      <anchorfile>classomnetpp_1_1ModNameParamResolver.html</anchorfile>
      <anchor>a56fb46187edc470545e3bf6bdea91f3a</anchor>
      <arglist>(const char *paramname, std::string &amp;value) override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cPathFigure::MoveRel</name>
    <filename>structomnetpp_1_1cPathFigure_1_1MoveRel.html</filename>
    <base>omnetpp::cPathFigure::PathItem</base>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cPathFigure::MoveTo</name>
    <filename>structomnetpp_1_1cPathFigure_1_1MoveTo.html</filename>
    <base>omnetpp::cPathFigure::PathItem</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::cTopology::Node</name>
    <filename>classomnetpp_1_1cTopology_1_1Node.html</filename>
    <member kind="function">
      <type></type>
      <name>Node</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a42b4652ff50a5c824e5d8449a12df382</anchor>
      <arglist>(int moduleId=-1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getModuleId</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>ad57430d5274b39a292df7247a252b5b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getModule</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a2d434f37732b4a993432532b42c1714b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeight</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a021a96f005d2d318d4cdf05f227c8089</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWeight</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a3c4eccda2af9562108b034562e1cdc8e</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>aacb819fb241851fd9fc045271baa4034</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a486f22824bd83c5308a0d70ffac6f758</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a8cfbbe53c1cf6e3054736daea3044c0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumInLinks</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>afbd7654c30e01c3be1935170b7c4ce91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LinkIn *</type>
      <name>getLinkIn</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a04cd5e5c456396bad59ae741b8ca1437</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumOutLinks</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a77970774ec2bead5383bb43bc6f35061</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LinkOut *</type>
      <name>getLinkOut</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>af18fb3e0bb4b872a9c263adb296d158a</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDistanceToTarget</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a6f0ec3e3bb83f62551a33225e69a7f5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPaths</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>ab6677e3937da3eb4545de51473fd7b49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LinkOut *</type>
      <name>getPath</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a7ffaba853fe05b741f4e7df4772ec3f6</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getModuleId</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>ad57430d5274b39a292df7247a252b5b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>getModule</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a2d434f37732b4a993432532b42c1714b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getWeight</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a021a96f005d2d318d4cdf05f227c8089</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setWeight</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a3c4eccda2af9562108b034562e1cdc8e</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEnabled</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>aacb819fb241851fd9fc045271baa4034</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a486f22824bd83c5308a0d70ffac6f758</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>disable</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a8cfbbe53c1cf6e3054736daea3044c0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumInLinks</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>afbd7654c30e01c3be1935170b7c4ce91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LinkIn *</type>
      <name>getLinkIn</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a04cd5e5c456396bad59ae741b8ca1437</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumOutLinks</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a77970774ec2bead5383bb43bc6f35061</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LinkOut *</type>
      <name>getLinkOut</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>af18fb3e0bb4b872a9c263adb296d158a</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getDistanceToTarget</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a6f0ec3e3bb83f62551a33225e69a7f5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getNumPaths</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>ab6677e3937da3eb4545de51473fd7b49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LinkOut *</type>
      <name>getPath</name>
      <anchorfile>classomnetpp_1_1cTopology_1_1Node.html</anchorfile>
      <anchor>a7ffaba853fe05b741f4e7df4772ec3f6</anchor>
      <arglist>(int) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::noncopyable</name>
    <filename>classomnetpp_1_1noncopyable.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::opp_string</name>
    <filename>classomnetpp_1_1opp__string.html</filename>
    <member kind="function">
      <type></type>
      <name>opp_string</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>a0c1cfe7d44dbc41dafb88691840aafdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>opp_string</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>a4242ceb0bdc72550ef4bcf02f1682df5</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>opp_string</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>a9a66c382f9ed729ec5e4c19ceed831d9</anchor>
      <arglist>(const char *s, int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>opp_string</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>a700571b583ece453104ff30eeac7be9e</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>opp_string</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>ae9c1cbcb890c3aff2868fc934a641dde</anchor>
      <arglist>(const opp_string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~opp_string</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>afc98c848acc706639825b747b2797708</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>c_str</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>a14989d8fe448c5f947832aea3dae615a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>ae9b08fca99a89639cd78a91152a64d5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>a644718bb2fb240de962dc3c9a1fdf0dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>buffer</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>af3c8c4693a40dad1eeba2b0e30f56f03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>af9593d4a5ff4274efaf429cb4f9e57cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>reserve</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>a59029fa2c5f379d8de656000d0204b58</anchor>
      <arglist>(unsigned size)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>a84534ecb0bfb413a88ed782fa2cdfaf6</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>opp_string &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>a19a1dded93363979b3cbba257cb7fe1a</anchor>
      <arglist>(const opp_string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>opp_string &amp;</type>
      <name>operator=</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>a3df133fd455c00bd31accb33de560687</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>a532a46694e54c770fd734fec962e3c19</anchor>
      <arglist>(const opp_string &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>ae3202a6e72d5cc6568d871b1b7a06bc6</anchor>
      <arglist>(const opp_string &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>a39a932f2ac073af31ffdb2c7469c2ed8</anchor>
      <arglist>(const opp_string &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>opp_string &amp;</type>
      <name>operator+=</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>ae00cdb46a49630a3e45db1ed35315f55</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>opp_string &amp;</type>
      <name>operator+=</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>acfff746db962d67507355bc0a358f8d7</anchor>
      <arglist>(const opp_string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>opp_string &amp;</type>
      <name>operator+=</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>ad9f957be57990cb67dac1e54505e2a62</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>opp_string</type>
      <name>operator+</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>a85ae171f343aa272d726bbf40c875147</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <type>opp_string</type>
      <name>operator+</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>aa93b96fc3610c74fd93b6b9c70e5c856</anchor>
      <arglist>(const opp_string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>opp_string</type>
      <name>operator+</name>
      <anchorfile>classomnetpp_1_1opp__string.html</anchorfile>
      <anchor>acf25ac12d05395aa1558cf97f9bfe0bf</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::opp_string_map</name>
    <filename>classomnetpp_1_1opp__string__map.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::opp_string_vector</name>
    <filename>classomnetpp_1_1opp__string__vector.html</filename>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cMessagePrinter::Options</name>
    <filename>structomnetpp_1_1cMessagePrinter_1_1Options.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::PacketBitsFilter</name>
    <filename>classomnetpp_1_1PacketBitsFilter.html</filename>
    <base>omnetpp::cObjectResultFilter</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::PacketBytesFilter</name>
    <filename>classomnetpp_1_1PacketBytesFilter.html</filename>
    <base>omnetpp::cObjectResultFilter</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::nedsupport::ParameterRef</name>
    <filename>classomnetpp_1_1nedsupport_1_1ParameterRef.html</filename>
    <base>omnetpp::cDynamicExpression::Functor</base>
    <member kind="function">
      <type>ParameterRef *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1nedsupport_1_1ParameterRef.html</anchorfile>
      <anchor>afc87a7c653baad6308fbe0218c78aed1</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classomnetpp_1_1nedsupport_1_1ParameterRef.html</anchorfile>
      <anchor>ac8c2df3a4b90f890270bda7b2d7c1bec</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cXMLElement::ParamResolver</name>
    <filename>classomnetpp_1_1cXMLElement_1_1ParamResolver.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>resolve</name>
      <anchorfile>classomnetpp_1_1cXMLElement_1_1ParamResolver.html</anchorfile>
      <anchor>a2fcb2686116d608aaa17da78b76293c4</anchor>
      <arglist>(const char *paramname, std::string &amp;value)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cPathFigure::PathItem</name>
    <filename>structomnetpp_1_1cPathFigure_1_1PathItem.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::cFigure::Pixmap</name>
    <filename>classomnetpp_1_1cFigure_1_1Pixmap.html</filename>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cFigure::Point</name>
    <filename>structomnetpp_1_1cFigure_1_1Point.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::cTopology::Predicate</name>
    <filename>classomnetpp_1_1cTopology_1_1Predicate.html</filename>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cFigure::Rectangle</name>
    <filename>structomnetpp_1_1cFigure_1_1Rectangle.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::RemoveRepeatsFilter</name>
    <filename>classomnetpp_1_1RemoveRepeatsFilter.html</filename>
    <base>omnetpp::cNumericResultFilter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1RemoveRepeatsFilter.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cChannel::result_t</name>
    <filename>structomnetpp_1_1cChannel_1_1result__t.html</filename>
    <member kind="variable">
      <type>simtime_t</type>
      <name>delay</name>
      <anchorfile>structomnetpp_1_1cChannel_1_1result__t.html</anchorfile>
      <anchor>a5dc553a9e4746fc288305eb717d31022</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>simtime_t</type>
      <name>duration</name>
      <anchorfile>structomnetpp_1_1cChannel_1_1result__t.html</anchorfile>
      <anchor>a06953883d0cea09fe0baaa0e715cfb7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>discard</name>
      <anchorfile>structomnetpp_1_1cChannel_1_1result__t.html</anchorfile>
      <anchor>a1b22241b0cd43d447bdc750c702e7de2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cFigure::RGBA</name>
    <filename>structomnetpp_1_1cFigure_1_1RGBA.html</filename>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cConfiguration::RunInfo</name>
    <filename>structomnetpp_1_1cConfiguration_1_1RunInfo.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::nedsupport::SiblingModuleParameterRef</name>
    <filename>classomnetpp_1_1nedsupport_1_1SiblingModuleParameterRef.html</filename>
    <base>omnetpp::cDynamicExpression::Functor</base>
    <member kind="function">
      <type>SiblingModuleParameterRef *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1nedsupport_1_1SiblingModuleParameterRef.html</anchorfile>
      <anchor>a9967e716d57cc238fcfa22741fe2f6c3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classomnetpp_1_1nedsupport_1_1SiblingModuleParameterRef.html</anchorfile>
      <anchor>ac8c2df3a4b90f890270bda7b2d7c1bec</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::SimTime</name>
    <filename>classomnetpp_1_1SimTime.html</filename>
    <member kind="function">
      <type></type>
      <name>SimTime</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>ac5064988a19bbde87200ee5caa169921</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTime</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a534ed1b9ea3b2c2911a66637f1403e14</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTime</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a50fb2b35798a26d8af5d78c06f2e9249</anchor>
      <arglist>(cPar &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTime</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a53f7fec36fd40316384e451c20fdeb54</anchor>
      <arglist>(int64_t value, SimTimeUnit unit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTime</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>ac886517d543b8a416b908383a9cc6aed</anchor>
      <arglist>(const SimTime &amp;x)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const SimTime</type>
      <name>ZERO</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>ad4b5cfa0953c6bb8471d5439c3698484</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTime</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>ac5064988a19bbde87200ee5caa169921</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTime</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a534ed1b9ea3b2c2911a66637f1403e14</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTime</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a50fb2b35798a26d8af5d78c06f2e9249</anchor>
      <arglist>(cPar &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTime</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a53f7fec36fd40316384e451c20fdeb54</anchor>
      <arglist>(int64_t value, SimTimeUnit unit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimTime</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>ac886517d543b8a416b908383a9cc6aed</anchor>
      <arglist>(const SimTime &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZero</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a1d50f30c2273c1645f1514b32d39077f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>dbl</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>ae8a452cfc5604415904e316e5524def3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>inUnit</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>ab0cdd8d8dc7e76f7138c8e7b5e14befa</anchor>
      <arglist>(SimTimeUnit unit) const</arglist>
    </member>
    <member kind="function">
      <type>SimTime</type>
      <name>trunc</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>ad16abacb0d9ef25d20ba61877cb07f63</anchor>
      <arglist>(SimTimeUnit unit) const</arglist>
    </member>
    <member kind="function">
      <type>SimTime</type>
      <name>remainderForUnit</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a7d5455776e857b4724668827644039d4</anchor>
      <arglist>(SimTimeUnit unit) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>split</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>ad465ca3a73c8d0075e7d27f473121820</anchor>
      <arglist>(SimTimeUnit unit, int64_t &amp;outValue, SimTime &amp;outRemainder) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>ae9b08fca99a89639cd78a91152a64d5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>abb68e9318117f45e89f04b5b0901355d</anchor>
      <arglist>(char *buf) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ustr</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>ae6fa3f384fca73da650201cffa63c25e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>ustr</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a48431c096fc7e721a57da184f848f824</anchor>
      <arglist>(SimTimeUnit unit) const</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>raw</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a2fa96059f203cc8c02197bfec0ee529e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SimTime &amp;</type>
      <name>setRaw</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>ab489f68c50427742d610fba570c9c91d</anchor>
      <arglist>(int64_t l)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SimTime</type>
      <name>fromRaw</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a91aa5fe6e90d82667691c149833d69c6</anchor>
      <arglist>(int64_t l)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SimTime</type>
      <name>getMaxTime</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>aa68675f3d58f4be0458f7f7385c67767</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int64_t</type>
      <name>getScale</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a433e669fe9bb209e17aae9a4290d5715</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getScaleExp</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>ac893f1e8f32b3b9560667f2f5ab49b42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setScaleExp</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a7a04abbe172c85c9a5926f840a829432</anchor>
      <arglist>(int e)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SimTime</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a7c6440396ce33f988f0e40b35b80f9be</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SimTime</type>
      <name>parse</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a0ac22c52d9cd6f415948cf3aca65f160</anchor>
      <arglist>(const char *s, const char *&amp;endp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static char *</type>
      <name>ttoa</name>
      <anchorfile>classomnetpp_1_1SimTime.html</anchorfile>
      <anchor>a6f3d9d25a935863a8fc220d6c73fda5d</anchor>
      <arglist>(char *buf, int64_t t, int scaleexp, char *&amp;endp)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::nedsupport::Sizeof</name>
    <filename>classomnetpp_1_1nedsupport_1_1Sizeof.html</filename>
    <base>omnetpp::cDynamicExpression::Functor</base>
    <member kind="function">
      <type>Sizeof *</type>
      <name>dup</name>
      <anchorfile>classomnetpp_1_1nedsupport_1_1Sizeof.html</anchorfile>
      <anchor>af82e81c0a31744baf7bcbcd95929ee92</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const char *</type>
      <name>getFullName</name>
      <anchorfile>classomnetpp_1_1nedsupport_1_1Sizeof.html</anchorfile>
      <anchor>ac8c2df3a4b90f890270bda7b2d7c1bec</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::SkipNanFilter</name>
    <filename>classomnetpp_1_1SkipNanFilter.html</filename>
    <base>omnetpp::cNumericResultFilter</base>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cPathFigure::SmoothCubicBezierCurveRel</name>
    <filename>structomnetpp_1_1cPathFigure_1_1SmoothCubicBezierCurveRel.html</filename>
    <base>omnetpp::cPathFigure::PathItem</base>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cPathFigure::SmoothCubicBezierCurveTo</name>
    <filename>structomnetpp_1_1cPathFigure_1_1SmoothCubicBezierCurveTo.html</filename>
    <base>omnetpp::cPathFigure::PathItem</base>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cPathFigure::SmoothCurveRel</name>
    <filename>structomnetpp_1_1cPathFigure_1_1SmoothCurveRel.html</filename>
    <base>omnetpp::cPathFigure::PathItem</base>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cPathFigure::SmoothCurveTo</name>
    <filename>structomnetpp_1_1cPathFigure_1_1SmoothCurveTo.html</filename>
    <base>omnetpp::cPathFigure::PathItem</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::StatisticsRecorder</name>
    <filename>classomnetpp_1_1StatisticsRecorder.html</filename>
    <base>omnetpp::cNumericResultRecorder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1StatisticsRecorder.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>forEachChild</name>
      <anchorfile>classomnetpp_1_1StatisticsRecorder.html</anchorfile>
      <anchor>ac764613051628e373bdd277d2dcc50bd</anchor>
      <arglist>(cVisitor *v) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::StringMapParamResolver</name>
    <filename>classomnetpp_1_1StringMapParamResolver.html</filename>
    <base>omnetpp::cXMLElement::ParamResolver</base>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>resolve</name>
      <anchorfile>classomnetpp_1_1StringMapParamResolver.html</anchorfile>
      <anchor>a56fb46187edc470545e3bf6bdea91f3a</anchor>
      <arglist>(const char *paramname, std::string &amp;value) override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::cModule::SubmoduleIterator</name>
    <filename>classomnetpp_1_1cModule_1_1SubmoduleIterator.html</filename>
    <member kind="function">
      <type></type>
      <name>SubmoduleIterator</name>
      <anchorfile>classomnetpp_1_1cModule_1_1SubmoduleIterator.html</anchorfile>
      <anchor>a53d9db80040e4c2ad7fda82dd09a771a</anchor>
      <arglist>(const cModule *m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classomnetpp_1_1cModule_1_1SubmoduleIterator.html</anchorfile>
      <anchor>ac01430210d1c5fb33a69406d1f6fcaba</anchor>
      <arglist>(const cModule *m)</arglist>
    </member>
    <member kind="function">
      <type>cModule *</type>
      <name>operator*</name>
      <anchorfile>classomnetpp_1_1cModule_1_1SubmoduleIterator.html</anchorfile>
      <anchor>a6054eafa7d4afe503579e1fb0565730d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>_OPPDEPRECATED cModule *</type>
      <name>operator()</name>
      <anchorfile>classomnetpp_1_1cModule_1_1SubmoduleIterator.html</anchorfile>
      <anchor>a3d65c88ba9cbb65a6be9420a99944694</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>end</name>
      <anchorfile>classomnetpp_1_1cModule_1_1SubmoduleIterator.html</anchorfile>
      <anchor>af729c6dc6f0946ed62d77f891bc2ccbf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SubmoduleIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>classomnetpp_1_1cModule_1_1SubmoduleIterator.html</anchorfile>
      <anchor>af72512ff1ac9663dbc7364bd77d2930a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SubmoduleIterator</type>
      <name>operator++</name>
      <anchorfile>classomnetpp_1_1cModule_1_1SubmoduleIterator.html</anchorfile>
      <anchor>a258e7e5d1ac926c886c0900dfed627f0</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>SubmoduleIterator &amp;</type>
      <name>operator--</name>
      <anchorfile>classomnetpp_1_1cModule_1_1SubmoduleIterator.html</anchorfile>
      <anchor>adee2295ae8a6c676c35771b0b786c96d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SubmoduleIterator</type>
      <name>operator--</name>
      <anchorfile>classomnetpp_1_1cModule_1_1SubmoduleIterator.html</anchorfile>
      <anchor>aeb89269288cf98502fed24ab785109f7</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::SumFilter</name>
    <filename>classomnetpp_1_1SumFilter.html</filename>
    <base>omnetpp::cNumericResultFilter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1SumFilter.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::SumPerDurationFilter</name>
    <filename>classomnetpp_1_1SumPerDurationFilter.html</filename>
    <base>omnetpp::cNumericResultFilter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1SumPerDurationFilter.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::SumRecorder</name>
    <filename>classomnetpp_1_1SumRecorder.html</filename>
    <base>omnetpp::cNumericResultRecorder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1SumRecorder.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::TimeAverageFilter</name>
    <filename>classomnetpp_1_1TimeAverageFilter.html</filename>
    <base>omnetpp::cNumericResultFilter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1TimeAverageFilter.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::TimeAverageRecorder</name>
    <filename>classomnetpp_1_1TimeAverageRecorder.html</filename>
    <base>omnetpp::cNumericResultRecorder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1TimeAverageRecorder.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::TimeFilter</name>
    <filename>classomnetpp_1_1TimeFilter.html</filename>
    <base>omnetpp::cResultFilter</base>
  </compound>
  <compound kind="class">
    <name>omnetpp::TotalCountFilter</name>
    <filename>classomnetpp_1_1TotalCountFilter.html</filename>
    <base>omnetpp::cResultFilter</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1TotalCountFilter.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>omnetpp::TotalCountRecorder</name>
    <filename>classomnetpp_1_1TotalCountRecorder.html</filename>
    <base>omnetpp::cResultRecorder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1TotalCountRecorder.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cFigure::Transform</name>
    <filename>structomnetpp_1_1cFigure_1_1Transform.html</filename>
  </compound>
  <compound kind="class">
    <name>omnetpp::VectorRecorder</name>
    <filename>classomnetpp_1_1VectorRecorder.html</filename>
    <base>omnetpp::cNumericResultRecorder</base>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>str</name>
      <anchorfile>classomnetpp_1_1VectorRecorder.html</anchorfile>
      <anchor>acd0363984c7005246e42e9a6c178e22a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cPathFigure::VerticalLineRel</name>
    <filename>structomnetpp_1_1cPathFigure_1_1VerticalLineRel.html</filename>
    <base>omnetpp::cPathFigure::PathItem</base>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cPathFigure::VerticalLineTo</name>
    <filename>structomnetpp_1_1cPathFigure_1_1VerticalLineTo.html</filename>
    <base>omnetpp::cPathFigure::PathItem</base>
  </compound>
  <compound kind="struct">
    <name>omnetpp::cOsgCanvas::Viewpoint</name>
    <filename>structomnetpp_1_1cOsgCanvas_1_1Viewpoint.html</filename>
    <member kind="variable">
      <type>Vec3d</type>
      <name>eye</name>
      <anchorfile>structomnetpp_1_1cOsgCanvas_1_1Viewpoint.html</anchorfile>
      <anchor>a9b753ecd80fc7275e2fdf5dc60426e89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3d</type>
      <name>center</name>
      <anchorfile>structomnetpp_1_1cOsgCanvas_1_1Viewpoint.html</anchorfile>
      <anchor>a996abd6e20014463f484224c2d161f1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3d</type>
      <name>up</name>
      <anchorfile>structomnetpp_1_1cOsgCanvas_1_1Viewpoint.html</anchorfile>
      <anchor>a93dc75c74ab5b8be04001ad196e5ac33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>structomnetpp_1_1cOsgCanvas_1_1Viewpoint.html</anchorfile>
      <anchor>a28e3c179a86f337095088b3ca02a2b2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3d</type>
      <name>eye</name>
      <anchorfile>structomnetpp_1_1cOsgCanvas_1_1Viewpoint.html</anchorfile>
      <anchor>a9b753ecd80fc7275e2fdf5dc60426e89</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3d</type>
      <name>center</name>
      <anchorfile>structomnetpp_1_1cOsgCanvas_1_1Viewpoint.html</anchorfile>
      <anchor>a996abd6e20014463f484224c2d161f1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vec3d</type>
      <name>up</name>
      <anchorfile>structomnetpp_1_1cOsgCanvas_1_1Viewpoint.html</anchorfile>
      <anchor>a93dc75c74ab5b8be04001ad196e5ac33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>structomnetpp_1_1cOsgCanvas_1_1Viewpoint.html</anchorfile>
      <anchor>a28e3c179a86f337095088b3ca02a2b2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>RandomNumbersCont</name>
    <title>Continuous Distributions</title>
    <filename>group__RandomNumbersCont.html</filename>
    <class kind="class">omnetpp::cExponential</class>
    <class kind="class">omnetpp::cNormal</class>
    <class kind="class">omnetpp::cTruncNormal</class>
    <class kind="class">omnetpp::cGamma</class>
    <class kind="class">omnetpp::cBeta</class>
    <class kind="class">omnetpp::cErlang</class>
    <class kind="class">omnetpp::cChiSquare</class>
    <class kind="class">omnetpp::cStudentT</class>
    <class kind="class">omnetpp::cCauchy</class>
    <class kind="class">omnetpp::cTriang</class>
    <class kind="class">omnetpp::cWeibull</class>
    <class kind="class">omnetpp::cParetoShifted</class>
    <member kind="function">
      <type>SIM_API double</type>
      <name>uniform</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga110654e0d90a50f94b159b71fce85ea0</anchor>
      <arglist>(cRNG *rng, double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>SimTime</type>
      <name>uniform</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga6c187b32dbb8f5b5160556f2ca4534fb</anchor>
      <arglist>(cRNG *rng, SimTime a, SimTime b)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>exponential</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga0de2189f2c06898f5b5a0ae2a60e9b20</anchor>
      <arglist>(cRNG *rng, double mean)</arglist>
    </member>
    <member kind="function">
      <type>SimTime</type>
      <name>exponential</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga4362d3d87ff5372487fd2e7ffdfa088e</anchor>
      <arglist>(cRNG *rng, SimTime mean)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>normal</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga12d73760739137f5ae3651f4f6a58e01</anchor>
      <arglist>(cRNG *rng, double mean, double stddev)</arglist>
    </member>
    <member kind="function">
      <type>SimTime</type>
      <name>normal</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>gafe77c5f57f787729b5fcd731da5c78e9</anchor>
      <arglist>(cRNG *rng, SimTime mean, SimTime stddev)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>truncnormal</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>gaaee930b6bec6275135ab027188ffcaed</anchor>
      <arglist>(cRNG *rng, double mean, double stddev)</arglist>
    </member>
    <member kind="function">
      <type>SimTime</type>
      <name>truncnormal</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga6140484507e3e9c6b1b73eb4bbe742c2</anchor>
      <arglist>(cRNG *rng, SimTime mean, SimTime stddev)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>gamma_d</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga930a8344c42f44d4edddec58cbdd3515</anchor>
      <arglist>(cRNG *rng, double alpha, double theta)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>beta</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga983bf42adb00ec887cc0b89461a641bb</anchor>
      <arglist>(cRNG *rng, double alpha1, double alpha2)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>erlang_k</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>gaf677c5e1f529ac841a0626ae6fb1307d</anchor>
      <arglist>(cRNG *rng, unsigned int k, double mean)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>chi_square</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga8e20957261bfadd01eb1c5cfb3b310f8</anchor>
      <arglist>(cRNG *rng, unsigned int k)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>student_t</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>gaf0d6ac1cf137dc1f4304b03625fa79c5</anchor>
      <arglist>(cRNG *rng, unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>cauchy</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga45ba6269b2710bd818393ad8a7357e09</anchor>
      <arglist>(cRNG *rng, double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>triang</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga06ba23b968c0605be2f68fb7d687f81c</anchor>
      <arglist>(cRNG *rng, double a, double b, double c)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lognormal</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>ga0f4db9d4422567ca1231ad506bb40ce4</anchor>
      <arglist>(cRNG *rng, double m, double w)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>weibull</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>gae11b004b9485106089cf826a7f43fbd7</anchor>
      <arglist>(cRNG *rng, double a, double b)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API double</type>
      <name>pareto_shifted</name>
      <anchorfile>group__RandomNumbersCont.html</anchorfile>
      <anchor>gaee9eef42071614f8cf278210a26db12c</anchor>
      <arglist>(cRNG *rng, double a, double b, double c)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>RandomNumbersDiscr</name>
    <title>Discrete Distributions</title>
    <filename>group__RandomNumbersDiscr.html</filename>
    <class kind="class">omnetpp::cIntUniform</class>
    <class kind="class">omnetpp::cIntUniformExcl</class>
    <class kind="class">omnetpp::cBernoulli</class>
    <class kind="class">omnetpp::cBinomial</class>
    <class kind="class">omnetpp::cGeometric</class>
    <class kind="class">omnetpp::cNegBinomial</class>
    <class kind="class">omnetpp::cPoisson</class>
    <member kind="function">
      <type>SIM_API int</type>
      <name>intuniform</name>
      <anchorfile>group__RandomNumbersDiscr.html</anchorfile>
      <anchor>ga602a773dd9e4ba8b74f8aae19c36341c</anchor>
      <arglist>(cRNG *rng, int a, int b)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API int</type>
      <name>intuniformexcl</name>
      <anchorfile>group__RandomNumbersDiscr.html</anchorfile>
      <anchor>gadae27a5a4b8ff64b39d035adbd83bf45</anchor>
      <arglist>(cRNG *rng, int a, int b)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>bernoulli</name>
      <anchorfile>group__RandomNumbersDiscr.html</anchorfile>
      <anchor>gaa60fe96d871836523410bc5f3c4753a6</anchor>
      <arglist>(cRNG *rng, double p)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API int</type>
      <name>binomial</name>
      <anchorfile>group__RandomNumbersDiscr.html</anchorfile>
      <anchor>gaf7febe469997b5910b55e4a031ef7854</anchor>
      <arglist>(cRNG *rng, int n, double p)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API int</type>
      <name>geometric</name>
      <anchorfile>group__RandomNumbersDiscr.html</anchorfile>
      <anchor>ga0fa2696c756da6e498c060cc6954bdf1</anchor>
      <arglist>(cRNG *rng, double p)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API int</type>
      <name>negbinomial</name>
      <anchorfile>group__RandomNumbersDiscr.html</anchorfile>
      <anchor>ga47614bb04cc83b6e1204c76223ee2645</anchor>
      <arglist>(cRNG *rng, int n, double p)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API int</type>
      <name>poisson</name>
      <anchorfile>group__RandomNumbersDiscr.html</anchorfile>
      <anchor>ga45fee4d163ab811a42d5caa2eb666c05</anchor>
      <arglist>(cRNG *rng, double lambda)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>SimCore</name>
    <title>Simulation Core</title>
    <filename>group__SimCore.html</filename>
    <class kind="class">omnetpp::cChannel</class>
    <class kind="class">omnetpp::cIdealChannel</class>
    <class kind="class">omnetpp::cComponent</class>
    <class kind="class">omnetpp::cDatarateChannel</class>
    <class kind="class">omnetpp::cDelayChannel</class>
    <class kind="class">omnetpp::cGate</class>
    <class kind="class">omnetpp::cMessage</class>
    <class kind="class">omnetpp::cModule</class>
    <class kind="class">omnetpp::cPacket</class>
    <class kind="class">omnetpp::cPar</class>
    <class kind="class">omnetpp::cSimpleModule</class>
    <member kind="function">
      <type>simtime_t</type>
      <name>simTime</name>
      <anchorfile>group__SimCore.html</anchorfile>
      <anchor>ga546abe6e6fd7a646f74d81cc944a3f08</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>SimSupport</name>
    <title>Simulation Support</title>
    <filename>group__SimSupport.html</filename>
    <class kind="class">omnetpp::cComponentType</class>
    <class kind="class">omnetpp::cModuleType</class>
    <class kind="class">omnetpp::cChannelType</class>
    <class kind="class">omnetpp::cConfigOption</class>
    <class kind="class">omnetpp::cCoroutine</class>
    <class kind="class">omnetpp::cDefaultList</class>
    <class kind="class">omnetpp::cDisplayString</class>
    <class kind="class">omnetpp::cDynamicExpression</class>
    <class kind="class">omnetpp::cEnum</class>
    <class kind="class">omnetpp::cEnvir</class>
    <class kind="class">omnetpp::cRunnableEnvir</class>
    <class kind="class">omnetpp::cEvent</class>
    <class kind="class">omnetpp::cEventHeap</class>
    <class kind="class">omnetpp::cException</class>
    <class kind="class">omnetpp::cTerminationException</class>
    <class kind="class">omnetpp::cRuntimeError</class>
    <class kind="class">omnetpp::cExpression</class>
    <class kind="class">omnetpp::cFutureEventSet</class>
    <class kind="class">omnetpp::cISimulationLifecycleListener</class>
    <class kind="class">omnetpp::cMsgPar</class>
    <class kind="class">omnetpp::cNamedObject</class>
    <class kind="class">omnetpp::cNedValue</class>
    <class kind="class">omnetpp::cNullEnvir</class>
    <class kind="class">omnetpp::cObject</class>
    <class kind="class">omnetpp::cOwnedObject</class>
    <class kind="class">omnetpp::cNoncopyableOwnedObject</class>
    <class kind="class">omnetpp::cProperties</class>
    <class kind="class">omnetpp::cProperty</class>
    <class kind="class">omnetpp::cNumericResultFilter</class>
    <class kind="class">omnetpp::cObjectResultFilter</class>
    <class kind="class">omnetpp::cResultListener</class>
    <class kind="class">omnetpp::cNumericResultRecorder</class>
    <class kind="class">omnetpp::cScheduler</class>
    <class kind="class">omnetpp::cSequentialScheduler</class>
    <class kind="class">omnetpp::cRealTimeScheduler</class>
    <class kind="class">omnetpp::cSimulation</class>
    <class kind="class">omnetpp::cVisitor</class>
    <class kind="class">omnetpp::cXMLElement</class>
    <member kind="define">
      <type>#define</type>
      <name>Enter_Method</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>gaf475b9c6ec92bbfaaa248e579e4c5ac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Enter_Method_Silent</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>gafe7ca1d44640558115d556a56b6cb54d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>CoroutineFnp</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ga64109d89a6a36d6c65e2524b27813c1f</anchor>
      <arglist>)(void *)</arglist>
    </member>
    <member kind="typedef">
      <type>cNedValue(*</type>
      <name>NedFunction</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>gaff4ebea3c7cbc231345f9add98ee49c2</anchor>
      <arglist>)(cComponent *context, cNedValue argv[], int argc)</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>MathFunc</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ga3878bb0ff0049c813b13e732c56040eb</anchor>
      <arglist>)(...)</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>MathFuncNoArg</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>gaa216ad53083633a7defdc61edac3db4b</anchor>
      <arglist>)()</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>MathFunc1Arg</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ga2cbcc2115d4377160bd556b3f9223a2d</anchor>
      <arglist>)(double)</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>MathFunc2Args</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ga1b4d710aa8165750999266bd47542797</anchor>
      <arglist>)(double, double)</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>MathFunc3Args</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ga50194155789705e150f0944496c0c557</anchor>
      <arglist>)(double, double, double)</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>MathFunc4Args</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ga17200c8621c59c039d47a669994d575c</anchor>
      <arglist>)(double, double, double, double)</arglist>
    </member>
    <member kind="typedef">
      <type>int64_t</type>
      <name>eventnumber_t</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>gaebe35226c5c889df9d1cf602b9339aeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int64_t</type>
      <name>intpar_t</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>gab914b51603d5efd3a16183c5ff0674bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SimulationLifecycleEventType</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>gadc5b9469373589dc3d21a7efd968baae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_ON_STARTUP</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaea4b6fd7116559ad3fa1f7706b8254732f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_PRE_NETWORK_SETUP</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaea35ba52701bfc9e45a2bc0a758ec3c818</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_POST_NETWORK_SETUP</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaea659ba8cbb4230ba2404b05e1705b956f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_PRE_NETWORK_INITIALIZE</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaea3f1d6695f84efc377eca594f61fbd2a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_POST_NETWORK_INITIALIZE</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaea8c865d8306a6390bcad4da5a3d503a0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_ON_SIMULATION_START</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaea0111bd5438ab79df6afcb1f7f925b7a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_ON_SIMULATION_PAUSE</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaeabf24db5a8943b4ee9fd2e5a899f2f254</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_ON_SIMULATION_RESUME</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaeacfd233e8d62d67511ad9b5706a20945b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_ON_SIMULATION_SUCCESS</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaeafed96348be03e6e8bc96ed4acb7e3b38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_ON_SIMULATION_ERROR</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaea6306593c7f396392a8ec4136951c0aff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_PRE_NETWORK_FINISH</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaea92c1ca05349fc42cf226dc728676a596</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_POST_NETWORK_FINISH</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaeab3d7e3a77d60e4f77766fe9fb6eb50cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_ON_RUN_END</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaea41850b10d67fc128cc6fe76a6bddd1b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_PRE_NETWORK_DELETE</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaea2a016c888c443aca48ac01023a523395</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_POST_NETWORK_DELETE</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaea8eaca39dfead769ac52a360d6bbf08c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LF_ON_SHUTDOWN</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ggadc5b9469373589dc3d21a7efd968baaea1e3c696d5c1a38024cdf31ccf5d490f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>createOne</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ga472c2dc97e5cf7c0929426f5a59ed89a</anchor>
      <arglist>(const char *classname)</arglist>
    </member>
    <member kind="function">
      <type>cObject *</type>
      <name>createOneIfClassIsKnown</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ga2e2428a092ef9cd1c52471ae0a2ba920</anchor>
      <arglist>(const char *classname)</arglist>
    </member>
    <member kind="function">
      <type>cSimulation *</type>
      <name>getSimulation</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>ga9e1dcc79e9e31ef10df26a0e94d15b72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>cEnvir *</type>
      <name>getEnvir</name>
      <anchorfile>group__SimSupport.html</anchorfile>
      <anchor>gadc4728c488881c627cb1f82940c69952</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Containers</name>
    <title>Container Classes</title>
    <filename>group__Containers.html</filename>
    <class kind="class">omnetpp::cArray</class>
    <class kind="class">omnetpp::cPacketQueue</class>
    <class kind="class">omnetpp::cQueue</class>
    <member kind="typedef">
      <type>int(*</type>
      <name>CompareFunc</name>
      <anchorfile>group__Containers.html</anchorfile>
      <anchor>gabeb451b66385c18e01063cb0576ea8a0</anchor>
      <arglist>)(cObject *a, cObject *b)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>SimTime</name>
    <title>Simulation Time</title>
    <filename>group__SimTime.html</filename>
    <class kind="class">omnetpp::SimTime</class>
    <member kind="define">
      <type>#define</type>
      <name>SIMTIME_MAX</name>
      <anchorfile>group__SimTime.html</anchorfile>
      <anchor>gac49dd7b8b931047fa6ffd3bc981ab56d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIMTIME_ZERO</name>
      <anchorfile>group__SimTime.html</anchorfile>
      <anchor>gadf0c23f8b4d5f80a452d41159a24a00a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIMTIME_STR</name>
      <anchorfile>group__SimTime.html</anchorfile>
      <anchor>gac24a262d761e665e366bb88bf72baac2</anchor>
      <arglist>(t)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>SIMTIME_DBL</name>
      <anchorfile>group__SimTime.html</anchorfile>
      <anchor>gaf9702033a2b001c963275256b2a9dac0</anchor>
      <arglist>(t)</arglist>
    </member>
    <member kind="typedef">
      <type>SimTime</type>
      <name>simtime_t</name>
      <anchorfile>group__SimTime.html</anchorfile>
      <anchor>ga5a8189d996907ac38e69e6a4c50cf4ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const simtime_t &amp;</type>
      <name>simtime_t_cref</name>
      <anchorfile>group__SimTime.html</anchorfile>
      <anchor>ga862c66c218dc43a550086c0ab68bf134</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const double</type>
      <name>const_simtime_t</name>
      <anchorfile>group__SimTime.html</anchorfile>
      <anchor>gac6a6df51df71a990796880a4d5ec73a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SimTimeUnit</name>
      <anchorfile>group__SimTime.html</anchorfile>
      <anchor>ga9fac15731bd595846fae3ceaf940e39e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>RandomNumbers</name>
    <title>Random Number Generation</title>
    <filename>group__RandomNumbers.html</filename>
    <subgroup>RandomNumbersCont</subgroup>
    <subgroup>RandomNumbersDiscr</subgroup>
    <class kind="class">omnetpp::cRandom</class>
    <class kind="class">omnetpp::cRNG</class>
  </compound>
  <compound kind="group">
    <name>Statistics</name>
    <title>Statistical Result Collection</title>
    <filename>group__Statistics.html</filename>
    <class kind="class">omnetpp::cHistogram</class>
    <class kind="class">omnetpp::cIHistogramStrategy</class>
    <class kind="class">omnetpp::cFixedRangeHistogramStrategy</class>
    <class kind="class">omnetpp::cPrecollectionBasedHistogramStrategy</class>
    <class kind="class">omnetpp::cDefaultHistogramStrategy</class>
    <class kind="class">omnetpp::cAutoRangeHistogramStrategy</class>
    <class kind="class">omnetpp::cKSplit</class>
    <class kind="class">omnetpp::cLegacyHistogramBase</class>
    <class kind="class">omnetpp::cLegacyHistogram</class>
    <class kind="class">omnetpp::cLongHistogram</class>
    <class kind="class">omnetpp::cDoubleHistogram</class>
    <class kind="class">omnetpp::cOutVector</class>
    <class kind="class">omnetpp::cPrecollectionBasedDensityEst</class>
    <class kind="class">omnetpp::cPSquare</class>
    <class kind="class">omnetpp::cResultFilter</class>
    <class kind="class">omnetpp::cResultRecorder</class>
    <class kind="class">omnetpp::cStatistic</class>
    <class kind="class">omnetpp::cStdDev</class>
    <class kind="class">omnetpp::cWeightedStdDev</class>
    <class kind="class">omnetpp::cVarHistogram</class>
    <member kind="typedef">
      <type>int(*</type>
      <name>CritFunc</name>
      <anchorfile>group__Statistics.html</anchorfile>
      <anchor>gaf380c0952190c3d595b7a1de8d43e5bc</anchor>
      <arglist>)(const cKSplit &amp;, cKSplit::Grid &amp;, int, double *)</arglist>
    </member>
    <member kind="typedef">
      <type>double(*</type>
      <name>DivFunc</name>
      <anchorfile>group__Statistics.html</anchorfile>
      <anchor>ga3da446f624c1d69471059b2c72031ab7</anchor>
      <arglist>)(const cKSplit &amp;, cKSplit::Grid &amp;, double, double *)</arglist>
    </member>
    <member kind="typedef">
      <type>void(*</type>
      <name>RecordFunc</name>
      <anchorfile>group__Statistics.html</anchorfile>
      <anchor>gacc7b47aabd355e314509ea1e535f7558</anchor>
      <arglist>)(void *, simtime_t, double)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Canvas</name>
    <title>Canvas (2D Graphics)</title>
    <filename>group__Canvas.html</filename>
    <class kind="struct">omnetpp::cFigure::Point</class>
    <class kind="struct">omnetpp::cFigure::Rectangle</class>
    <class kind="struct">omnetpp::cFigure::Color</class>
    <class kind="struct">omnetpp::cFigure::Font</class>
    <class kind="struct">omnetpp::cFigure::Transform</class>
    <class kind="struct">omnetpp::cFigure::RGBA</class>
    <class kind="class">omnetpp::cFigure::Pixmap</class>
    <class kind="class">omnetpp::cFigure</class>
    <class kind="class">omnetpp::cGroupFigure</class>
    <class kind="class">omnetpp::cPanelFigure</class>
    <class kind="class">omnetpp::cAbstractLineFigure</class>
    <class kind="class">omnetpp::cLineFigure</class>
    <class kind="class">omnetpp::cArcFigure</class>
    <class kind="class">omnetpp::cPolylineFigure</class>
    <class kind="class">omnetpp::cAbstractShapeFigure</class>
    <class kind="class">omnetpp::cRectangleFigure</class>
    <class kind="class">omnetpp::cOvalFigure</class>
    <class kind="class">omnetpp::cRingFigure</class>
    <class kind="class">omnetpp::cPieSliceFigure</class>
    <class kind="class">omnetpp::cPolygonFigure</class>
    <class kind="class">omnetpp::cPathFigure</class>
    <class kind="class">omnetpp::cAbstractTextFigure</class>
    <class kind="class">omnetpp::cTextFigure</class>
    <class kind="class">omnetpp::cLabelFigure</class>
    <class kind="class">omnetpp::cAbstractImageFigure</class>
    <class kind="class">omnetpp::cImageFigure</class>
    <class kind="class">omnetpp::cIconFigure</class>
    <class kind="class">omnetpp::cPixmapFigure</class>
    <class kind="class">omnetpp::cCanvas</class>
    <member kind="enumeration">
      <type></type>
      <name>FontStyle</name>
      <anchorfile>group__Canvas.html</anchorfile>
      <anchor>ga5e5699dd6b22c785fd82a0e87f2c5bfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LineStyle</name>
      <anchorfile>group__Canvas.html</anchorfile>
      <anchor>ga86e0f5648542856159bb40775c854aa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CapStyle</name>
      <anchorfile>group__Canvas.html</anchorfile>
      <anchor>ga63806a3e806775b35bb9373a3ec0c555</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>JoinStyle</name>
      <anchorfile>group__Canvas.html</anchorfile>
      <anchor>ga4ae807b1d30d2a3c375f0616740e8b3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FillRule</name>
      <anchorfile>group__Canvas.html</anchorfile>
      <anchor>ga9a534b0377c9ca41983d53b0dae0d5a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Arrowhead</name>
      <anchorfile>group__Canvas.html</anchorfile>
      <anchor>gaa7a1b6f1e7b1caa83c503749051c1312</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Interpolation</name>
      <anchorfile>group__Canvas.html</anchorfile>
      <anchor>ga817402314dfc91b23b3642e5b6bb4549</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Anchor</name>
      <anchorfile>group__Canvas.html</anchorfile>
      <anchor>ga31212c0e97573d350c4420f8d1679c9f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>OSG</name>
    <title>OSG (3D Graphics)</title>
    <filename>group__OSG.html</filename>
    <class kind="struct">omnetpp::cOsgCanvas::Viewpoint</class>
    <class kind="struct">omnetpp::cOsgCanvas::EarthViewpoint</class>
    <class kind="class">omnetpp::cOsgCanvas</class>
    <class kind="class">omnetpp::cObjectOsgNode</class>
    <member kind="enumeration">
      <type></type>
      <name>ViewerStyle</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>gaf0b73d3d331edf08d7b2401b48622652</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STYLE_GENERIC</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggaf0b73d3d331edf08d7b2401b48622652aaa5430724874cdc78a300be44a6c10ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STYLE_EARTH</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggaf0b73d3d331edf08d7b2401b48622652a684349544d05985c3eb68e1900761a2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CameraManipulatorType</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>gae9cf5117e3a9b51d6ded7154cd384906</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_AUTO</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggae9cf5117e3a9b51d6ded7154cd384906a81fb426ed374c5ee082a3597476176b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_TERRAIN</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggae9cf5117e3a9b51d6ded7154cd384906a555390fd074a995d7de38fedb8dc49b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_OVERVIEW</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggae9cf5117e3a9b51d6ded7154cd384906acda0a9dae50428bb310a1c53f95b97d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_TRACKBALL</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggae9cf5117e3a9b51d6ded7154cd384906a8830f1e4b78054daf800cb4ce55a0092</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CAM_EARTH</name>
      <anchorfile>group__OSG.html</anchorfile>
      <anchor>ggae9cf5117e3a9b51d6ded7154cd384906a163adba5116bf621ab744740eb48c0e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>FSM</name>
    <title>FSM Support</title>
    <filename>group__FSM.html</filename>
    <class kind="class">omnetpp::cFSM</class>
    <member kind="define">
      <type>#define</type>
      <name>FSM_MAXT</name>
      <anchorfile>group__FSM.html</anchorfile>
      <anchor>ga0cb33efc256dd2747fc91e417ea2c7df</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSM_Switch</name>
      <anchorfile>group__FSM.html</anchorfile>
      <anchor>ga08ffc02054cc56d5ae887e25e37ac093</anchor>
      <arglist>(fsm)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSM_Transient</name>
      <anchorfile>group__FSM.html</anchorfile>
      <anchor>ga2e4d1135cb16386ee24ce0f9849f6cb9</anchor>
      <arglist>(state)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSM_Steady</name>
      <anchorfile>group__FSM.html</anchorfile>
      <anchor>ga9385a59dfb596e8b7d2c34159e869864</anchor>
      <arglist>(state)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSM_Enter</name>
      <anchorfile>group__FSM.html</anchorfile>
      <anchor>gacd1d3c4cda20ca24b7646b8d3e781fe7</anchor>
      <arglist>(state)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSM_Exit</name>
      <anchorfile>group__FSM.html</anchorfile>
      <anchor>ga55cb30df1ef8c18dca7fc7020fff502f</anchor>
      <arglist>(state)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>FSM_Goto</name>
      <anchorfile>group__FSM.html</anchorfile>
      <anchor>ga17ea3757b840dd122f2b03c53526d8a6</anchor>
      <arglist>(fsm, state)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Signals</name>
    <title>Signals</title>
    <filename>group__Signals.html</filename>
    <class kind="class">omnetpp::cIListener</class>
    <class kind="class">omnetpp::cListener</class>
    <class kind="class">omnetpp::cModelChangeNotification</class>
    <class kind="class">omnetpp::cPreModuleAddNotification</class>
    <class kind="class">omnetpp::cPostModuleAddNotification</class>
    <class kind="class">omnetpp::cPreModuleDeleteNotification</class>
    <class kind="class">omnetpp::cPostModuleDeleteNotification</class>
    <class kind="class">omnetpp::cPreModuleReparentNotification</class>
    <class kind="class">omnetpp::cPostModuleReparentNotification</class>
    <class kind="class">omnetpp::cPreGateAddNotification</class>
    <class kind="class">omnetpp::cPostGateAddNotification</class>
    <class kind="class">omnetpp::cPreGateDeleteNotification</class>
    <class kind="class">omnetpp::cPostGateDeleteNotification</class>
    <class kind="class">omnetpp::cPreGateVectorResizeNotification</class>
    <class kind="class">omnetpp::cPostGateVectorResizeNotification</class>
    <class kind="class">omnetpp::cPreGateConnectNotification</class>
    <class kind="class">omnetpp::cPreGateDisconnectNotification</class>
    <class kind="class">omnetpp::cPostGateDisconnectNotification</class>
    <class kind="class">omnetpp::cPathChangeNotification</class>
    <class kind="class">omnetpp::cPrePathCreateNotification</class>
    <class kind="class">omnetpp::cPostPathCreateNotification</class>
    <class kind="class">omnetpp::cPrePathCutNotification</class>
    <class kind="class">omnetpp::cPostPathCutNotification</class>
    <class kind="class">omnetpp::cPreParameterChangeNotification</class>
    <class kind="class">omnetpp::cPostParameterChangeNotification</class>
    <class kind="class">omnetpp::cPreDisplayStringChangeNotification</class>
    <class kind="class">omnetpp::cPostDisplayStringChangeNotification</class>
    <class kind="class">omnetpp::cITimestampedValue</class>
    <class kind="class">omnetpp::cTimestampedValue</class>
    <member kind="typedef">
      <type>int</type>
      <name>simsignal_t</name>
      <anchorfile>group__Signals.html</anchorfile>
      <anchor>gad08b7133e8200e277fc877568b4d561e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SimsignalType</name>
      <anchorfile>group__Signals.html</anchorfile>
      <anchor>ga70ca182aa292f42481bb44237de4eb23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SIM_API simsignal_t</type>
      <name>PRE_MODEL_CHANGE</name>
      <anchorfile>group__Signals.html</anchorfile>
      <anchor>ga91752e22a84e30df1c185f574ff6556f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SIM_API simsignal_t</type>
      <name>POST_MODEL_CHANGE</name>
      <anchorfile>group__Signals.html</anchorfile>
      <anchor>gaf8247a9fc88c68ee287fa2572133dd68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Utilities</name>
    <title>Utility Classes</title>
    <filename>group__Utilities.html</filename>
    <class kind="class">omnetpp::cMatchExpression::Matchable</class>
    <class kind="class">omnetpp::cMatchExpression</class>
    <class kind="class">omnetpp::cMatchableString</class>
    <class kind="class">omnetpp::cPatternMatcher</class>
    <class kind="class">omnetpp::cStringTokenizer</class>
    <class kind="class">omnetpp::cTopology</class>
    <class kind="class">omnetpp::opp_string</class>
    <class kind="class">omnetpp::opp_string_vector</class>
    <class kind="class">omnetpp::opp_string_map</class>
    <member kind="function">
      <type>P</type>
      <name>check_and_cast</name>
      <anchorfile>group__Utilities.html</anchorfile>
      <anchor>ga5044f74639a1f5cd3701d438261a0407</anchor>
      <arglist>(T *p)</arglist>
    </member>
    <member kind="function">
      <type>P</type>
      <name>check_and_cast_nullable</name>
      <anchorfile>group__Utilities.html</anchorfile>
      <anchor>ga0b4782d0f87609e981435a9ac0c0fcb0</anchor>
      <arglist>(T *p)</arglist>
    </member>
    <member kind="function">
      <type>ToInt</type>
      <name>checked_int_cast</name>
      <anchorfile>group__Utilities.html</anchorfile>
      <anchor>gaa1513afb661c828b08c376cd0b753267</anchor>
      <arglist>(FromInt x, const char *errmsg=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>ToInt</type>
      <name>checked_int_cast</name>
      <anchorfile>group__Utilities.html</anchorfile>
      <anchor>gaab96ebab99c3498b3df027cad31d1d27</anchor>
      <arglist>(FromInt x, const cObject *context, const char *errmsg=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>ToInt</type>
      <name>checked_int_cast</name>
      <anchorfile>group__Utilities.html</anchorfile>
      <anchor>ga6ee410c4efb62be0d078da9fa0a15c91</anchor>
      <arglist>(double d, const char *errmsg=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opp_strlen</name>
      <anchorfile>group__Utilities.html</anchorfile>
      <anchor>ga5b35bf42f5261c56fb5c0cade0f05ea7</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>opp_strdup</name>
      <anchorfile>group__Utilities.html</anchorfile>
      <anchor>ga2ff9851aa2bc996cca97b20b81e5ab80</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <type>char *</type>
      <name>opp_strcpy</name>
      <anchorfile>group__Utilities.html</anchorfile>
      <anchor>gad904f75ebf7debc890f5f2bcf75e79df</anchor>
      <arglist>(char *, const char *)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>opp_strcmp</name>
      <anchorfile>group__Utilities.html</anchorfile>
      <anchor>gaca723c5e22d4626cd50158df8a0ea302</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API char *</type>
      <name>opp_strprettytrunc</name>
      <anchorfile>group__Utilities.html</anchorfile>
      <anchor>ga46437ddb528048851ff78a55fda7fd0b</anchor>
      <arglist>(char *dest, const char *src, unsigned maxlen)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API const char *</type>
      <name>opp_typename</name>
      <anchorfile>group__Utilities.html</anchorfile>
      <anchor>gad2ab2b6c42da31388031dc4c8b7e34b8</anchor>
      <arglist>(const std::type_info &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>SIM_API int64_t</type>
      <name>opp_get_monotonic_clock_nsecs</name>
      <anchorfile>group__Utilities.html</anchorfile>
      <anchor>ga699107b48aeac4f768b6edf9d4b7b1b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SIM_API int64_t</type>
      <name>opp_get_monotonic_clock_usecs</name>
      <anchorfile>group__Utilities.html</anchorfile>
      <anchor>ga891c0be14175481589952eda25a9607f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Logging</name>
    <title>Logging</title>
    <filename>group__Logging.html</filename>
    <class kind="class">omnetpp::cLog</class>
    <member kind="define">
      <type>#define</type>
      <name>COMPILETIME_LOGLEVEL</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>gad92ffa5469c99474d4c81b54da6d82c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COMPILETIME_LOG_PREDICATE</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ga827abcd35ae49affe7a3300b912b9511</anchor>
      <arglist>(object, logLevel, category)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_STATICCONTEXT</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>gad1ac625347054d125541b99977b568c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_LOG</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>gaf56c1851f58a8c87647e8c7a46e9153f</anchor>
      <arglist>(logLevel, category)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ga650ef3eff8a2900bef69dae29c05d2dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_FATAL</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ga21ca59ae14a670274065f4e1ed58db12</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_ERROR</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ga27b348ffd20ee22cf301edf893debd41</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_WARN</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ga44af3daae0a3db64e9a0ac2e2ecfc4cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_INFO</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>gadd5f124c5c627d3254ac1fec6eef473b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_DETAIL</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ga8a503e0ad7339523a69e370288c25e0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_DEBUG</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ga287cddcb098a38db86a1f854156e8ab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_TRACE</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ga3e58f5026fe6c3d164f80b1e2595438e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_C</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>gaa15a05845199db7add342fed5d5bb055</anchor>
      <arglist>(category)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_FATAL_C</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ga1e63e11dd5ac14f0cc5a72e83a469676</anchor>
      <arglist>(category)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_ERROR_C</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ga3ef558853ee8125819ce37349d4068ae</anchor>
      <arglist>(category)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_WARN_C</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ga4aec577e7c227c1954aa980471f97fec</anchor>
      <arglist>(category)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_INFO_C</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ga160ca5b7a760ffca374cea2b939f396c</anchor>
      <arglist>(category)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_DETAIL_C</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ga98996690f390ca0f7c789ac6f803eb30</anchor>
      <arglist>(category)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_DEBUG_C</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>gab920e9199eb30b77d412555401edef34</anchor>
      <arglist>(category)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>EV_TRACE_C</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ga1b3099ed4a93eee07ffdced3cce3ed51</anchor>
      <arglist>(category)</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LogLevel</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>gaca1fd1d8935433e6ba2e3918214e07f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOGLEVEL_TRACE</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ggaca1fd1d8935433e6ba2e3918214e07f9ab9f7c6a7b5e3b3b2071b9f8ff8de1d9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOGLEVEL_DEBUG</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ggaca1fd1d8935433e6ba2e3918214e07f9abc8bb8dd85fdb023c81656b7da9c43bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOGLEVEL_DETAIL</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ggaca1fd1d8935433e6ba2e3918214e07f9a05770ba5bf63d83c13eb2f404b9ee4b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOGLEVEL_INFO</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ggaca1fd1d8935433e6ba2e3918214e07f9afe47011875b862ca175df0149afe429a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOGLEVEL_WARN</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ggaca1fd1d8935433e6ba2e3918214e07f9a04fc37b4bda31a4c1740fbe00688aa4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOGLEVEL_ERROR</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ggaca1fd1d8935433e6ba2e3918214e07f9ab63aafd966c1c6336506be3820931a93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOGLEVEL_FATAL</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ggaca1fd1d8935433e6ba2e3918214e07f9aa756ac23820271987f8e0d5fce2bd8ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOGLEVEL_OFF</name>
      <anchorfile>group__Logging.html</anchorfile>
      <anchor>ggaca1fd1d8935433e6ba2e3918214e07f9ae0acafb6ab8f52125650f8acdcbb2d70</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>WatchMacros</name>
    <title>WATCH Macros</title>
    <filename>group__WatchMacros.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_VECTOR</name>
      <anchorfile>group__WatchMacros.html</anchorfile>
      <anchor>gab149d308c85e2b71912bea91fed06efb</anchor>
      <arglist>(variable)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_PTRVECTOR</name>
      <anchorfile>group__WatchMacros.html</anchorfile>
      <anchor>gae489c6bbc2e19af741e61977d4f03aa7</anchor>
      <arglist>(variable)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_LIST</name>
      <anchorfile>group__WatchMacros.html</anchorfile>
      <anchor>ga9e5f0695d9c87d115f5eeae31e2080f9</anchor>
      <arglist>(variable)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_PTRLIST</name>
      <anchorfile>group__WatchMacros.html</anchorfile>
      <anchor>ga99980c7f45c4c39ccbf34b8e6d1241f1</anchor>
      <arglist>(variable)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_SET</name>
      <anchorfile>group__WatchMacros.html</anchorfile>
      <anchor>ga4a79ddd0849547eef079bc04ed0bc0f6</anchor>
      <arglist>(variable)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_PTRSET</name>
      <anchorfile>group__WatchMacros.html</anchorfile>
      <anchor>ga65b103b5094f32ec5bec17a06b1001ae</anchor>
      <arglist>(variable)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_MAP</name>
      <anchorfile>group__WatchMacros.html</anchorfile>
      <anchor>ga5bf6a9be5b3cb2838b9678a8d4fb9b30</anchor>
      <arglist>(m)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_PTRMAP</name>
      <anchorfile>group__WatchMacros.html</anchorfile>
      <anchor>ga0e5d96031a1621da03da1d0032d0123a</anchor>
      <arglist>(m)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH</name>
      <anchorfile>group__WatchMacros.html</anchorfile>
      <anchor>ga0878b62c3a2dcb0388c967a4acb2f18a</anchor>
      <arglist>(variable)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_RW</name>
      <anchorfile>group__WatchMacros.html</anchorfile>
      <anchor>ga3f13d05484bd1eb370c51dbd176688b2</anchor>
      <arglist>(variable)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_OBJ</name>
      <anchorfile>group__WatchMacros.html</anchorfile>
      <anchor>ga9546e1fef910bea22f9bc3172bb24743</anchor>
      <arglist>(variable)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>WATCH_PTR</name>
      <anchorfile>group__WatchMacros.html</anchorfile>
      <anchor>ga36540d0cfbab96aa1cd3b571f4d7aeb6</anchor>
      <arglist>(variable)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>RegMacros</name>
    <title>Registration Macros</title>
    <filename>group__RegMacros.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>Register_ResultFilter</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga6f2d3c14629d4841a0e08a4f495a7f3a</anchor>
      <arglist>(NAME, CLASSNAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_ResultFilter2</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga1164b7174c4e3a02b0af6ba697790617</anchor>
      <arglist>(NAME, CLASSNAME, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_ResultRecorder</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga9afee497008788618fda74c8d6e782b4</anchor>
      <arglist>(NAME, CLASSNAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_ResultRecorder2</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga8e09bedf55ad7285837d4cd77792509f</anchor>
      <arglist>(NAME, CLASSNAME, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Define_NED_Math_Function</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga6443da94f0c425c2f6a4e2796ae0d930</anchor>
      <arglist>(NAME, ARGCOUNT)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Define_NED_Math_Function2</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga32775e2c56ecc55d5a26c22cb8b14c21</anchor>
      <arglist>(NAME, FUNCTION, ARGCOUNT)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Define_NED_Math_Function3</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga17008e10fe2c26046a2dfb2372376e74</anchor>
      <arglist>(NAME, ARGCOUNT, CATEGORY, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Define_NED_Math_Function4</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>gafb4652c1aa744a704decd8bf8495badd</anchor>
      <arglist>(NAME, FUNCTION, ARGCOUNT, CATEGORY, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Define_NED_Function</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>gafa65854bb341b99eb44a29b8f6805589</anchor>
      <arglist>(FUNCTION, SIGNATURE)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Define_NED_Function2</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>gac94af17dc21c6f86787d54f51e2eccef</anchor>
      <arglist>(FUNCTION, SIGNATURE, CATEGORY, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_Class</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>gadbca479a455e4ba1bb47e9cb699e8765</anchor>
      <arglist>(CLASSNAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_Abstract_Class</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga18681258c0394e5167e4d282b44a4be4</anchor>
      <arglist>(CLASSNAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Define_Module</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga109b3bf65513bbe25360c5f4c08cd2d1</anchor>
      <arglist>(CLASSNAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Define_Channel</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga07e252d0422dfc02058dfa801ea66deb</anchor>
      <arglist>(CLASSNAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_ClassDescriptor</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga380ca4378934e280a8b7d00294ed6ba7</anchor>
      <arglist>(DESCRIPTORCLASS)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_GlobalConfigOption</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>gae02e9864add2a397723ab930d623adc0</anchor>
      <arglist>(ID, NAME, TYPE, DEFAULTVALUE, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_PerRunConfigOption</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga932711ee76eb90de1f725deabf4d440f</anchor>
      <arglist>(ID, NAME, TYPE, DEFAULTVALUE, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_GlobalConfigOptionU</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga1a2e531079c5d8a6ee323812d1ba717d</anchor>
      <arglist>(ID, NAME, UNIT, DEFAULTVALUE, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_PerRunConfigOptionU</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>gaa248a1484a581af34c8995b3cc42479c</anchor>
      <arglist>(ID, NAME, UNIT, DEFAULTVALUE, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_PerObjectConfigOption</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>gaf1a96476aabfaf442a9bb421ba647717</anchor>
      <arglist>(ID, NAME, KIND, TYPE, DEFAULTVALUE, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_PerObjectConfigOptionU</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga597fb33bbc90f9cd8f46fe628bee0203</anchor>
      <arglist>(ID, NAME, KIND, UNIT, DEFAULTVALUE, DESCRIPTION)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_MessagePrinter</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga404cfee50d31b0a4ea475fc2302f04f6</anchor>
      <arglist>(CLASSNAME)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_Enum</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga5b4eac4ef8bf8a02dad60d9e71766dad</anchor>
      <arglist>(NAME, VALUES)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_Enum2</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga569a3bec7b8ddf8ef32c3e3c119f8c19</anchor>
      <arglist>(VAR, NAME, VALUES)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>Register_Figure</name>
      <anchorfile>group__RegMacros.html</anchorfile>
      <anchor>ga5595f6d53b8143688998051cc7e579c6</anchor>
      <arglist>(NAME, CLASSNAME)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ExtensionPoints</name>
    <title>Extension Points</title>
    <filename>group__ExtensionPoints.html</filename>
    <class kind="class">omnetpp::cConfigurationReader</class>
    <class kind="class">omnetpp::cConfiguration</class>
    <class kind="class">omnetpp::cConfigurationEx</class>
    <class kind="class">omnetpp::cFingerprintCalculator</class>
    <class kind="class">omnetpp::cMessagePrinter</class>
    <class kind="class">omnetpp::cRNG</class>
    <class kind="class">omnetpp::cScheduler</class>
    <class kind="class">omnetpp::cIOutputVectorManager</class>
    <class kind="class">omnetpp::cIOutputScalarManager</class>
    <class kind="class">omnetpp::cISnapshotManager</class>
    <class kind="class">omnetpp::cIEventlogManager</class>
  </compound>
  <compound kind="group">
    <name>Internals</name>
    <title>Internal Classes</title>
    <filename>group__Internals.html</filename>
    <class kind="class">omnetpp::cBoolParImpl</class>
    <class kind="class">omnetpp::cClassDescriptor</class>
    <class kind="class">omnetpp::cDoubleParImpl</class>
    <class kind="class">omnetpp::cDeleteModuleException</class>
    <class kind="class">omnetpp::cStackCleanupException</class>
    <class kind="class">omnetpp::cSingleFingerprintCalculator</class>
    <class kind="class">omnetpp::cMultiFingerprintCalculator</class>
    <class kind="class">omnetpp::cIntParImpl</class>
    <class kind="class">omnetpp::cLogEntry</class>
    <class kind="class">omnetpp::cNedFunction</class>
    <class kind="class">omnetpp::cNedMathFunction</class>
    <class kind="class">omnetpp::cObjectFactory</class>
    <class kind="class">omnetpp::cParImpl</class>
    <class kind="class">omnetpp::cRegistrationList</class>
    <class kind="class">omnetpp::cGlobalRegistrationList</class>
    <class kind="class">omnetpp::cResultFilterType</class>
    <class kind="class">omnetpp::cResultRecorderType</class>
    <class kind="class">omnetpp::cStringParImpl</class>
    <class kind="class">omnetpp::cWatchBase</class>
    <class kind="class">omnetpp::cGenericReadonlyWatch</class>
    <class kind="class">omnetpp::cGenericAssignableWatch</class>
    <class kind="class">omnetpp::cWatch_bool</class>
    <class kind="class">omnetpp::cWatch_char</class>
    <class kind="class">omnetpp::cWatch_uchar</class>
    <class kind="class">omnetpp::cWatch_stdstring</class>
    <class kind="class">omnetpp::cWatch_cObject</class>
    <class kind="class">omnetpp::cWatch_cObjectPtr</class>
    <class kind="class">omnetpp::cXMLParImpl</class>
    <class kind="class">omnetpp::cErrorMessages</class>
    <class kind="class">omnetpp::CodeFragments</class>
    <class kind="class">omnetpp::cContextSwitcher</class>
    <class kind="class">omnetpp::cMethodCallContextSwitcher</class>
    <class kind="class">omnetpp::cContextTypeSwitcher</class>
  </compound>
  <compound kind="group">
    <name>ParsimBrief</name>
    <title>Parallel Simulation Extension</title>
    <filename>group__ParsimBrief.html</filename>
    <class kind="class">omnetpp::cCommBuffer</class>
    <class kind="class">omnetpp::cParsimCommunications</class>
    <member kind="define">
      <type>#define</type>
      <name>MAX_PARSIM_PARTITIONS</name>
      <anchorfile>group__ParsimBrief.html</anchorfile>
      <anchor>gaa82c54be13c3f5bcbebe1d4d648e8c77</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>APIChanges</name>
    <title>API Changes</title>
    <filename>APIChanges</filename>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>OMNeT++ API Reference</title>
    <filename>index</filename>
  </compound>
</tagfile>
