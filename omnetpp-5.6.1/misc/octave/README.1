
Using Octave with OMNeT++
=========================

From: Richard Lyon <rlyon01@ozemail.com.au>

I have found octave (matlab compatible) very useful for both setting up ini
files and then analysing the results. Octave has a function "popen" which
allows me to run seedtool and pipe the generated seeds back into a numeric
vector. This makes it easy to directly construct ini files, call omnetpp and
then analyse the resulting scalar file in from a single octave file. Also,
octave has a function for calculating the inverse of the cummulative student
distribution. This is useful for estimating confidence intervals.

I'll present this in four parts.

Part 1 - Calling seedtool from octave
Part 2 - Calling the omnetpp simulation from octave
Part 3 - Using octave to analyse the simulation results
Part 4 - Combining it together to run a set of replications


Introduction
----------------

It is generally necessary to run the simulation a large number of times, to
validate the model, obtain results with a degree of statistical confidence
and to check parameter sensitivity. Manually writing the omnetpp ini files,
running the simulations and analysing the results can be a very tedious and
time consuming process.

A solution is to use an executive to automate the process. The excutive may
accept user input, generate an ini file, run the simulations, analyse the
results and optionally plot the results. An audit trail may be generated
which is useful for reviewing completed work at a later date and also for
error checking.

An executive may be implemented using a shell script, a higher
level-language such as c/c++ or using a language like octave. A different
executive will typically be written for each new simulation model. Since the
executive has a short lifetime, it must be easy to implement, modify and
debug. It is not an exercise in programming elegance.

I have found the Octave language suitable for implementing executives.
Octave is an interpreted high-level lanuage which is about 95% compatible
with matlab. Octave is freely available on the internet and is distributed
under the GNU license. Ports are available for most platforms such as linux,
unix, etc ... Results may be displayed graphically by calling gnuplot from
octave. A good range of statistical functions are available.

Most Engineers use matlab during their undergraduate courses, and are
comfortable with this language. This knowledge/skill may be used with
Octave. Although a win32 port is available I'll assume some form of unix or
linux is used. I'm using octave 2.0.13 on a Debian linux platform. A set of
contributed octave functions is installed. These functions are part of the
standard Debian distribution, but they may also be downloaded from the
octave home site (you need this for some of the statistical functions).

Ok, now the blurb is over lets move on to some octave code.


Calling the omnetpp seedtool from Octave
----------------------------------------------------------

The omnetpp seedtool application may be used to identify seeds which
guarantee that the random generators will output orthogonal sequences. Such
sequences are required to allow calculation of confidence intervals for the
simulation output data. An executive should be able to call the seed tool
and retrieve a set of seed values. These values may then be inserted in an
omnetpp ini file.

An Octave function for calling the seed tool and retrieving a vector of
seeds is listed below:

----- start of create_seeds.m file ------
##
## Name:
##
##   create_seeds
##
## Description:
##
##   This function generates a vector of orthogonal seeds suitable for
##   simulation replications. The seeds are generated by the omnetpp
##   seedtool utility and piped into a vector, which is returned as the
##   result to the caller.
##
## Parameters:
##
##   o_prefix
##   A string containing the omnetpp directory path. For example a typical
##   path stiring may be "/usr/home/user1/omnetpp".
##
##   num_seeds
##   A scalar parameter specifying the number of seeds to be generated.
##
##   distance
##   An scalar parameter specifying the distance between the seeds.
##
##   init_seed
##   An scalar parameter specifying the starting seed for the seed tool.
##
## Return:
##
##   A vector containing 'num_seeds' elements. Each element is a seed.
##


function seeds = create_seeds(o_prefix, num_seeds, distance, init_seed)

  ## create the command line
  seed_tool = [o_prefix, "/src/utils/seedtool"];
  com_line = sprintf("%s g %d %d %d", seed_tool, init_seed, distance, \
       num_seeds);

  ## run omnetpp seedtool and pipe output here
  pidin = popen(com_line, "r");

  ## parse the seed values from the incoming stream
  loop = 0;
  while (isstr(s = fgets(pidin)))
    seeds(++loop) = sscanf(s,"%d","C");
  endwhile

  ## close the pipe
  pclose(pidin);

endfunction
----- end of create_seeds.m file ------


The following octave script may be used to test the create_seeds function:

----- start of test_seeds.m file ------
##
## simple test of calling create_seeds function
##


clear;

## setup parameters
prefix = "/usr/home/rlyon01/omnetpp";  # omnetpp path- change to your setup
num = 5;                               # the number of seeds to generate
d = 1000000;                           # the minimum distance between seeds
init = 137;                            # the initial seed for the tool

## generate the seed vector
seed_vec = create_seeds(prefix, num, d, init);

## display the results
disp("- Seed Tool Test -");
for loop = 1:num
  printf("  seed(%d) = %d\n", loop, seed_vec(loop));
endfor
disp("End of test.");
----- end of test_seeds.m file ------

When a number of seeds vectors are required, the last seed of a vector may
be used as the initial seed in the next call to seedtool.

Next email, I will demonstrate how to call a simulation from Octave.

Hopefully this is useful to someone ....

Regards Richard Lyon.




