//
// Generated file, do not edit! Created by nedtool 5.6 from HttpMsg.msg.
//

#ifndef __HTTPMSG_M_H
#define __HTTPMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



class HTTPMsg;
#include "NetPkt_m.h" // import NetPkt

/**
 * Class generated from <tt>HttpMsg.msg:21</tt> by nedtool.
 * <pre>
 * //
 * // Message class for representing a HTTP request or reply.
 * // For purposes of this model, we employ a very simple notion of HTTP:
 * // every HTTP request and reply is modelled with a single HTTPMsg packet.
 * // (We don't care about TCP connection setup and teardown, about TCP acks,
 * // and also ignore the fact that long requests and replies may span
 * // several packets in real life).
 * //
 * packet HTTPMsg extends NetPkt
 * {
 *     string payload;
 * }
 * </pre>
 */
class HTTPMsg : public ::NetPkt
{
  protected:
    omnetpp::opp_string payload;

  private:
    void copy(const HTTPMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const HTTPMsg&);

  public:
    HTTPMsg(const char *name=nullptr, short kind=0);
    HTTPMsg(const HTTPMsg& other);
    virtual ~HTTPMsg();
    HTTPMsg& operator=(const HTTPMsg& other);
    virtual HTTPMsg *dup() const override {return new HTTPMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual const char * getPayload() const;
    virtual void setPayload(const char * payload);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const HTTPMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, HTTPMsg& obj) {obj.parsimUnpack(b);}

#endif // ifndef __HTTPMSG_M_H

