%description:
Test "like" channels with typename given as:
 - volatile parameter (random)
 - various expressions (containing random, index, etc)

%file: test.ned

import testlib.Dump;

channelinterface IFooChannel { }
channel Channel1 extends ned.IdealChannel like IFooChannel { }
channel Channel2 extends ned.IdealChannel like IFooChannel { }

module Node { gates: input in[]; output out[]; connections allowunconnected: }

network Test
{
    parameters:
        volatile string randomTypeName = choose(intuniform(0,1), "Channel1 Channel2");
        volatile int oneOrTwo = intuniform(1,2);
    submodules:
        a: Node;
        b: Node;
        dump: Dump;
    connections allowunconnected:
        a.out++ --> <"Channel1"> like IFooChannel --> b.in++;
        a.out++ --> <"Chan" + "nel1"> like IFooChannel --> b.in++;
        for i=0..9 {a.out++ --> <randomTypeName> like IFooChannel --> b.in++;}
        for i=0..9 {a.out++ --> <"Channel"+string(oneOrTwo)> like IFooChannel --> b.in++;}
        for i=0..9 {a.out++ --> <"Channel"+string(1+intuniform(0,1))> like IFooChannel --> b.in++;}
}

%contains: stdout
module Test: Test {
    parameters:
        @isNetwork
        randomTypeName = choose(intuniform(0, 1), "Channel1 Channel2")
        oneOrTwo = intuniform(1, 2)
    submodules:
        module Test.a: Node {
            gates:
                out[0]: --> b.in[0], (Channel1)channel
                out[1]: --> b.in[1], (Channel1)channel
                out[2]: --> b.in[2], (Channel1)channel
                out[3]: --> b.in[3], (Channel2)channel
                out[4]: --> b.in[4], (Channel2)channel
                out[5]: --> b.in[5], (Channel1)channel
                out[6]: --> b.in[6], (Channel2)channel
                out[7]: --> b.in[7], (Channel2)channel
                out[8]: --> b.in[8], (Channel2)channel
                out[9]: --> b.in[9], (Channel2)channel
                out[10]: --> b.in[10], (Channel2)channel
                out[11]: --> b.in[11], (Channel2)channel
                out[12]: --> b.in[12], (Channel2)channel
                out[13]: --> b.in[13], (Channel1)channel
                out[14]: --> b.in[14], (Channel1)channel
                out[15]: --> b.in[15], (Channel2)channel
                out[16]: --> b.in[16], (Channel1)channel
                out[17]: --> b.in[17], (Channel1)channel
                out[18]: --> b.in[18], (Channel1)channel
                out[19]: --> b.in[19], (Channel1)channel
                out[20]: --> b.in[20], (Channel1)channel
                out[21]: --> b.in[21], (Channel2)channel
                out[22]: --> b.in[22], (Channel1)channel
                out[23]: --> b.in[23], (Channel2)channel
                out[24]: --> b.in[24], (Channel2)channel
                out[25]: --> b.in[25], (Channel1)channel
                out[26]: --> b.in[26], (Channel1)channel
                out[27]: --> b.in[27], (Channel2)channel
                out[28]: --> b.in[28], (Channel2)channel
                out[29]: --> b.in[29], (Channel2)channel
                out[30]: --> b.in[30], (Channel2)channel
                out[31]: --> b.in[31], (Channel1)channel
        }
        module Test.b: Node {
            gates:
                in[0]: <-- a.out[0], (Channel1)channel
                in[1]: <-- a.out[1], (Channel1)channel
                in[2]: <-- a.out[2], (Channel1)channel
                in[3]: <-- a.out[3], (Channel2)channel
                in[4]: <-- a.out[4], (Channel2)channel
                in[5]: <-- a.out[5], (Channel1)channel
                in[6]: <-- a.out[6], (Channel2)channel
                in[7]: <-- a.out[7], (Channel2)channel
                in[8]: <-- a.out[8], (Channel2)channel
                in[9]: <-- a.out[9], (Channel2)channel
                in[10]: <-- a.out[10], (Channel2)channel
                in[11]: <-- a.out[11], (Channel2)channel
                in[12]: <-- a.out[12], (Channel2)channel
                in[13]: <-- a.out[13], (Channel1)channel
                in[14]: <-- a.out[14], (Channel1)channel
                in[15]: <-- a.out[15], (Channel2)channel
                in[16]: <-- a.out[16], (Channel1)channel
                in[17]: <-- a.out[17], (Channel1)channel
                in[18]: <-- a.out[18], (Channel1)channel
                in[19]: <-- a.out[19], (Channel1)channel
                in[20]: <-- a.out[20], (Channel1)channel
                in[21]: <-- a.out[21], (Channel2)channel
                in[22]: <-- a.out[22], (Channel1)channel
                in[23]: <-- a.out[23], (Channel2)channel
                in[24]: <-- a.out[24], (Channel2)channel
                in[25]: <-- a.out[25], (Channel1)channel
                in[26]: <-- a.out[26], (Channel1)channel
                in[27]: <-- a.out[27], (Channel2)channel
                in[28]: <-- a.out[28], (Channel2)channel
                in[29]: <-- a.out[29], (Channel2)channel
                in[30]: <-- a.out[30], (Channel2)channel
                in[31]: <-- a.out[31], (Channel1)channel
        }
}

