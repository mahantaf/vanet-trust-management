%description:
Test bidirectional connection to parent, with scalar gate, gate indexing and gate++

%file: test.ned

import testlib.Dump;

module Core
{
    gates:
        inout g;
        inout gv1[];
        inout gv2[];

    connections allowunconnected:
}

module Node
{
    gates:
        inout g;
        inout gv1[];
        inout gv2[];
    submodules:
        c: Core {
            gates:
                gv1[sizeof(gv1)];
        }
    connections:
        g <--> c.g;
        for i=0..sizeof(gv1)-1 {
            c.gv1[i] <--> gv1[i];
        }
        for i=0..sizeof(gv2)-1 {
            c.gv2++ <--> gv2++;
        }
}

network Test {
    submodules:
        dump: Dump;
        node: Node {
            gates:
                gv1[2];
                gv2[2];
        }

    connections allowunconnected:
}

%contains: stdout
module Test: Test {
    parameters:
        @isNetwork
    submodules:
        module Test.node: Node {
            gates:
                g$i: not connected
                g$o: not connected
                gv1$i[0]: not connected
                gv1$i[1]: not connected
                gv1$o[0]: not connected
                gv1$o[1]: not connected
                gv2$i[0]: not connected
                gv2$i[1]: not connected
                gv2$o[0]: not connected
                gv2$o[1]: not connected
            submodules:
                module Test.node.c: Core {
                    gates:
                        g$i: <-- <parent>.g$i
                        g$o: --> <parent>.g$o
                        gv1$i[0]: <-- <parent>.gv1$i[0]
                        gv1$i[1]: <-- <parent>.gv1$i[1]
                        gv1$o[0]: --> <parent>.gv1$o[0]
                        gv1$o[1]: --> <parent>.gv1$o[1]
                        gv2$i[0]: <-- <parent>.gv2$i[0]
                        gv2$i[1]: <-- <parent>.gv2$i[1]
                        gv2$o[0]: --> <parent>.gv2$o[0]
                        gv2$o[1]: --> <parent>.gv2$o[1]
                }
        }
}
