%description:
Tests connection parameters when using channel types. (slightly obsolete)

%file: test.ned

import ned.*;

channel Conn0 extends ned.DatarateChannel
{
}

channel Conn1 extends ned.DatarateChannel
{
    parameters:
        delay = 0.004s;
}

channel Conn2 extends ned.DatarateChannel
{
    parameters:
        ber = 0.001;
}

channel Conn3 extends ned.DatarateChannel
{
    parameters:
        datarate = 64000bps;
}

channel Conn4 extends ned.DatarateChannel
{
    parameters:
        delay = 0.004s;
        ber = 0.001;
}

channel Conn5 extends ned.DatarateChannel
{
    parameters:
        delay = 0.004s;
        datarate = 64000bps;
}

channel Conn6 extends ned.DatarateChannel
{
    parameters:
        ber = 0.001;
        datarate = 64000bps;
}

channel Conn7 extends ned.DatarateChannel
{
    parameters:
        delay = 0.004s;
        ber = 0.001;
        per = 0.02;
        datarate = 64000bps;
}

simple Gen
{
    gates:
        output out[];
}

simple Sink
{
    gates:
        input in[];
}

network Test
{
    submodules:
        gen: Gen {
            gates:
                out[8];
        }
        sink: Sink {
            gates:
                in[8];
        }
    connections:
        gen.out[0] --> Conn0 --> sink.in[0];
        gen.out[1] --> Conn1 --> sink.in[1];
        gen.out[2] --> Conn2 --> sink.in[2];
        gen.out[3] --> Conn3 --> sink.in[3];
        gen.out[4] --> Conn4 --> sink.in[4];
        gen.out[5] --> Conn5 --> sink.in[5];
        gen.out[6] --> Conn6 --> sink.in[6];
        gen.out[7] --> Conn7 --> sink.in[7];
}

%file: test.cc

#include <omnetpp.h>

using namespace omnetpp;

namespace @TESTNAME@ {

class Gen : public cSimpleModule
{
  public:
    Gen() : cSimpleModule(16384) { }
    virtual void activity() override;
};

Define_Module(Gen);

void Gen::activity()
{
    for (int i=0; i<gateSize("out"); i++)
    {
        EV << i << ":";
        cGate *g = gate("out",i);
        cChannel *ch = g->getChannel();
        if (ch)
        {
            cDatarateChannel *sch = check_and_cast<cDatarateChannel *>(ch);
            if (sch->getDelay() != 0)  EV << "delay=" << sch->getDelay() << ":";
            if (sch->getDatarate())  EV << "datarate=" << sch->getDatarate() << ":";
            if (sch->getBitErrorRate())  EV << "ber=" << sch->getBitErrorRate() << ":";
            if (sch->getPacketErrorRate())  EV << "per=" << sch->getPacketErrorRate() << ":";
        }
        EV << endl;
    }
}

class Sink : public cSimpleModule
{
  public:
    virtual void handleMessage(cMessage *msg) override;
};

Define_Module(Sink);

void Sink::handleMessage(cMessage *msg)
{
    delete msg;
}

}; //namespace

%contains: stdout
0:
1:delay=0.004:
2:ber=0.001:
3:datarate=64000:
4:delay=0.004:ber=0.001:
5:delay=0.004:datarate=64000:
6:datarate=64000:ber=0.001:
7:delay=0.004:datarate=64000:ber=0.001:per=0.02:

