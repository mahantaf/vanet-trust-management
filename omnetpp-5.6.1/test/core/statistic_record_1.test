%description:
Tests parsing of record= key in @statistic() properties.

%file: test.ned

import testlib.Dump;

module Node
{
    //TODO: mean($signal+1); mean(fabs($signal)+1); mean($time+1)
    @statistic[rec0](record=mean);
    @statistic[rec1](record=vector(mean));
    @statistic[rec2](record=max(mean(timeavg)));
    @statistic[rec3](record=mean+1);
    @statistic[rec4](record=fabs(mean+1));
    @statistic[rec5](record=vector(mean+1));
    @statistic[rec6](record=histogram(mean+1));
    @statistic[rec7](record=1+max(2+mean(3+timeavg)));
    @statistic[rec8](record=vector(1+max(2+mean(3+timeavg))));
//    @statistic[rec9](record=$source); // FIXME currently does not work
    @statistic[rec10](record=last($source));
    @statistic[rec11](record=$source+5);
    @statistic[rec12](record=vector($source));
    @statistic[rec13](record=vector($source+5));
}

network Test
{
    submodules:
        node: Node;
}

%inifile: test.ini
[General]
network = Test
debug-statistics-recording = true

%subst: /omnetpp:://
%subst: /signalID=\d+/signalID=_/

%contains: stdout
Test.node (Node):
    "rec13" (signalID=_):
        <signalvalue> + 5 (UnaryExpressionFilter)
            VectorRecorder ==> rec13:vector($source+5)
    "rec12" (signalID=_):
        VectorRecorder ==> rec12:vector($source)
    "rec11" (signalID=_):
        <lastsignalvalue> + 5 (ExpressionRecorder) ==> rec11:$source+5
    "rec10" (signalID=_):
        LastValueRecorder ==> rec10:last($source)
    "rec8" (signalID=_):
        TimeAverageFilter
            3 + <signalvalue> (UnaryExpressionFilter)
                MeanFilter
                    2 + <signalvalue> (UnaryExpressionFilter)
                        MaxFilter
                            1 + <signalvalue> (UnaryExpressionFilter)
                                VectorRecorder ==> rec8:vector(1+max(2+mean(3+timeavg)))
    "rec7" (signalID=_):
        TimeAverageFilter
            3 + <signalvalue> (UnaryExpressionFilter)
                MeanFilter
                    2 + <signalvalue> (UnaryExpressionFilter)
                        MaxFilter
                            1 + <lastsignalvalue> (ExpressionRecorder) ==> rec7:1+max(2+mean(3+timeavg))
    "rec6" (signalID=_):
        MeanFilter
            <signalvalue> + 1 (UnaryExpressionFilter)
                HistogramRecorder ==> rec6:histogram(mean+1)
    "rec5" (signalID=_):
        MeanFilter
            <signalvalue> + 1 (UnaryExpressionFilter)
                VectorRecorder ==> rec5:vector(mean+1)
    "rec4" (signalID=_):
        MeanFilter
            fabs(<lastsignalvalue> + 1) (ExpressionRecorder) ==> rec4:fabs(mean+1)
    "rec3" (signalID=_):
        MeanFilter
            <lastsignalvalue> + 1 (ExpressionRecorder) ==> rec3:mean+1
    "rec2" (signalID=_):
        TimeAverageFilter
            MeanFilter
                MaxRecorder ==> rec2:max(mean(timeavg))
    "rec1" (signalID=_):
        MeanFilter
            VectorRecorder ==> rec1:vector(mean)
    "rec0" (signalID=_):
        MeanRecorder ==> rec0:mean
