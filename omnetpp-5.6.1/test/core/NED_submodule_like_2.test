%description:
Test "like" modules with typename given as:
 - volatile parameter (random)
 - various expressions (containing random, index, etc)

%file: test.ned

import testlib.Dump;

moduleinterface IFooModule { }
module Compound1 like IFooModule { }
module Compound2 like IFooModule { }

network Test
{
    parameters:
        volatile string randomTypeName = choose(intuniform(0,1), "Compound1 Compound2");
        volatile int oneOrTwo = intuniform(1,2);
    submodules:
        a: <"Compound1"> like IFooModule;
        b: <"Compo" + "und1"> like IFooModule;
        c[10]: <randomTypeName> like IFooModule;
        d[10]: <"Compound"+string(oneOrTwo)> like IFooModule;
        e[10]: <"Compound"+string(1+intuniform(0,1))> like IFooModule;
        //FIXME f[2]: <"Compound"+string(index)> like IFooModule; ==> "index not allowed here"
        //FIXME g[5]: <index%2==0 ? "Compound1" : "Compound2"> like IFooModule;  ==> "parse error", but with parens it's OK!
        //FIXME h[5]: <(index%2==0 ? "Compound1" : "Compound2")> like IFooModule; ==> "index not allowed here"
        dump: Dump;
}

%contains: stdout
module Test: Test {
    parameters:
        @isNetwork
        randomTypeName = choose(intuniform(0, 1), "Compound1 Compound2")
        oneOrTwo = intuniform(1, 2)
    submodules:
        module Test.a: Compound1 {
        }
        module Test.b: Compound1 {
        }
        module Test.c[0]: Compound1 {
        }
        module Test.c[1]: Compound2 {
        }
        module Test.c[2]: Compound2 {
        }
        module Test.c[3]: Compound1 {
        }
        module Test.c[4]: Compound2 {
        }
        module Test.c[5]: Compound2 {
        }
        module Test.c[6]: Compound2 {
        }
        module Test.c[7]: Compound2 {
        }
        module Test.c[8]: Compound2 {
        }
        module Test.c[9]: Compound2 {
        }
        module Test.d[0]: Compound2 {
        }
        module Test.d[1]: Compound1 {
        }
        module Test.d[2]: Compound1 {
        }
        module Test.d[3]: Compound2 {
        }
        module Test.d[4]: Compound1 {
        }
        module Test.d[5]: Compound1 {
        }
        module Test.d[6]: Compound1 {
        }
        module Test.d[7]: Compound1 {
        }
        module Test.d[8]: Compound1 {
        }
        module Test.d[9]: Compound2 {
        }
        module Test.e[0]: Compound1 {
        }
        module Test.e[1]: Compound2 {
        }
        module Test.e[2]: Compound2 {
        }
        module Test.e[3]: Compound1 {
        }
        module Test.e[4]: Compound1 {
        }
        module Test.e[5]: Compound2 {
        }
        module Test.e[6]: Compound2 {
        }
        module Test.e[7]: Compound2 {
        }
        module Test.e[8]: Compound2 {
        }
        module Test.e[9]: Compound1 {
        }
}

