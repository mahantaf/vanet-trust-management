%description:
Tests cMemCommBuffer.

%includes:
#include <string.h>
#include <sim/parsim/cmemcommbuffer.h>

%activity:

#define PRINT_AND_PACK(VAR)     {EV << #VAR ":" << VAR << endl; b->pack(VAR);}
#define UNPACK_AND_PRINT(VAR)   {VAR=0; b->unpack(VAR); EV << #VAR ":" << VAR << endl;}

cMemCommBuffer *b = new cMemCommBuffer();

char t1 = 'c';
unsigned char t2 = ']';
bool t3 = 1;
short t4 = -50;
unsigned short t5 = 100;
int t6 = -10000;
unsigned int t7 = 20000;
long t8 = -1000000;
unsigned long t9 = 2000000;
float  t10 = 0.45;
double t11 = 0.2543;
long double t12 = 0.3242;
const char *t13 = "Hello";
opp_string t14("checckking");

EV << "Packing:\n";
PRINT_AND_PACK(t1);
PRINT_AND_PACK(t2);
PRINT_AND_PACK(t3);
PRINT_AND_PACK(t4);
PRINT_AND_PACK(t5);
PRINT_AND_PACK(t6);
PRINT_AND_PACK(t7);
PRINT_AND_PACK(t8);
PRINT_AND_PACK(t9);
PRINT_AND_PACK(t10);
PRINT_AND_PACK(t11);
PRINT_AND_PACK(t12);
PRINT_AND_PACK(t13);
PRINT_AND_PACK(t14);

EV << "Unpacking:\n";
UNPACK_AND_PRINT(t1);
UNPACK_AND_PRINT(t2);
UNPACK_AND_PRINT(t3);
UNPACK_AND_PRINT(t4);
UNPACK_AND_PRINT(t5);
UNPACK_AND_PRINT(t6);
UNPACK_AND_PRINT(t7);
UNPACK_AND_PRINT(t8);
UNPACK_AND_PRINT(t9);
UNPACK_AND_PRINT(t10);
UNPACK_AND_PRINT(t11);
UNPACK_AND_PRINT(t12);
UNPACK_AND_PRINT(t13);
UNPACK_AND_PRINT(t14);

EV << "isBufferEmpty:" << b->isBufferEmpty() << endl;

%contains: stdout
Packing:
t1:c
t2:]
t3:1
t4:-50
t5:100
t6:-10000
t7:20000
t8:-1000000
t9:2000000
t10:0.45
t11:0.2543
t12:0.3242
t13:Hello
t14:checckking
Unpacking:
t1:c
t2:]
t3:1
t4:-50
t5:100
t6:-10000
t7:20000
t8:-1000000
t9:2000000
t10:0.45
t11:0.2543
t12:0.3242
t13:Hello
t14:checckking
isBufferEmpty:1
