%description:
Check arrays

%file: test.msg

namespace @TESTNAME@;

class Foo {}
class Bar { @byValue; }

class TestClass
{
    // array of objects (note: arrays of const objects are not supported)
    Foo fooVec[];
    Foo fooVec10[10];
    Bar barVec[];
    Bar barVec10[10];
    int IntVec[];
    int IntVec10[10];

    // pointer arrays (note: int* is not support, nor int* arrays)
    Foo *fooPtrVec[];
    const Foo *constFooPtrVec[];
    Foo *fooPtrVec10[10];
    const Foo *constFooPtrVec10[10];
};

%includes:
#include "test_m.h"

%activity:
TestClass x;

%contains: test_m.h
    // field getter/setter methods
    virtual void setFooVecArraySize(size_t size);
    virtual size_t getFooVecArraySize() const;
    virtual const Foo& getFooVec(size_t k) const;
    virtual Foo& getFooVecForUpdate(size_t k) { return const_cast<Foo&>(const_cast<TestClass*>(this)->getFooVec(k));}
    virtual void setFooVec(size_t k, const Foo& fooVec);
    virtual void insertFooVec(const Foo& fooVec);
    virtual void insertFooVec(size_t k, const Foo& fooVec);
    virtual void eraseFooVec(size_t k);
    virtual size_t getFooVec10ArraySize() const;
    virtual const Foo& getFooVec10(size_t k) const;
    virtual Foo& getFooVec10ForUpdate(size_t k) { return const_cast<Foo&>(const_cast<TestClass*>(this)->getFooVec10(k));}
    virtual void setFooVec10(size_t k, const Foo& fooVec10);
    virtual void setBarVecArraySize(size_t size);
    virtual size_t getBarVecArraySize() const;
    virtual Bar getBarVec(size_t k) const;
    virtual void setBarVec(size_t k, Bar barVec);
    virtual void insertBarVec(Bar barVec);
    virtual void insertBarVec(size_t k, Bar barVec);
    virtual void eraseBarVec(size_t k);
    virtual size_t getBarVec10ArraySize() const;
    virtual Bar getBarVec10(size_t k) const;
    virtual void setBarVec10(size_t k, Bar barVec10);
    virtual void setIntVecArraySize(size_t size);
    virtual size_t getIntVecArraySize() const;
    virtual int getIntVec(size_t k) const;
    virtual void setIntVec(size_t k, int IntVec);
    virtual void insertIntVec(int IntVec);
    virtual void insertIntVec(size_t k, int IntVec);
    virtual void eraseIntVec(size_t k);
    virtual size_t getIntVec10ArraySize() const;
    virtual int getIntVec10(size_t k) const;
    virtual void setIntVec10(size_t k, int IntVec10);
    virtual void setFooPtrVecArraySize(size_t size);
    virtual size_t getFooPtrVecArraySize() const;
    virtual const Foo * getFooPtrVec(size_t k) const;
    virtual Foo * getFooPtrVecForUpdate(size_t k) { return const_cast<Foo *>(const_cast<TestClass*>(this)->getFooPtrVec(k));}
    virtual void setFooPtrVec(size_t k, Foo * fooPtrVec);
    virtual void insertFooPtrVec(Foo * fooPtrVec);
    virtual void insertFooPtrVec(size_t k, Foo * fooPtrVec);
    virtual void eraseFooPtrVec(size_t k);
    virtual void setConstFooPtrVecArraySize(size_t size);
    virtual size_t getConstFooPtrVecArraySize() const;
    virtual const Foo * getConstFooPtrVec(size_t k) const;
    virtual void setConstFooPtrVec(size_t k, const Foo * constFooPtrVec);
    virtual void insertConstFooPtrVec(const Foo * constFooPtrVec);
    virtual void insertConstFooPtrVec(size_t k, const Foo * constFooPtrVec);
    virtual void eraseConstFooPtrVec(size_t k);
    virtual size_t getFooPtrVec10ArraySize() const;
    virtual const Foo * getFooPtrVec10(size_t k) const;
    virtual Foo * getFooPtrVec10ForUpdate(size_t k) { return const_cast<Foo *>(const_cast<TestClass*>(this)->getFooPtrVec10(k));}
    virtual void setFooPtrVec10(size_t k, Foo * fooPtrVec10);
    virtual size_t getConstFooPtrVec10ArraySize() const;
    virtual const Foo * getConstFooPtrVec10(size_t k) const;
    virtual void setConstFooPtrVec10(size_t k, const Foo * constFooPtrVec10);
};

