%description:
SimTime: see if representation of powers of 10 is accurate

%global:
// make protected SimTime::resetScale() accessible via subclassing
class SimTimeExt : SimTime {
  public: static void reset() {resetScale();}
};

%activity:
SimTimeExt::reset();
SimTime::setScaleExp(SIMTIME_NS);

SimTime t, t2, tmp;

#define P(x) if (x <= SimTime::getMaxTime().dbl()) {t=(x); EV << #x << " -> " << t << "\n";}

P(1e-15); P(1e-14); P(1e-13); P(1e-12); P(1e-11); P(1e-10); P(1e-9);
P(1e-8); P(1e-7); P(1e-6); P(1e-5); P(1e-4); P(1e-3); P(1e-2); P(1e0);
P(1e1); P(1e2); P(1e3); P(1e4); P(1e5); P(1e6); P(1e7); P(1e8); P(1e9);
P(1e10); P(1e11); P(1e12); P(1e13); P(1e14); P(1e15); P(1e16); P(1e17);
P(1e18); P(1e19); P(1e20);
EV << ".\n";

%contains: stdout
1e-15 -> 0
1e-14 -> 0
1e-13 -> 0
1e-12 -> 0
1e-11 -> 0
1e-10 -> 0
1e-9 -> 0.000000001
1e-8 -> 0.00000001
1e-7 -> 0.0000001
1e-6 -> 0.000001
1e-5 -> 0.00001
1e-4 -> 0.0001
1e-3 -> 0.001
1e-2 -> 0.01
1e0 -> 1
1e1 -> 10
1e2 -> 100
1e3 -> 1000
1e4 -> 10000
1e5 -> 100000
1e6 -> 1000000
1e7 -> 10000000
1e8 -> 100000000
1e9 -> 1000000000
.

