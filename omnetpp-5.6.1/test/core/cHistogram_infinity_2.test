%description:
Testing that collecting +/- INFs into a cHistogram does not cause mayhem

Specifically, that they result in the exact same histogram with some sequence
of values, with or without excluding infinities. (Except for the overflow
cell values.) All without crashing or throwing an error.

With various setRange() setups. Excluding cPSquare and cKSplit because the
bin layout of those is really sensitive to the number of collected samples.

%includes:
#include <iomanip>

%global:

#define ASSERT_EQ(A, B) do { if ((A) != (B)) throw cRuntimeError("ASSERT: Equality in line %d does not hold: A: %f, B: %f", __LINE__, (double)(A), (double)(B)); } while (0)

static void setupRange(cHistogram& hist, double lower, double upper, int numToPrecollect=-1, double rangeExtFactor=-1)
{
    hist.setRange(lower, upper);
    if (numToPrecollect > 0)
        hist.setNumPrecollectedValues(numToPrecollect);
    if (rangeExtFactor > 0)
        hist.setRangeExtensionFactor(rangeExtFactor);
}

static void testHistogram(cAbstractHistogram *hist, const std::vector<double> values) {
    EV << hist->getName() << std::endl;

    hist->clear();

    cAbstractHistogram *finiteOnlyHist = hist->dup();

    int numNegInfs = 0, numPosInfs = 0;

    for (double v : values) {
        hist->collect(v);
        if (std::isfinite(v))
            finiteOnlyHist->collect(v);
        else {
            if (v < 0)
                numNegInfs++;
            else
                numPosInfs++;
        }
    }

    if (!hist->binsAlreadySetUp())
        hist->setUpBins();

    if (!finiteOnlyHist->binsAlreadySetUp())
        finiteOnlyHist->setUpBins();

    ASSERT_EQ(hist->getNumBins(), finiteOnlyHist->getNumBins());

    int n = hist->getNumBins();
    for (int i = 0; i < n; ++i) {
        ASSERT_EQ(hist->getBinEdge(i), finiteOnlyHist->getBinEdge(i));
        ASSERT_EQ(hist->getBinValue(i), finiteOnlyHist->getBinValue(i));
    }
    ASSERT_EQ(hist->getBinEdge(n), finiteOnlyHist->getBinEdge(n));

    ASSERT_EQ(hist->getUnderflowSumWeights() - hist->getNegInfSumWeights(), finiteOnlyHist->getUnderflowSumWeights());
    ASSERT_EQ(hist->getOverflowSumWeights() - hist->getPosInfSumWeights(), finiteOnlyHist->getOverflowSumWeights());

    ASSERT_EQ(hist->getNegInfSumWeights(), numNegInfs);
    ASSERT_EQ(hist->getPosInfSumWeights(), numPosInfs);

    delete finiteOnlyHist;
}

%activity:

const int FIRSTVALS=5;
const double RANGEEXT=1.5;

cHistogram if_("int-fixed");
cHistogram ia ("int-auto");
cHistogram iau("int-autoupper");
cHistogram ial("int-autolower");

cHistogram ian("int-auto-5cell");
cHistogram ifn("int-fixed-5cell");
cHistogram iaun("int-autoupper-5cell");
cHistogram ialn("int-autolower-5cell");

cHistogram df_("double-fixed");
cHistogram da ("double-auto");
cHistogram dau("double-autoupper");
cHistogram dal("double-autolower");

cHistogram dan("double-auto-5cell");
cHistogram dfn("double-fixed-5cell");
cHistogram daun("double-autoupper-5cell");
cHistogram daln("double-autolower-5cell");

if_.setRange(10, 20); if_.setMode(cHistogram::MODE_INTEGERS); // mode is not auto-selected, because transform happens immediately (FIXME is that good?)
setupRange(ia, NAN, NAN, FIRSTVALS, RANGEEXT);
setupRange(iau, 10, NAN, FIRSTVALS, RANGEEXT);
setupRange(ial, NAN, 20, FIRSTVALS, RANGEEXT);

ifn.setNumBinsHint(5);  ifn.setRange(10, 20);
ian.setNumBinsHint(5);  setupRange(ian, NAN, NAN, FIRSTVALS, RANGEEXT);
iaun.setNumBinsHint(5); setupRange(iaun, 10, NAN, FIRSTVALS, RANGEEXT);
ialn.setNumBinsHint(5); setupRange(ialn, NAN, 20, FIRSTVALS, RANGEEXT);

df_.setRange(10, 20); df_.setMode(cHistogram::MODE_DOUBLES); // mode is not auto-selected, because transform happens immediately (FIXME is that good?)
setupRange(da, NAN, NAN, FIRSTVALS, RANGEEXT);
setupRange(dau, 10, NAN, FIRSTVALS, RANGEEXT);
setupRange(dal, NAN, 20, FIRSTVALS, RANGEEXT);

dfn.setNumBinsHint(5);  dfn.setRange(10, 20);
dan.setNumBinsHint(5);  setupRange(dan, NAN, NAN, FIRSTVALS, RANGEEXT);
daun.setNumBinsHint(5); setupRange(daun, 10, NAN, FIRSTVALS, RANGEEXT);
daln.setNumBinsHint(5); setupRange(daln, NAN, 20, FIRSTVALS, RANGEEXT);

cAbstractHistogram *h[] = {
  &if_, &ia, &iau, &ial,
  &ifn, &ian, &iaun, &ialn,
  &df_, &da, &dau, &dal,
  &dfn, &dan, &daun, &daln,
};
int nh = sizeof(h)/sizeof(cAbstractHistogram*);

for (int k=0; k<nh; k++) {
    // remember, we are precollecting FIRSTVALS values before setting up the bins
    testHistogram(h[k], {INFINITY, -INFINITY});
    testHistogram(h[k], {INFINITY, INFINITY, INFINITY});
    testHistogram(h[k], {-INFINITY, -INFINITY, -INFINITY});
    testHistogram(h[k], {INFINITY, 0, -INFINITY});

    testHistogram(h[k], {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, INFINITY, INFINITY, INFINITY});
    testHistogram(h[k], {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -INFINITY, -INFINITY, -INFINITY});
    testHistogram(h[k], {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, INFINITY, 0, -INFINITY});

    testHistogram(h[k], {0, 1, -INFINITY, 2, 3, 4, 5, 6, 7, 8, 9, INFINITY, INFINITY, INFINITY});
    testHistogram(h[k], {0, 1, INFINITY, 2, 3, 4, 5, 6, 7, 8, 9, -INFINITY, -INFINITY, -INFINITY});
    testHistogram(h[k], {0, 1, -INFINITY, 2, 3, 4, 5, 6, 7, 8, 9, INFINITY, 0, -INFINITY});

    testHistogram(h[k], {INFINITY, INFINITY, INFINITY, INFINITY, INFINITY, INFINITY, 0, 1, 2, 3, 4});
    testHistogram(h[k], {-INFINITY, -INFINITY, -INFINITY, -INFINITY, -INFINITY, -INFINITY, 0, 1, 2, 3, 4});
    testHistogram(h[k], {-INFINITY, INFINITY, -INFINITY, INFINITY, -INFINITY, INFINITY, 0, 1, 2, 3, 4});
    testHistogram(h[k], {-INFINITY, INFINITY, -INFINITY, INFINITY, -INFINITY, INFINITY, 0, 1, 2, 3, 4, -INFINITY, INFINITY});
}
